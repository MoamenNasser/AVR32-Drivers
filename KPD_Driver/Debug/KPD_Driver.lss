
KPD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ae4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00002ae4  00002b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021f0  00000000  00000000  00002b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dab  00000000  00000000  00004d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005aff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000079f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000088e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000097f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a24b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <main>
      7a:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <HKPD_enuInit>:
 *
 * 		This function initialize the Keypad
 *
 ***********************************/
void HKPD_enuInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62

	MDIO_VoidSetPortDirection(DIO_PORTA,0b11110000);
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	60 ef       	ldi	r22, 0xF0	; 240
     b42:	0e 94 6e 12 	call	0x24dc	; 0x24dc <MDIO_VoidSetPortDirection>
	MDIO_VoidSetPortValue(DIO_PORTA,0xFF);
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	6f ef       	ldi	r22, 0xFF	; 255
     b4a:	0e 94 af 12 	call	0x255e	; 0x255e <MDIO_VoidSetPortValue>

}
     b4e:	cf 91       	pop	r28
     b50:	df 91       	pop	r29
     b52:	08 95       	ret

00000b54 <HKPD_u8GetPressedKey>:
 *
 * 		This function get the pressed key
 *
 ***********************************/
u8 HKPD_u8GetPressedKey(void)
{
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	62 97       	sbiw	r28, 0x12	; 18
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	de bf       	out	0x3e, r29	; 62
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	cd bf       	out	0x3d, r28	; 61
	u8 Copy_u8PressedKey = 50;
     b68:	82 e3       	ldi	r24, 0x32	; 50
     b6a:	8a 8b       	std	Y+18, r24	; 0x12
	for(u8 column = 0; column <= 3; column++)
     b6c:	19 8a       	std	Y+17, r1	; 0x11
     b6e:	a8 c0       	rjmp	.+336    	; 0xcc0 <HKPD_u8GetPressedKey+0x16c>
	{
		MDIO_VoidSetPinValue(DIO_PORTA,4+column,0);
     b70:	89 89       	ldd	r24, Y+17	; 0x11
     b72:	98 2f       	mov	r25, r24
     b74:	9c 5f       	subi	r25, 0xFC	; 252
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	69 2f       	mov	r22, r25
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <MDIO_VoidSetPinValue>
		for(u8 row = 0; row <= 3; row++)
     b80:	18 8a       	std	Y+16, r1	; 0x10
     b82:	8f c0       	rjmp	.+286    	; 0xca2 <HKPD_u8GetPressedKey+0x14e>
		{
			u8 Copy_u8Result;

			Copy_u8Result = MDIO_u8GetPinValue(DIO_PORTA,row);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	68 89       	ldd	r22, Y+16	; 0x10
     b88:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <MDIO_u8GetPinValue>
     b8c:	8f 87       	std	Y+15, r24	; 0x0f
			if(Copy_u8Result == 0)
     b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b90:	88 23       	and	r24, r24
     b92:	61 f4       	brne	.+24     	; 0xbac <HKPD_u8GetPressedKey+0x58>
			{
				Copy_u8PressedKey = (4*row) + column + 1;
     b94:	88 89       	ldd	r24, Y+16	; 0x10
     b96:	88 2f       	mov	r24, r24
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	98 2f       	mov	r25, r24
     ba4:	89 89       	ldd	r24, Y+17	; 0x11
     ba6:	89 0f       	add	r24, r25
     ba8:	8f 5f       	subi	r24, 0xFF	; 255
     baa:	8a 8b       	std	Y+18, r24	; 0x12

			}
			while(MDIO_u8GetPinValue(DIO_PORTA,row) == 0)
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	68 89       	ldd	r22, Y+16	; 0x10
     bb0:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <MDIO_u8GetPinValue>
     bb4:	88 23       	and	r24, r24
     bb6:	d1 f3       	breq	.-12     	; 0xbac <HKPD_u8GetPressedKey+0x58>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a0 e2       	ldi	r26, 0x20	; 32
     bbe:	b1 e4       	ldi	r27, 0x41	; 65
     bc0:	8b 87       	std	Y+11, r24	; 0x0b
     bc2:	9c 87       	std	Y+12, r25	; 0x0c
     bc4:	ad 87       	std	Y+13, r26	; 0x0d
     bc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     bca:	7c 85       	ldd	r23, Y+12	; 0x0c
     bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bce:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	4a ef       	ldi	r20, 0xFA	; 250
     bd6:	54 e4       	ldi	r21, 0x44	; 68
     bd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	8f 83       	std	Y+7, r24	; 0x07
     be2:	98 87       	std	Y+8, r25	; 0x08
     be4:	a9 87       	std	Y+9, r26	; 0x09
     be6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     be8:	6f 81       	ldd	r22, Y+7	; 0x07
     bea:	78 85       	ldd	r23, Y+8	; 0x08
     bec:	89 85       	ldd	r24, Y+9	; 0x09
     bee:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e8       	ldi	r20, 0x80	; 128
     bf6:	5f e3       	ldi	r21, 0x3F	; 63
     bf8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bfc:	88 23       	and	r24, r24
     bfe:	2c f4       	brge	.+10     	; 0xc0a <HKPD_u8GetPressedKey+0xb6>
		__ticks = 1;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	9e 83       	std	Y+6, r25	; 0x06
     c06:	8d 83       	std	Y+5, r24	; 0x05
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <HKPD_u8GetPressedKey+0x134>
	else if (__tmp > 65535)
     c0a:	6f 81       	ldd	r22, Y+7	; 0x07
     c0c:	78 85       	ldd	r23, Y+8	; 0x08
     c0e:	89 85       	ldd	r24, Y+9	; 0x09
     c10:	9a 85       	ldd	r25, Y+10	; 0x0a
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	3f ef       	ldi	r19, 0xFF	; 255
     c16:	4f e7       	ldi	r20, 0x7F	; 127
     c18:	57 e4       	ldi	r21, 0x47	; 71
     c1a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c1e:	18 16       	cp	r1, r24
     c20:	4c f5       	brge	.+82     	; 0xc74 <HKPD_u8GetPressedKey+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c22:	6b 85       	ldd	r22, Y+11	; 0x0b
     c24:	7c 85       	ldd	r23, Y+12	; 0x0c
     c26:	8d 85       	ldd	r24, Y+13	; 0x0d
     c28:	9e 85       	ldd	r25, Y+14	; 0x0e
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e2       	ldi	r20, 0x20	; 32
     c30:	51 e4       	ldi	r21, 0x41	; 65
     c32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	bc 01       	movw	r22, r24
     c3c:	cd 01       	movw	r24, r26
     c3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	9e 83       	std	Y+6, r25	; 0x06
     c48:	8d 83       	std	Y+5, r24	; 0x05
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <HKPD_u8GetPressedKey+0x116>
     c4c:	88 ec       	ldi	r24, 0xC8	; 200
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	9c 83       	std	Y+4, r25	; 0x04
     c52:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <HKPD_u8GetPressedKey+0x104>
     c5c:	9c 83       	std	Y+4, r25	; 0x04
     c5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c60:	8d 81       	ldd	r24, Y+5	; 0x05
     c62:	9e 81       	ldd	r25, Y+6	; 0x06
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	9e 83       	std	Y+6, r25	; 0x06
     c68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6a:	8d 81       	ldd	r24, Y+5	; 0x05
     c6c:	9e 81       	ldd	r25, Y+6	; 0x06
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	69 f7       	brne	.-38     	; 0xc4c <HKPD_u8GetPressedKey+0xf8>
     c72:	14 c0       	rjmp	.+40     	; 0xc9c <HKPD_u8GetPressedKey+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c74:	6f 81       	ldd	r22, Y+7	; 0x07
     c76:	78 85       	ldd	r23, Y+8	; 0x08
     c78:	89 85       	ldd	r24, Y+9	; 0x09
     c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	9e 83       	std	Y+6, r25	; 0x06
     c86:	8d 83       	std	Y+5, r24	; 0x05
     c88:	8d 81       	ldd	r24, Y+5	; 0x05
     c8a:	9e 81       	ldd	r25, Y+6	; 0x06
     c8c:	9a 83       	std	Y+2, r25	; 0x02
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	9a 81       	ldd	r25, Y+2	; 0x02
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <HKPD_u8GetPressedKey+0x140>
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01
{
	u8 Copy_u8PressedKey = 50;
	for(u8 column = 0; column <= 3; column++)
	{
		MDIO_VoidSetPinValue(DIO_PORTA,4+column,0);
		for(u8 row = 0; row <= 3; row++)
     c9c:	88 89       	ldd	r24, Y+16	; 0x10
     c9e:	8f 5f       	subi	r24, 0xFF	; 255
     ca0:	88 8b       	std	Y+16, r24	; 0x10
     ca2:	88 89       	ldd	r24, Y+16	; 0x10
     ca4:	84 30       	cpi	r24, 0x04	; 4
     ca6:	08 f4       	brcc	.+2      	; 0xcaa <HKPD_u8GetPressedKey+0x156>
     ca8:	6d cf       	rjmp	.-294    	; 0xb84 <HKPD_u8GetPressedKey+0x30>
			{

			}
			_delay_ms(10);
		}
		MDIO_VoidSetPinValue(DIO_PORTA,4+column,1);
     caa:	89 89       	ldd	r24, Y+17	; 0x11
     cac:	98 2f       	mov	r25, r24
     cae:	9c 5f       	subi	r25, 0xFC	; 252
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	69 2f       	mov	r22, r25
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <MDIO_VoidSetPinValue>
 *
 ***********************************/
u8 HKPD_u8GetPressedKey(void)
{
	u8 Copy_u8PressedKey = 50;
	for(u8 column = 0; column <= 3; column++)
     cba:	89 89       	ldd	r24, Y+17	; 0x11
     cbc:	8f 5f       	subi	r24, 0xFF	; 255
     cbe:	89 8b       	std	Y+17, r24	; 0x11
     cc0:	89 89       	ldd	r24, Y+17	; 0x11
     cc2:	84 30       	cpi	r24, 0x04	; 4
     cc4:	08 f4       	brcc	.+2      	; 0xcc8 <HKPD_u8GetPressedKey+0x174>
     cc6:	54 cf       	rjmp	.-344    	; 0xb70 <HKPD_u8GetPressedKey+0x1c>
			}
			_delay_ms(10);
		}
		MDIO_VoidSetPinValue(DIO_PORTA,4+column,1);
	}
	return Copy_u8PressedKey;
     cc8:	8a 89       	ldd	r24, Y+18	; 0x12
}
     cca:	62 96       	adiw	r28, 0x12	; 18
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <HLCD_VoidSendChar>:
 *
 *		This Function send a character to the LCD
 *
 **********************************************************************/
void HLCD_VoidSendChar(u8 Copy_u8Data)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	6d 97       	sbiw	r28, 0x1d	; 29
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	8d 8f       	std	Y+29, r24	; 0x1d
	/*								set RS pin							*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RS_PIN,DIO_HIGH);
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	41 e0       	ldi	r20, 0x01	; 1
     cf8:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <MDIO_VoidSetPinValue>
	/*								clear RW pin						*/
	/*				here we set the pin value to port B pin 1 to 0v		*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RW_PIN,DIO_LOW);
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <MDIO_VoidSetPinValue>

	/*				here we set the port C to the given data			*/
	MDIO_VoidSetPortValue(HLCD_DATA_PORT, Copy_u8Data);
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	6d 8d       	ldd	r22, Y+29	; 0x1d
     d0a:	0e 94 af 12 	call	0x255e	; 0x255e <MDIO_VoidSetPortValue>
	/*				set E pin to HIGH									*/
	/*				here we set the pin value to port B pin 0 to 5v		*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_E_PIN,DIO_HIGH);
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	62 e0       	ldi	r22, 0x02	; 2
     d12:	41 e0       	ldi	r20, 0x01	; 1
     d14:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <MDIO_VoidSetPinValue>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	a0 e8       	ldi	r26, 0x80	; 128
     d1e:	bf e3       	ldi	r27, 0x3F	; 63
     d20:	89 8f       	std	Y+25, r24	; 0x19
     d22:	9a 8f       	std	Y+26, r25	; 0x1a
     d24:	ab 8f       	std	Y+27, r26	; 0x1b
     d26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d28:	69 8d       	ldd	r22, Y+25	; 0x19
     d2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	4a ef       	ldi	r20, 0xFA	; 250
     d36:	54 e4       	ldi	r21, 0x44	; 68
     d38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	8d 8b       	std	Y+21, r24	; 0x15
     d42:	9e 8b       	std	Y+22, r25	; 0x16
     d44:	af 8b       	std	Y+23, r26	; 0x17
     d46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d48:	6d 89       	ldd	r22, Y+21	; 0x15
     d4a:	7e 89       	ldd	r23, Y+22	; 0x16
     d4c:	8f 89       	ldd	r24, Y+23	; 0x17
     d4e:	98 8d       	ldd	r25, Y+24	; 0x18
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e8       	ldi	r20, 0x80	; 128
     d56:	5f e3       	ldi	r21, 0x3F	; 63
     d58:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d5c:	88 23       	and	r24, r24
     d5e:	2c f4       	brge	.+10     	; 0xd6a <HLCD_VoidSendChar+0x8e>
		__ticks = 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	9c 8b       	std	Y+20, r25	; 0x14
     d66:	8b 8b       	std	Y+19, r24	; 0x13
     d68:	3f c0       	rjmp	.+126    	; 0xde8 <HLCD_VoidSendChar+0x10c>
	else if (__tmp > 65535)
     d6a:	6d 89       	ldd	r22, Y+21	; 0x15
     d6c:	7e 89       	ldd	r23, Y+22	; 0x16
     d6e:	8f 89       	ldd	r24, Y+23	; 0x17
     d70:	98 8d       	ldd	r25, Y+24	; 0x18
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	3f ef       	ldi	r19, 0xFF	; 255
     d76:	4f e7       	ldi	r20, 0x7F	; 127
     d78:	57 e4       	ldi	r21, 0x47	; 71
     d7a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d7e:	18 16       	cp	r1, r24
     d80:	4c f5       	brge	.+82     	; 0xdd4 <HLCD_VoidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d82:	69 8d       	ldd	r22, Y+25	; 0x19
     d84:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	40 e2       	ldi	r20, 0x20	; 32
     d90:	51 e4       	ldi	r21, 0x41	; 65
     d92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	bc 01       	movw	r22, r24
     d9c:	cd 01       	movw	r24, r26
     d9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	9c 8b       	std	Y+20, r25	; 0x14
     da8:	8b 8b       	std	Y+19, r24	; 0x13
     daa:	0f c0       	rjmp	.+30     	; 0xdca <HLCD_VoidSendChar+0xee>
     dac:	88 ec       	ldi	r24, 0xC8	; 200
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9a 8b       	std	Y+18, r25	; 0x12
     db2:	89 8b       	std	Y+17, r24	; 0x11
     db4:	89 89       	ldd	r24, Y+17	; 0x11
     db6:	9a 89       	ldd	r25, Y+18	; 0x12
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <HLCD_VoidSendChar+0xdc>
     dbc:	9a 8b       	std	Y+18, r25	; 0x12
     dbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc0:	8b 89       	ldd	r24, Y+19	; 0x13
     dc2:	9c 89       	ldd	r25, Y+20	; 0x14
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	9c 8b       	std	Y+20, r25	; 0x14
     dc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dca:	8b 89       	ldd	r24, Y+19	; 0x13
     dcc:	9c 89       	ldd	r25, Y+20	; 0x14
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	69 f7       	brne	.-38     	; 0xdac <HLCD_VoidSendChar+0xd0>
     dd2:	14 c0       	rjmp	.+40     	; 0xdfc <HLCD_VoidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd4:	6d 89       	ldd	r22, Y+21	; 0x15
     dd6:	7e 89       	ldd	r23, Y+22	; 0x16
     dd8:	8f 89       	ldd	r24, Y+23	; 0x17
     dda:	98 8d       	ldd	r25, Y+24	; 0x18
     ddc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	9c 8b       	std	Y+20, r25	; 0x14
     de6:	8b 8b       	std	Y+19, r24	; 0x13
     de8:	8b 89       	ldd	r24, Y+19	; 0x13
     dea:	9c 89       	ldd	r25, Y+20	; 0x14
     dec:	98 8b       	std	Y+16, r25	; 0x10
     dee:	8f 87       	std	Y+15, r24	; 0x0f
     df0:	8f 85       	ldd	r24, Y+15	; 0x0f
     df2:	98 89       	ldd	r25, Y+16	; 0x10
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <HLCD_VoidSendChar+0x118>
     df8:	98 8b       	std	Y+16, r25	; 0x10
     dfa:	8f 87       	std	Y+15, r24	; 0x0f
	/*				Delay Function for 10 microsecond					*/
	_delay_ms(1);
	/*							clear E pin								*/
	/*		here we set the pin value to port B pin 2 to 5v				*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_E_PIN,DIO_LOW);
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	62 e0       	ldi	r22, 0x02	; 2
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <MDIO_VoidSetPinValue>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	a0 e8       	ldi	r26, 0x80	; 128
     e0c:	b0 e4       	ldi	r27, 0x40	; 64
     e0e:	8b 87       	std	Y+11, r24	; 0x0b
     e10:	9c 87       	std	Y+12, r25	; 0x0c
     e12:	ad 87       	std	Y+13, r26	; 0x0d
     e14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e16:	6b 85       	ldd	r22, Y+11	; 0x0b
     e18:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	4a ef       	ldi	r20, 0xFA	; 250
     e24:	54 e4       	ldi	r21, 0x44	; 68
     e26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	8f 83       	std	Y+7, r24	; 0x07
     e30:	98 87       	std	Y+8, r25	; 0x08
     e32:	a9 87       	std	Y+9, r26	; 0x09
     e34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e36:	6f 81       	ldd	r22, Y+7	; 0x07
     e38:	78 85       	ldd	r23, Y+8	; 0x08
     e3a:	89 85       	ldd	r24, Y+9	; 0x09
     e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e8       	ldi	r20, 0x80	; 128
     e44:	5f e3       	ldi	r21, 0x3F	; 63
     e46:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e4a:	88 23       	and	r24, r24
     e4c:	2c f4       	brge	.+10     	; 0xe58 <HLCD_VoidSendChar+0x17c>
		__ticks = 1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9e 83       	std	Y+6, r25	; 0x06
     e54:	8d 83       	std	Y+5, r24	; 0x05
     e56:	3f c0       	rjmp	.+126    	; 0xed6 <HLCD_VoidSendChar+0x1fa>
	else if (__tmp > 65535)
     e58:	6f 81       	ldd	r22, Y+7	; 0x07
     e5a:	78 85       	ldd	r23, Y+8	; 0x08
     e5c:	89 85       	ldd	r24, Y+9	; 0x09
     e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	3f ef       	ldi	r19, 0xFF	; 255
     e64:	4f e7       	ldi	r20, 0x7F	; 127
     e66:	57 e4       	ldi	r21, 0x47	; 71
     e68:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e6c:	18 16       	cp	r1, r24
     e6e:	4c f5       	brge	.+82     	; 0xec2 <HLCD_VoidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e70:	6b 85       	ldd	r22, Y+11	; 0x0b
     e72:	7c 85       	ldd	r23, Y+12	; 0x0c
     e74:	8d 85       	ldd	r24, Y+13	; 0x0d
     e76:	9e 85       	ldd	r25, Y+14	; 0x0e
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	40 e2       	ldi	r20, 0x20	; 32
     e7e:	51 e4       	ldi	r21, 0x41	; 65
     e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9e 83       	std	Y+6, r25	; 0x06
     e96:	8d 83       	std	Y+5, r24	; 0x05
     e98:	0f c0       	rjmp	.+30     	; 0xeb8 <HLCD_VoidSendChar+0x1dc>
     e9a:	88 ec       	ldi	r24, 0xC8	; 200
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	9c 81       	ldd	r25, Y+4	; 0x04
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <HLCD_VoidSendChar+0x1ca>
     eaa:	9c 83       	std	Y+4, r25	; 0x04
     eac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eae:	8d 81       	ldd	r24, Y+5	; 0x05
     eb0:	9e 81       	ldd	r25, Y+6	; 0x06
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	9e 83       	std	Y+6, r25	; 0x06
     eb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	69 f7       	brne	.-38     	; 0xe9a <HLCD_VoidSendChar+0x1be>
     ec0:	14 c0       	rjmp	.+40     	; 0xeea <HLCD_VoidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec2:	6f 81       	ldd	r22, Y+7	; 0x07
     ec4:	78 85       	ldd	r23, Y+8	; 0x08
     ec6:	89 85       	ldd	r24, Y+9	; 0x09
     ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	9e 83       	std	Y+6, r25	; 0x06
     ed4:	8d 83       	std	Y+5, r24	; 0x05
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <HLCD_VoidSendChar+0x206>
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	89 83       	std	Y+1, r24	; 0x01
	/*Delay Function for 1ms to make sure that the LCD complete the task*/
	_delay_ms(4);

}
     eea:	6d 96       	adiw	r28, 0x1d	; 29
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <HLCD_VoidSendCommand>:
 *
 *		This Function send a command to the LCD
 *
 ************************************************************************/
void HLCD_VoidSendCommand(u8 Copy_u8Command)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	6d 97       	sbiw	r28, 0x1d	; 29
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	8d 8f       	std	Y+29, r24	; 0x1d
	/*					clear Rs pin									*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RS_PIN,DIO_LOW);
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <MDIO_VoidSetPinValue>
	/*					clear RW pin									*/
	/*			here we set the pin value to port B pin 1 to 0v			*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RW_PIN,DIO_LOW);
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <MDIO_VoidSetPinValue>

	/*			Delay Function for 10 microsecond						*/
	/*			here we set the port C to the given data				*/
	MDIO_VoidSetPortValue(HLCD_DATA_PORT, Copy_u8Command);
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	6d 8d       	ldd	r22, Y+29	; 0x1d
     f2a:	0e 94 af 12 	call	0x255e	; 0x255e <MDIO_VoidSetPortValue>
	/*				set E pin to HIGH									*/
	/*			here we set the pin value to port B pin 0 to 5v			*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_E_PIN,DIO_HIGH);
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	62 e0       	ldi	r22, 0x02	; 2
     f32:	41 e0       	ldi	r20, 0x01	; 1
     f34:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <MDIO_VoidSetPinValue>
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	a0 e8       	ldi	r26, 0x80	; 128
     f3e:	bf e3       	ldi	r27, 0x3F	; 63
     f40:	89 8f       	std	Y+25, r24	; 0x19
     f42:	9a 8f       	std	Y+26, r25	; 0x1a
     f44:	ab 8f       	std	Y+27, r26	; 0x1b
     f46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f48:	69 8d       	ldd	r22, Y+25	; 0x19
     f4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	4a ef       	ldi	r20, 0xFA	; 250
     f56:	54 e4       	ldi	r21, 0x44	; 68
     f58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	8d 8b       	std	Y+21, r24	; 0x15
     f62:	9e 8b       	std	Y+22, r25	; 0x16
     f64:	af 8b       	std	Y+23, r26	; 0x17
     f66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f68:	6d 89       	ldd	r22, Y+21	; 0x15
     f6a:	7e 89       	ldd	r23, Y+22	; 0x16
     f6c:	8f 89       	ldd	r24, Y+23	; 0x17
     f6e:	98 8d       	ldd	r25, Y+24	; 0x18
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e8       	ldi	r20, 0x80	; 128
     f76:	5f e3       	ldi	r21, 0x3F	; 63
     f78:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f7c:	88 23       	and	r24, r24
     f7e:	2c f4       	brge	.+10     	; 0xf8a <HLCD_VoidSendCommand+0x8e>
		__ticks = 1;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	9c 8b       	std	Y+20, r25	; 0x14
     f86:	8b 8b       	std	Y+19, r24	; 0x13
     f88:	3f c0       	rjmp	.+126    	; 0x1008 <HLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
     f8a:	6d 89       	ldd	r22, Y+21	; 0x15
     f8c:	7e 89       	ldd	r23, Y+22	; 0x16
     f8e:	8f 89       	ldd	r24, Y+23	; 0x17
     f90:	98 8d       	ldd	r25, Y+24	; 0x18
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	3f ef       	ldi	r19, 0xFF	; 255
     f96:	4f e7       	ldi	r20, 0x7F	; 127
     f98:	57 e4       	ldi	r21, 0x47	; 71
     f9a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f9e:	18 16       	cp	r1, r24
     fa0:	4c f5       	brge	.+82     	; 0xff4 <HLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa2:	69 8d       	ldd	r22, Y+25	; 0x19
     fa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e2       	ldi	r20, 0x20	; 32
     fb0:	51 e4       	ldi	r21, 0x41	; 65
     fb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	9c 8b       	std	Y+20, r25	; 0x14
     fc8:	8b 8b       	std	Y+19, r24	; 0x13
     fca:	0f c0       	rjmp	.+30     	; 0xfea <HLCD_VoidSendCommand+0xee>
     fcc:	88 ec       	ldi	r24, 0xC8	; 200
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9a 8b       	std	Y+18, r25	; 0x12
     fd2:	89 8b       	std	Y+17, r24	; 0x11
     fd4:	89 89       	ldd	r24, Y+17	; 0x11
     fd6:	9a 89       	ldd	r25, Y+18	; 0x12
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <HLCD_VoidSendCommand+0xdc>
     fdc:	9a 8b       	std	Y+18, r25	; 0x12
     fde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe0:	8b 89       	ldd	r24, Y+19	; 0x13
     fe2:	9c 89       	ldd	r25, Y+20	; 0x14
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	9c 8b       	std	Y+20, r25	; 0x14
     fe8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fea:	8b 89       	ldd	r24, Y+19	; 0x13
     fec:	9c 89       	ldd	r25, Y+20	; 0x14
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	69 f7       	brne	.-38     	; 0xfcc <HLCD_VoidSendCommand+0xd0>
     ff2:	14 c0       	rjmp	.+40     	; 0x101c <HLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff4:	6d 89       	ldd	r22, Y+21	; 0x15
     ff6:	7e 89       	ldd	r23, Y+22	; 0x16
     ff8:	8f 89       	ldd	r24, Y+23	; 0x17
     ffa:	98 8d       	ldd	r25, Y+24	; 0x18
     ffc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	9c 8b       	std	Y+20, r25	; 0x14
    1006:	8b 8b       	std	Y+19, r24	; 0x13
    1008:	8b 89       	ldd	r24, Y+19	; 0x13
    100a:	9c 89       	ldd	r25, Y+20	; 0x14
    100c:	98 8b       	std	Y+16, r25	; 0x10
    100e:	8f 87       	std	Y+15, r24	; 0x0f
    1010:	8f 85       	ldd	r24, Y+15	; 0x0f
    1012:	98 89       	ldd	r25, Y+16	; 0x10
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <HLCD_VoidSendCommand+0x118>
    1018:	98 8b       	std	Y+16, r25	; 0x10
    101a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*					clear E pin										*/
	/*			here we set the pin value to port B pin 2 to 5v			*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_E_PIN,DIO_LOW);
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	62 e0       	ldi	r22, 0x02	; 2
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <MDIO_VoidSetPinValue>
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	a0 e8       	ldi	r26, 0x80	; 128
    102c:	b0 e4       	ldi	r27, 0x40	; 64
    102e:	8b 87       	std	Y+11, r24	; 0x0b
    1030:	9c 87       	std	Y+12, r25	; 0x0c
    1032:	ad 87       	std	Y+13, r26	; 0x0d
    1034:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1036:	6b 85       	ldd	r22, Y+11	; 0x0b
    1038:	7c 85       	ldd	r23, Y+12	; 0x0c
    103a:	8d 85       	ldd	r24, Y+13	; 0x0d
    103c:	9e 85       	ldd	r25, Y+14	; 0x0e
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	4a ef       	ldi	r20, 0xFA	; 250
    1044:	54 e4       	ldi	r21, 0x44	; 68
    1046:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	8f 83       	std	Y+7, r24	; 0x07
    1050:	98 87       	std	Y+8, r25	; 0x08
    1052:	a9 87       	std	Y+9, r26	; 0x09
    1054:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1056:	6f 81       	ldd	r22, Y+7	; 0x07
    1058:	78 85       	ldd	r23, Y+8	; 0x08
    105a:	89 85       	ldd	r24, Y+9	; 0x09
    105c:	9a 85       	ldd	r25, Y+10	; 0x0a
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e8       	ldi	r20, 0x80	; 128
    1064:	5f e3       	ldi	r21, 0x3F	; 63
    1066:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    106a:	88 23       	and	r24, r24
    106c:	2c f4       	brge	.+10     	; 0x1078 <HLCD_VoidSendCommand+0x17c>
		__ticks = 1;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9e 83       	std	Y+6, r25	; 0x06
    1074:	8d 83       	std	Y+5, r24	; 0x05
    1076:	3f c0       	rjmp	.+126    	; 0x10f6 <HLCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1078:	6f 81       	ldd	r22, Y+7	; 0x07
    107a:	78 85       	ldd	r23, Y+8	; 0x08
    107c:	89 85       	ldd	r24, Y+9	; 0x09
    107e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	3f ef       	ldi	r19, 0xFF	; 255
    1084:	4f e7       	ldi	r20, 0x7F	; 127
    1086:	57 e4       	ldi	r21, 0x47	; 71
    1088:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    108c:	18 16       	cp	r1, r24
    108e:	4c f5       	brge	.+82     	; 0x10e2 <HLCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1090:	6b 85       	ldd	r22, Y+11	; 0x0b
    1092:	7c 85       	ldd	r23, Y+12	; 0x0c
    1094:	8d 85       	ldd	r24, Y+13	; 0x0d
    1096:	9e 85       	ldd	r25, Y+14	; 0x0e
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 e2       	ldi	r20, 0x20	; 32
    109e:	51 e4       	ldi	r21, 0x41	; 65
    10a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	bc 01       	movw	r22, r24
    10aa:	cd 01       	movw	r24, r26
    10ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	0f c0       	rjmp	.+30     	; 0x10d8 <HLCD_VoidSendCommand+0x1dc>
    10ba:	88 ec       	ldi	r24, 0xC8	; 200
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	9c 83       	std	Y+4, r25	; 0x04
    10c0:	8b 83       	std	Y+3, r24	; 0x03
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <HLCD_VoidSendCommand+0x1ca>
    10ca:	9c 83       	std	Y+4, r25	; 0x04
    10cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	9e 81       	ldd	r25, Y+6	; 0x06
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	9e 81       	ldd	r25, Y+6	; 0x06
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	69 f7       	brne	.-38     	; 0x10ba <HLCD_VoidSendCommand+0x1be>
    10e0:	14 c0       	rjmp	.+40     	; 0x110a <HLCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e2:	6f 81       	ldd	r22, Y+7	; 0x07
    10e4:	78 85       	ldd	r23, Y+8	; 0x08
    10e6:	89 85       	ldd	r24, Y+9	; 0x09
    10e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	9e 83       	std	Y+6, r25	; 0x06
    10f4:	8d 83       	std	Y+5, r24	; 0x05
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	9a 83       	std	Y+2, r25	; 0x02
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	9a 81       	ldd	r25, Y+2	; 0x02
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <HLCD_VoidSendCommand+0x206>
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	89 83       	std	Y+1, r24	; 0x01
	/*Delay Function for 1ms to make sure that the LCD complete the task*/
	_delay_ms(4);
}
    110a:	6d 96       	adiw	r28, 0x1d	; 29
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <HLCD_enuInit>:
 *
 * 		Here we initialize each port direction and every pin we need
 *
 **********************************************************************/
void HLCD_enuInit(void)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	e8 97       	sbiw	r28, 0x38	; 56
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
	MDIO_VoidSetPortDirection(DIO_PORTB,DIO_OUTPUT);
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	6f ef       	ldi	r22, 0xFF	; 255
    1134:	0e 94 6e 12 	call	0x24dc	; 0x24dc <MDIO_VoidSetPortDirection>
	MDIO_VoidSetPortDirection(DIO_PORTD,DIO_OUTPUT);
    1138:	83 e0       	ldi	r24, 0x03	; 3
    113a:	6f ef       	ldi	r22, 0xFF	; 255
    113c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <MDIO_VoidSetPortDirection>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a8 e4       	ldi	r26, 0x48	; 72
    1146:	b2 e4       	ldi	r27, 0x42	; 66
    1148:	8d ab       	std	Y+53, r24	; 0x35
    114a:	9e ab       	std	Y+54, r25	; 0x36
    114c:	af ab       	std	Y+55, r26	; 0x37
    114e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1150:	6d a9       	ldd	r22, Y+53	; 0x35
    1152:	7e a9       	ldd	r23, Y+54	; 0x36
    1154:	8f a9       	ldd	r24, Y+55	; 0x37
    1156:	98 ad       	ldd	r25, Y+56	; 0x38
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	4a ef       	ldi	r20, 0xFA	; 250
    115e:	54 e4       	ldi	r21, 0x44	; 68
    1160:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	89 ab       	std	Y+49, r24	; 0x31
    116a:	9a ab       	std	Y+50, r25	; 0x32
    116c:	ab ab       	std	Y+51, r26	; 0x33
    116e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1170:	69 a9       	ldd	r22, Y+49	; 0x31
    1172:	7a a9       	ldd	r23, Y+50	; 0x32
    1174:	8b a9       	ldd	r24, Y+51	; 0x33
    1176:	9c a9       	ldd	r25, Y+52	; 0x34
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e8       	ldi	r20, 0x80	; 128
    117e:	5f e3       	ldi	r21, 0x3F	; 63
    1180:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1184:	88 23       	and	r24, r24
    1186:	2c f4       	brge	.+10     	; 0x1192 <HLCD_enuInit+0x76>
		__ticks = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	98 ab       	std	Y+48, r25	; 0x30
    118e:	8f a7       	std	Y+47, r24	; 0x2f
    1190:	3f c0       	rjmp	.+126    	; 0x1210 <HLCD_enuInit+0xf4>
	else if (__tmp > 65535)
    1192:	69 a9       	ldd	r22, Y+49	; 0x31
    1194:	7a a9       	ldd	r23, Y+50	; 0x32
    1196:	8b a9       	ldd	r24, Y+51	; 0x33
    1198:	9c a9       	ldd	r25, Y+52	; 0x34
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	3f ef       	ldi	r19, 0xFF	; 255
    119e:	4f e7       	ldi	r20, 0x7F	; 127
    11a0:	57 e4       	ldi	r21, 0x47	; 71
    11a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11a6:	18 16       	cp	r1, r24
    11a8:	4c f5       	brge	.+82     	; 0x11fc <HLCD_enuInit+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11aa:	6d a9       	ldd	r22, Y+53	; 0x35
    11ac:	7e a9       	ldd	r23, Y+54	; 0x36
    11ae:	8f a9       	ldd	r24, Y+55	; 0x37
    11b0:	98 ad       	ldd	r25, Y+56	; 0x38
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e2       	ldi	r20, 0x20	; 32
    11b8:	51 e4       	ldi	r21, 0x41	; 65
    11ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	98 ab       	std	Y+48, r25	; 0x30
    11d0:	8f a7       	std	Y+47, r24	; 0x2f
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <HLCD_enuInit+0xd6>
    11d4:	88 ec       	ldi	r24, 0xC8	; 200
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	9e a7       	std	Y+46, r25	; 0x2e
    11da:	8d a7       	std	Y+45, r24	; 0x2d
    11dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    11de:	9e a5       	ldd	r25, Y+46	; 0x2e
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <HLCD_enuInit+0xc4>
    11e4:	9e a7       	std	Y+46, r25	; 0x2e
    11e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ea:	98 a9       	ldd	r25, Y+48	; 0x30
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	98 ab       	std	Y+48, r25	; 0x30
    11f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11f4:	98 a9       	ldd	r25, Y+48	; 0x30
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	69 f7       	brne	.-38     	; 0x11d4 <HLCD_enuInit+0xb8>
    11fa:	14 c0       	rjmp	.+40     	; 0x1224 <HLCD_enuInit+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fc:	69 a9       	ldd	r22, Y+49	; 0x31
    11fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1200:	8b a9       	ldd	r24, Y+51	; 0x33
    1202:	9c a9       	ldd	r25, Y+52	; 0x34
    1204:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	98 ab       	std	Y+48, r25	; 0x30
    120e:	8f a7       	std	Y+47, r24	; 0x2f
    1210:	8f a5       	ldd	r24, Y+47	; 0x2f
    1212:	98 a9       	ldd	r25, Y+48	; 0x30
    1214:	9c a7       	std	Y+44, r25	; 0x2c
    1216:	8b a7       	std	Y+43, r24	; 0x2b
    1218:	8b a5       	ldd	r24, Y+43	; 0x2b
    121a:	9c a5       	ldd	r25, Y+44	; 0x2c
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <HLCD_enuInit+0x100>
    1220:	9c a7       	std	Y+44, r25	; 0x2c
    1222:	8b a7       	std	Y+43, r24	; 0x2b
	#if HLCD_INIT_MODE == HLCD_8_BIT_MODE
	*/
		/*					Delay for 30ms									*/
		_delay_ms(50);
		/*					set Port c to output							*/
		HLCD_VoidSendCommand(0b00111000);
    1224:	88 e3       	ldi	r24, 0x38	; 56
    1226:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	a0 e8       	ldi	r26, 0x80	; 128
    1230:	bf e3       	ldi	r27, 0x3F	; 63
    1232:	8f a3       	std	Y+39, r24	; 0x27
    1234:	98 a7       	std	Y+40, r25	; 0x28
    1236:	a9 a7       	std	Y+41, r26	; 0x29
    1238:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123a:	6f a1       	ldd	r22, Y+39	; 0x27
    123c:	78 a5       	ldd	r23, Y+40	; 0x28
    123e:	89 a5       	ldd	r24, Y+41	; 0x29
    1240:	9a a5       	ldd	r25, Y+42	; 0x2a
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	4a ef       	ldi	r20, 0xFA	; 250
    1248:	54 e4       	ldi	r21, 0x44	; 68
    124a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	8b a3       	std	Y+35, r24	; 0x23
    1254:	9c a3       	std	Y+36, r25	; 0x24
    1256:	ad a3       	std	Y+37, r26	; 0x25
    1258:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    125a:	6b a1       	ldd	r22, Y+35	; 0x23
    125c:	7c a1       	ldd	r23, Y+36	; 0x24
    125e:	8d a1       	ldd	r24, Y+37	; 0x25
    1260:	9e a1       	ldd	r25, Y+38	; 0x26
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e8       	ldi	r20, 0x80	; 128
    1268:	5f e3       	ldi	r21, 0x3F	; 63
    126a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    126e:	88 23       	and	r24, r24
    1270:	2c f4       	brge	.+10     	; 0x127c <HLCD_enuInit+0x160>
		__ticks = 1;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9a a3       	std	Y+34, r25	; 0x22
    1278:	89 a3       	std	Y+33, r24	; 0x21
    127a:	3f c0       	rjmp	.+126    	; 0x12fa <HLCD_enuInit+0x1de>
	else if (__tmp > 65535)
    127c:	6b a1       	ldd	r22, Y+35	; 0x23
    127e:	7c a1       	ldd	r23, Y+36	; 0x24
    1280:	8d a1       	ldd	r24, Y+37	; 0x25
    1282:	9e a1       	ldd	r25, Y+38	; 0x26
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	3f ef       	ldi	r19, 0xFF	; 255
    1288:	4f e7       	ldi	r20, 0x7F	; 127
    128a:	57 e4       	ldi	r21, 0x47	; 71
    128c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1290:	18 16       	cp	r1, r24
    1292:	4c f5       	brge	.+82     	; 0x12e6 <HLCD_enuInit+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1294:	6f a1       	ldd	r22, Y+39	; 0x27
    1296:	78 a5       	ldd	r23, Y+40	; 0x28
    1298:	89 a5       	ldd	r24, Y+41	; 0x29
    129a:	9a a5       	ldd	r25, Y+42	; 0x2a
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e2       	ldi	r20, 0x20	; 32
    12a2:	51 e4       	ldi	r21, 0x41	; 65
    12a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	bc 01       	movw	r22, r24
    12ae:	cd 01       	movw	r24, r26
    12b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	9a a3       	std	Y+34, r25	; 0x22
    12ba:	89 a3       	std	Y+33, r24	; 0x21
    12bc:	0f c0       	rjmp	.+30     	; 0x12dc <HLCD_enuInit+0x1c0>
    12be:	88 ec       	ldi	r24, 0xC8	; 200
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	98 a3       	std	Y+32, r25	; 0x20
    12c4:	8f 8f       	std	Y+31, r24	; 0x1f
    12c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12c8:	98 a1       	ldd	r25, Y+32	; 0x20
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <HLCD_enuInit+0x1ae>
    12ce:	98 a3       	std	Y+32, r25	; 0x20
    12d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d2:	89 a1       	ldd	r24, Y+33	; 0x21
    12d4:	9a a1       	ldd	r25, Y+34	; 0x22
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	9a a3       	std	Y+34, r25	; 0x22
    12da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12dc:	89 a1       	ldd	r24, Y+33	; 0x21
    12de:	9a a1       	ldd	r25, Y+34	; 0x22
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	69 f7       	brne	.-38     	; 0x12be <HLCD_enuInit+0x1a2>
    12e4:	14 c0       	rjmp	.+40     	; 0x130e <HLCD_enuInit+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e6:	6b a1       	ldd	r22, Y+35	; 0x23
    12e8:	7c a1       	ldd	r23, Y+36	; 0x24
    12ea:	8d a1       	ldd	r24, Y+37	; 0x25
    12ec:	9e a1       	ldd	r25, Y+38	; 0x26
    12ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	9a a3       	std	Y+34, r25	; 0x22
    12f8:	89 a3       	std	Y+33, r24	; 0x21
    12fa:	89 a1       	ldd	r24, Y+33	; 0x21
    12fc:	9a a1       	ldd	r25, Y+34	; 0x22
    12fe:	9e 8f       	std	Y+30, r25	; 0x1e
    1300:	8d 8f       	std	Y+29, r24	; 0x1d
    1302:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1304:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <HLCD_enuInit+0x1ea>
    130a:	9e 8f       	std	Y+30, r25	; 0x1e
    130c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		/*					set port b pin number 0 to high					*/
		HLCD_VoidSendCommand(0b00001111);
    130e:	8f e0       	ldi	r24, 0x0F	; 15
    1310:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	a0 e8       	ldi	r26, 0x80	; 128
    131a:	bf e3       	ldi	r27, 0x3F	; 63
    131c:	89 8f       	std	Y+25, r24	; 0x19
    131e:	9a 8f       	std	Y+26, r25	; 0x1a
    1320:	ab 8f       	std	Y+27, r26	; 0x1b
    1322:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1324:	69 8d       	ldd	r22, Y+25	; 0x19
    1326:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1328:	8b 8d       	ldd	r24, Y+27	; 0x1b
    132a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	4a ef       	ldi	r20, 0xFA	; 250
    1332:	54 e4       	ldi	r21, 0x44	; 68
    1334:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	8d 8b       	std	Y+21, r24	; 0x15
    133e:	9e 8b       	std	Y+22, r25	; 0x16
    1340:	af 8b       	std	Y+23, r26	; 0x17
    1342:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1344:	6d 89       	ldd	r22, Y+21	; 0x15
    1346:	7e 89       	ldd	r23, Y+22	; 0x16
    1348:	8f 89       	ldd	r24, Y+23	; 0x17
    134a:	98 8d       	ldd	r25, Y+24	; 0x18
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e8       	ldi	r20, 0x80	; 128
    1352:	5f e3       	ldi	r21, 0x3F	; 63
    1354:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1358:	88 23       	and	r24, r24
    135a:	2c f4       	brge	.+10     	; 0x1366 <HLCD_enuInit+0x24a>
		__ticks = 1;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9c 8b       	std	Y+20, r25	; 0x14
    1362:	8b 8b       	std	Y+19, r24	; 0x13
    1364:	3f c0       	rjmp	.+126    	; 0x13e4 <HLCD_enuInit+0x2c8>
	else if (__tmp > 65535)
    1366:	6d 89       	ldd	r22, Y+21	; 0x15
    1368:	7e 89       	ldd	r23, Y+22	; 0x16
    136a:	8f 89       	ldd	r24, Y+23	; 0x17
    136c:	98 8d       	ldd	r25, Y+24	; 0x18
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	3f ef       	ldi	r19, 0xFF	; 255
    1372:	4f e7       	ldi	r20, 0x7F	; 127
    1374:	57 e4       	ldi	r21, 0x47	; 71
    1376:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    137a:	18 16       	cp	r1, r24
    137c:	4c f5       	brge	.+82     	; 0x13d0 <HLCD_enuInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137e:	69 8d       	ldd	r22, Y+25	; 0x19
    1380:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1382:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1384:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	40 e2       	ldi	r20, 0x20	; 32
    138c:	51 e4       	ldi	r21, 0x41	; 65
    138e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	bc 01       	movw	r22, r24
    1398:	cd 01       	movw	r24, r26
    139a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	9c 8b       	std	Y+20, r25	; 0x14
    13a4:	8b 8b       	std	Y+19, r24	; 0x13
    13a6:	0f c0       	rjmp	.+30     	; 0x13c6 <HLCD_enuInit+0x2aa>
    13a8:	88 ec       	ldi	r24, 0xC8	; 200
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	9a 8b       	std	Y+18, r25	; 0x12
    13ae:	89 8b       	std	Y+17, r24	; 0x11
    13b0:	89 89       	ldd	r24, Y+17	; 0x11
    13b2:	9a 89       	ldd	r25, Y+18	; 0x12
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <HLCD_enuInit+0x298>
    13b8:	9a 8b       	std	Y+18, r25	; 0x12
    13ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13bc:	8b 89       	ldd	r24, Y+19	; 0x13
    13be:	9c 89       	ldd	r25, Y+20	; 0x14
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	9c 8b       	std	Y+20, r25	; 0x14
    13c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c6:	8b 89       	ldd	r24, Y+19	; 0x13
    13c8:	9c 89       	ldd	r25, Y+20	; 0x14
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	69 f7       	brne	.-38     	; 0x13a8 <HLCD_enuInit+0x28c>
    13ce:	14 c0       	rjmp	.+40     	; 0x13f8 <HLCD_enuInit+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d0:	6d 89       	ldd	r22, Y+21	; 0x15
    13d2:	7e 89       	ldd	r23, Y+22	; 0x16
    13d4:	8f 89       	ldd	r24, Y+23	; 0x17
    13d6:	98 8d       	ldd	r25, Y+24	; 0x18
    13d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	9c 8b       	std	Y+20, r25	; 0x14
    13e2:	8b 8b       	std	Y+19, r24	; 0x13
    13e4:	8b 89       	ldd	r24, Y+19	; 0x13
    13e6:	9c 89       	ldd	r25, Y+20	; 0x14
    13e8:	98 8b       	std	Y+16, r25	; 0x10
    13ea:	8f 87       	std	Y+15, r24	; 0x0f
    13ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ee:	98 89       	ldd	r25, Y+16	; 0x10
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <HLCD_enuInit+0x2d4>
    13f4:	98 8b       	std	Y+16, r25	; 0x10
    13f6:	8f 87       	std	Y+15, r24	; 0x0f
		/*					Delay for 1ms									*/
		_delay_ms(1);
		HLCD_VoidSendCommand(0b00000000);
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a0 e0       	ldi	r26, 0x00	; 0
    1404:	b0 e4       	ldi	r27, 0x40	; 64
    1406:	8b 87       	std	Y+11, r24	; 0x0b
    1408:	9c 87       	std	Y+12, r25	; 0x0c
    140a:	ad 87       	std	Y+13, r26	; 0x0d
    140c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1410:	7c 85       	ldd	r23, Y+12	; 0x0c
    1412:	8d 85       	ldd	r24, Y+13	; 0x0d
    1414:	9e 85       	ldd	r25, Y+14	; 0x0e
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	4a ef       	ldi	r20, 0xFA	; 250
    141c:	54 e4       	ldi	r21, 0x44	; 68
    141e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	8f 83       	std	Y+7, r24	; 0x07
    1428:	98 87       	std	Y+8, r25	; 0x08
    142a:	a9 87       	std	Y+9, r26	; 0x09
    142c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    142e:	6f 81       	ldd	r22, Y+7	; 0x07
    1430:	78 85       	ldd	r23, Y+8	; 0x08
    1432:	89 85       	ldd	r24, Y+9	; 0x09
    1434:	9a 85       	ldd	r25, Y+10	; 0x0a
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e8       	ldi	r20, 0x80	; 128
    143c:	5f e3       	ldi	r21, 0x3F	; 63
    143e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1442:	88 23       	and	r24, r24
    1444:	2c f4       	brge	.+10     	; 0x1450 <HLCD_enuInit+0x334>
		__ticks = 1;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9e 83       	std	Y+6, r25	; 0x06
    144c:	8d 83       	std	Y+5, r24	; 0x05
    144e:	3f c0       	rjmp	.+126    	; 0x14ce <HLCD_enuInit+0x3b2>
	else if (__tmp > 65535)
    1450:	6f 81       	ldd	r22, Y+7	; 0x07
    1452:	78 85       	ldd	r23, Y+8	; 0x08
    1454:	89 85       	ldd	r24, Y+9	; 0x09
    1456:	9a 85       	ldd	r25, Y+10	; 0x0a
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	3f ef       	ldi	r19, 0xFF	; 255
    145c:	4f e7       	ldi	r20, 0x7F	; 127
    145e:	57 e4       	ldi	r21, 0x47	; 71
    1460:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1464:	18 16       	cp	r1, r24
    1466:	4c f5       	brge	.+82     	; 0x14ba <HLCD_enuInit+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1468:	6b 85       	ldd	r22, Y+11	; 0x0b
    146a:	7c 85       	ldd	r23, Y+12	; 0x0c
    146c:	8d 85       	ldd	r24, Y+13	; 0x0d
    146e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e2       	ldi	r20, 0x20	; 32
    1476:	51 e4       	ldi	r21, 0x41	; 65
    1478:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	bc 01       	movw	r22, r24
    1482:	cd 01       	movw	r24, r26
    1484:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 83       	std	Y+5, r24	; 0x05
    1490:	0f c0       	rjmp	.+30     	; 0x14b0 <HLCD_enuInit+0x394>
    1492:	88 ec       	ldi	r24, 0xC8	; 200
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	9c 83       	std	Y+4, r25	; 0x04
    1498:	8b 83       	std	Y+3, r24	; 0x03
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	9c 81       	ldd	r25, Y+4	; 0x04
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <HLCD_enuInit+0x382>
    14a2:	9c 83       	std	Y+4, r25	; 0x04
    14a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	9e 81       	ldd	r25, Y+6	; 0x06
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	9e 83       	std	Y+6, r25	; 0x06
    14ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	9e 81       	ldd	r25, Y+6	; 0x06
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	69 f7       	brne	.-38     	; 0x1492 <HLCD_enuInit+0x376>
    14b8:	14 c0       	rjmp	.+40     	; 0x14e2 <HLCD_enuInit+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ba:	6f 81       	ldd	r22, Y+7	; 0x07
    14bc:	78 85       	ldd	r23, Y+8	; 0x08
    14be:	89 85       	ldd	r24, Y+9	; 0x09
    14c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	9e 83       	std	Y+6, r25	; 0x06
    14cc:	8d 83       	std	Y+5, r24	; 0x05
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	9a 83       	std	Y+2, r25	; 0x02
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <HLCD_enuInit+0x3be>
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	89 83       	std	Y+1, r24	; 0x01

/*
	#elif HLCD_INIT_MODE == HLCD_4_BIT_MODE
*/

}
    14e2:	e8 96       	adiw	r28, 0x38	; 56
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <HLCD_VoidWriteStr>:
 *
 *		This function write the whole string in the LCD
 *
 **********************************************************************/
void HLCD_VoidWriteStr(u8 * pu8str)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <HLCD_VoidWriteStr+0x6>
    14fa:	0f 92       	push	r0
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	9b 83       	std	Y+3, r25	; 0x03
    1502:	8a 83       	std	Y+2, r24	; 0x02
	/*Null terminator is very important that helps me a lot*/
	u8 i = 0;
    1504:	19 82       	std	Y+1, r1	; 0x01
    1506:	0e c0       	rjmp	.+28     	; 0x1524 <HLCD_VoidWriteStr+0x30>
	/*			Here we loop till the null terminator				*/
	while(pu8str[i] != 0)
	{
		/*Send the character to the LCD in each iteration till the end*/
		HLCD_VoidSendChar(pu8str[i]);
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	9b 81       	ldd	r25, Y+3	; 0x03
    1512:	fc 01       	movw	r30, r24
    1514:	e2 0f       	add	r30, r18
    1516:	f3 1f       	adc	r31, r19
    1518:	80 81       	ld	r24, Z
    151a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <HLCD_VoidSendChar>
		i++;
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	8f 5f       	subi	r24, 0xFF	; 255
    1522:	89 83       	std	Y+1, r24	; 0x01
void HLCD_VoidWriteStr(u8 * pu8str)
{
	/*Null terminator is very important that helps me a lot*/
	u8 i = 0;
	/*			Here we loop till the null terminator				*/
	while(pu8str[i] != 0)
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	9b 81       	ldd	r25, Y+3	; 0x03
    152e:	fc 01       	movw	r30, r24
    1530:	e2 0f       	add	r30, r18
    1532:	f3 1f       	adc	r31, r19
    1534:	80 81       	ld	r24, Z
    1536:	88 23       	and	r24, r24
    1538:	39 f7       	brne	.-50     	; 0x1508 <HLCD_VoidWriteStr+0x14>
		/*Send the character to the LCD in each iteration till the end*/
		HLCD_VoidSendChar(pu8str[i]);
		i++;
	}

}
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <HLCD_GoToXY>:
 *
 * Function to go to special position of the col
 *
 *********************************************************************/
void HLCD_GoToXY(u8 x,s8 y)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	00 d0       	rcall	.+0      	; 0x154c <HLCD_GoToXY+0x6>
    154c:	00 d0       	rcall	.+0      	; 0x154e <HLCD_GoToXY+0x8>
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	6a 83       	std	Y+2, r22	; 0x02
	/*			here we check the x if it's 1 or 2					*/
	switch(x)
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	3c 83       	std	Y+4, r19	; 0x04
    155e:	2b 83       	std	Y+3, r18	; 0x03
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	9c 81       	ldd	r25, Y+4	; 0x04
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	91 05       	cpc	r25, r1
    1568:	31 f0       	breq	.+12     	; 0x1576 <HLCD_GoToXY+0x30>
    156a:	2b 81       	ldd	r18, Y+3	; 0x03
    156c:	3c 81       	ldd	r19, Y+4	; 0x04
    156e:	22 30       	cpi	r18, 0x02	; 2
    1570:	31 05       	cpc	r19, r1
    1572:	31 f0       	breq	.+12     	; 0x1580 <HLCD_GoToXY+0x3a>
    1574:	09 c0       	rjmp	.+18     	; 0x1588 <HLCD_GoToXY+0x42>
	{
		/* 		0x80 === 127 decimal		*/
		case 1: HLCD_VoidSendCommand(y + 127); break;
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	81 58       	subi	r24, 0x81	; 129
    157a:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
    157e:	04 c0       	rjmp	.+8      	; 0x1588 <HLCD_GoToXY+0x42>
		/* 		0xBF === 191 decimal		*/
		case 2: HLCD_VoidSendCommand(y + 191); break;
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	81 54       	subi	r24, 0x41	; 65
    1584:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	}
}
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <HLCD_SendNumber>:
 *
 * This function send an int number to the LCD
 *
 ********************************************************************/
void HLCD_SendNumber(u32 Number)
{
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	2c 97       	sbiw	r28, 0x0c	; 12
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	69 87       	std	Y+9, r22	; 0x09
    15b4:	7a 87       	std	Y+10, r23	; 0x0a
    15b6:	8b 87       	std	Y+11, r24	; 0x0b
    15b8:	9c 87       	std	Y+12, r25	; 0x0c
	if(Number == 0)
    15ba:	89 85       	ldd	r24, Y+9	; 0x09
    15bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15be:	ab 85       	ldd	r26, Y+11	; 0x0b
    15c0:	bc 85       	ldd	r27, Y+12	; 0x0c
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	a1 05       	cpc	r26, r1
    15c6:	b1 05       	cpc	r27, r1
    15c8:	09 f4       	brne	.+2      	; 0x15cc <HLCD_SendNumber+0x36>
    15ca:	79 c0       	rjmp	.+242    	; 0x16be <HLCD_SendNumber+0x128>
		/*					Here Print the zero						*/
	}
	else
	{
		/*			Looping if the number is positive only 			*/
		u32 reverse = 1;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a0 e0       	ldi	r26, 0x00	; 0
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	8d 83       	std	Y+5, r24	; 0x05
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	af 83       	std	Y+7, r26	; 0x07
    15da:	b8 87       	std	Y+8, r27	; 0x08
    15dc:	36 c0       	rjmp	.+108    	; 0x164a <HLCD_SendNumber+0xb4>
		while(Number > 0)
		{
			/*	Here we reverse the number to display it on screen	*/
			reverse = (reverse * 10) + (Number  % 10);
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	af 81       	ldd	r26, Y+7	; 0x07
    15e4:	b8 85       	ldd	r27, Y+8	; 0x08
    15e6:	2a e0       	ldi	r18, 0x0A	; 10
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e0       	ldi	r20, 0x00	; 0
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__mulsi3>
    15f6:	7b 01       	movw	r14, r22
    15f8:	8c 01       	movw	r16, r24
    15fa:	89 85       	ldd	r24, Y+9	; 0x09
    15fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fe:	ab 85       	ldd	r26, Y+11	; 0x0b
    1600:	bc 85       	ldd	r27, Y+12	; 0x0c
    1602:	2a e0       	ldi	r18, 0x0A	; 10
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__udivmodsi4>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	8e 0d       	add	r24, r14
    1618:	9f 1d       	adc	r25, r15
    161a:	a0 1f       	adc	r26, r16
    161c:	b1 1f       	adc	r27, r17
    161e:	8d 83       	std	Y+5, r24	; 0x05
    1620:	9e 83       	std	Y+6, r25	; 0x06
    1622:	af 83       	std	Y+7, r26	; 0x07
    1624:	b8 87       	std	Y+8, r27	; 0x08
			Number = Number / 10;
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	9a 85       	ldd	r25, Y+10	; 0x0a
    162a:	ab 85       	ldd	r26, Y+11	; 0x0b
    162c:	bc 85       	ldd	r27, Y+12	; 0x0c
    162e:	2a e0       	ldi	r18, 0x0A	; 10
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__udivmodsi4>
    163e:	da 01       	movw	r26, r20
    1640:	c9 01       	movw	r24, r18
    1642:	89 87       	std	Y+9, r24	; 0x09
    1644:	9a 87       	std	Y+10, r25	; 0x0a
    1646:	ab 87       	std	Y+11, r26	; 0x0b
    1648:	bc 87       	std	Y+12, r27	; 0x0c
	}
	else
	{
		/*			Looping if the number is positive only 			*/
		u32 reverse = 1;
		while(Number > 0)
    164a:	89 85       	ldd	r24, Y+9	; 0x09
    164c:	9a 85       	ldd	r25, Y+10	; 0x0a
    164e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1650:	bc 85       	ldd	r27, Y+12	; 0x0c
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	a1 05       	cpc	r26, r1
    1656:	b1 05       	cpc	r27, r1
    1658:	11 f6       	brne	.-124    	; 0x15de <HLCD_SendNumber+0x48>
    165a:	28 c0       	rjmp	.+80     	; 0x16ac <HLCD_SendNumber+0x116>
		}
		/*		Check if the reverse number is bigger than 1 or not */
		while(reverse > 1)
		{
			u32 remainder;
			remainder = reverse % 10;
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	9e 81       	ldd	r25, Y+6	; 0x06
    1660:	af 81       	ldd	r26, Y+7	; 0x07
    1662:	b8 85       	ldd	r27, Y+8	; 0x08
    1664:	2a e0       	ldi	r18, 0x0A	; 10
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__udivmodsi4>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	9a 83       	std	Y+2, r25	; 0x02
    167c:	ab 83       	std	Y+3, r26	; 0x03
    167e:	bc 83       	std	Y+4, r27	; 0x04
			/*		Send the number to the LCD as a character		*/
			HLCD_VoidSendChar(remainder + 48);
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	80 5d       	subi	r24, 0xD0	; 208
    1684:	0e 94 6e 06 	call	0xcdc	; 0xcdc <HLCD_VoidSendChar>
			reverse = reverse / 10;
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	af 81       	ldd	r26, Y+7	; 0x07
    168e:	b8 85       	ldd	r27, Y+8	; 0x08
    1690:	2a e0       	ldi	r18, 0x0A	; 10
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__udivmodsi4>
    16a0:	da 01       	movw	r26, r20
    16a2:	c9 01       	movw	r24, r18
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	af 83       	std	Y+7, r26	; 0x07
    16aa:	b8 87       	std	Y+8, r27	; 0x08
			/*	Here we reverse the number to display it on screen	*/
			reverse = (reverse * 10) + (Number  % 10);
			Number = Number / 10;
		}
		/*		Check if the reverse number is bigger than 1 or not */
		while(reverse > 1)
    16ac:	8d 81       	ldd	r24, Y+5	; 0x05
    16ae:	9e 81       	ldd	r25, Y+6	; 0x06
    16b0:	af 81       	ldd	r26, Y+7	; 0x07
    16b2:	b8 85       	ldd	r27, Y+8	; 0x08
    16b4:	82 30       	cpi	r24, 0x02	; 2
    16b6:	91 05       	cpc	r25, r1
    16b8:	a1 05       	cpc	r26, r1
    16ba:	b1 05       	cpc	r27, r1
    16bc:	78 f6       	brcc	.-98     	; 0x165c <HLCD_SendNumber+0xc6>
			/*		Send the number to the LCD as a character		*/
			HLCD_VoidSendChar(remainder + 48);
			reverse = reverse / 10;
		}
	}
}
    16be:	2c 96       	adiw	r28, 0x0c	; 12
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	1f 91       	pop	r17
    16d0:	0f 91       	pop	r16
    16d2:	ff 90       	pop	r15
    16d4:	ef 90       	pop	r14
    16d6:	08 95       	ret

000016d8 <HLCD_SendFloatNumber>:
 *
 * 		This function send an float number to the LCD
 *
 *************************************************************/
void HLCD_SendFloatNumber(u32 Number)
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	00 d0       	rcall	.+0      	; 0x16de <HLCD_SendFloatNumber+0x6>
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <HLCD_SendFloatNumber+0x8>
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	69 83       	std	Y+1, r22	; 0x01
    16e6:	7a 83       	std	Y+2, r23	; 0x02
    16e8:	8b 83       	std	Y+3, r24	; 0x03
    16ea:	9c 83       	std	Y+4, r25	; 0x04

}
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <HLCD_DrawCharacterE>:
 *
 * This function Draw shape E without the left
 *
 *************************************************************/
void HLCD_DrawCharacterE(void)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
	HLCD_GoToXY(0,0);
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	0e 94 a3 0a 	call	0x1546	; 0x1546 <HLCD_GoToXY>
	HLCD_VoidSendCommand(0b01000000);
    170a:	80 e4       	ldi	r24, 0x40	; 64
    170c:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    1710:	8e e0       	ldi	r24, 0x0E	; 14
    1712:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01010);
    1716:	8a e0       	ldi	r24, 0x0A	; 10
    1718:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    171c:	8e e0       	ldi	r24, 0x0E	; 14
    171e:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00010);
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00010);
    1728:	82 e0       	ldi	r24, 0x02	; 2
    172a:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    172e:	8e e0       	ldi	r24, 0x0E	; 14
    1730:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00000);
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00000);
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0);
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	0e 94 6e 06 	call	0xcdc	; 0xcdc <HLCD_VoidSendChar>

}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <HLCD_ClearDisplay>:
 *
 * 		This function clear all the characters on the screen
 *
 * ***********************************************************/
void HLCD_ClearDisplay(void)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
	HLCD_VoidSendCommand(1);
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
}
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <HLCD_DrawCharacterF>:
 *
 * This function print F character on the screen
 *
 ************************************************************/
void HLCD_DrawCharacterF(void)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
	HLCD_GoToXY(0,3);
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	63 e0       	ldi	r22, 0x03	; 3
    176c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <HLCD_GoToXY>
	HLCD_VoidSendCommand(0b01000011);
    1770:	83 e4       	ldi	r24, 0x43	; 67
    1772:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00110);
    1776:	86 e0       	ldi	r24, 0x06	; 6
    1778:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    177c:	84 e0       	ldi	r24, 0x04	; 4
    177e:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    1782:	8e e0       	ldi	r24, 0x0E	; 14
    1784:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    1788:	84 e0       	ldi	r24, 0x04	; 4
    178a:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    178e:	84 e0       	ldi	r24, 0x04	; 4
    1790:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    1794:	84 e0       	ldi	r24, 0x04	; 4
    1796:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    179a:	84 e0       	ldi	r24, 0x04	; 4
    179c:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    17a0:	84 e0       	ldi	r24, 0x04	; 4
    17a2:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0);
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <HLCD_VoidSendChar>
}
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <HLCD_DrawHuman>:
 *
 * This function draw a human
 *
 ***********************************************************/
void HLCD_DrawHuman(void)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
	HLCD_VoidSendCommand(0b01000010);
    17ba:	82 e4       	ldi	r24, 0x42	; 66
    17bc:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_GoToXY(1,5);
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	65 e0       	ldi	r22, 0x05	; 5
    17c4:	0e 94 a3 0a 	call	0x1546	; 0x1546 <HLCD_GoToXY>
	HLCD_VoidSendCommand(0b00100);
    17c8:	84 e0       	ldi	r24, 0x04	; 4
    17ca:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01010);
    17ce:	8a e0       	ldi	r24, 0x0A	; 10
    17d0:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    17d4:	8e e0       	ldi	r24, 0x0E	; 14
    17d6:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    17da:	84 e0       	ldi	r24, 0x04	; 4
    17dc:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    17e0:	8e e0       	ldi	r24, 0x0E	; 14
    17e2:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b10101);
    17e6:	85 e1       	ldi	r24, 0x15	; 21
    17e8:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    17ec:	84 e0       	ldi	r24, 0x04	; 4
    17ee:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    17f2:	84 e0       	ldi	r24, 0x04	; 4
    17f4:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0);
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	0e 94 6e 06 	call	0xcdc	; 0xcdc <HLCD_VoidSendChar>
}
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <HLCD_S32Private_GetPower>:
 *
 * 		This is a private function that get the power of a number
 *
 ****************************************************************************/
s32 HLCD_S32Private_GetPower(u8 Copy_u8BaseNumber, u8 Copy_PowerNumber)
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	28 97       	sbiw	r28, 0x08	; 8
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	8b 83       	std	Y+3, r24	; 0x03
    181a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Copy_u8Counter = Copy_PowerNumber;
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Copy_u8NumberAfterPower = 0;
    1820:	19 82       	std	Y+1, r1	; 0x01
    1822:	09 c0       	rjmp	.+18     	; 0x1836 <HLCD_S32Private_GetPower+0x32>
	while(Copy_u8Counter != 0)
	{
		Copy_u8NumberAfterPower = Copy_u8BaseNumber * Copy_u8BaseNumber;
    1824:	9b 81       	ldd	r25, Y+3	; 0x03
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	98 9f       	mul	r25, r24
    182a:	80 2d       	mov	r24, r0
    182c:	11 24       	eor	r1, r1
    182e:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8Counter--;
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	81 50       	subi	r24, 0x01	; 1
    1834:	8a 83       	std	Y+2, r24	; 0x02
 ****************************************************************************/
s32 HLCD_S32Private_GetPower(u8 Copy_u8BaseNumber, u8 Copy_PowerNumber)
{
	u8 Copy_u8Counter = Copy_PowerNumber;
	u8 Copy_u8NumberAfterPower = 0;
	while(Copy_u8Counter != 0)
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	88 23       	and	r24, r24
    183a:	a1 f7       	brne	.-24     	; 0x1824 <HLCD_S32Private_GetPower+0x20>
	{
		Copy_u8NumberAfterPower = Copy_u8BaseNumber * Copy_u8BaseNumber;
		Copy_u8Counter--;
	}
}
    183c:	28 96       	adiw	r28, 0x08	; 8
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <HLCD_StoreCustomCharacter>:
 *
 * 		This function stores a custom pattern passed by an array
 *
 ***************************************************************************/
void HLCD_StoreCustomCharacter(u8 Copy_char_Index, u8 * Copy_Pattern)
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	00 d0       	rcall	.+0      	; 0x1854 <HLCD_StoreCustomCharacter+0x6>
    1854:	00 d0       	rcall	.+0      	; 0x1856 <HLCD_StoreCustomCharacter+0x8>
    1856:	0f 92       	push	r0
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	8b 83       	std	Y+3, r24	; 0x03
    185e:	7d 83       	std	Y+5, r23	; 0x05
    1860:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_CGRAMAdd = Copy_char_Index * 8;
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	8a 83       	std	Y+2, r24	; 0x02
	/*			Set CGRAM address										*/
	HLCD_VoidSendCommand(0b01000000 + Local_CGRAMAdd);
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	80 5c       	subi	r24, 0xC0	; 192
    187a:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
	/*			put the pattern in CGRAM								*/
	for(u8 Local_Counter = 0; Local_Counter < 8; Local_Counter++)
    187e:	19 82       	std	Y+1, r1	; 0x01
    1880:	0e c0       	rjmp	.+28     	; 0x189e <HLCD_StoreCustomCharacter+0x50>
	{
		HLCD_VoidSendChar(Copy_Pattern[Local_Counter]);
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	8c 81       	ldd	r24, Y+4	; 0x04
    188a:	9d 81       	ldd	r25, Y+5	; 0x05
    188c:	fc 01       	movw	r30, r24
    188e:	e2 0f       	add	r30, r18
    1890:	f3 1f       	adc	r31, r19
    1892:	80 81       	ld	r24, Z
    1894:	0e 94 6e 06 	call	0xcdc	; 0xcdc <HLCD_VoidSendChar>
{
	u8 Local_CGRAMAdd = Copy_char_Index * 8;
	/*			Set CGRAM address										*/
	HLCD_VoidSendCommand(0b01000000 + Local_CGRAMAdd);
	/*			put the pattern in CGRAM								*/
	for(u8 Local_Counter = 0; Local_Counter < 8; Local_Counter++)
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	8f 5f       	subi	r24, 0xFF	; 255
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	88 30       	cpi	r24, 0x08	; 8
    18a2:	78 f3       	brcs	.-34     	; 0x1882 <HLCD_StoreCustomCharacter+0x34>
	{
		HLCD_VoidSendChar(Copy_Pattern[Local_Counter]);
	}
}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <HLCD_ShiftDisplayLeft>:
 *
 * 		This Function Shift the display to the left
 *
 ***************************************************************************/
void HLCD_ShiftDisplayLeft()
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	2e 97       	sbiw	r28, 0x0e	; 14
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
	HLCD_VoidSendCommand(0b000110);
    18c8:	86 e0       	ldi	r24, 0x06	; 6
    18ca:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	a0 e0       	ldi	r26, 0x00	; 0
    18d4:	b0 e4       	ldi	r27, 0x40	; 64
    18d6:	8b 87       	std	Y+11, r24	; 0x0b
    18d8:	9c 87       	std	Y+12, r25	; 0x0c
    18da:	ad 87       	std	Y+13, r26	; 0x0d
    18dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18de:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	4a ef       	ldi	r20, 0xFA	; 250
    18ec:	54 e4       	ldi	r21, 0x44	; 68
    18ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	8f 83       	std	Y+7, r24	; 0x07
    18f8:	98 87       	std	Y+8, r25	; 0x08
    18fa:	a9 87       	std	Y+9, r26	; 0x09
    18fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1900:	78 85       	ldd	r23, Y+8	; 0x08
    1902:	89 85       	ldd	r24, Y+9	; 0x09
    1904:	9a 85       	ldd	r25, Y+10	; 0x0a
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e8       	ldi	r20, 0x80	; 128
    190c:	5f e3       	ldi	r21, 0x3F	; 63
    190e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1912:	88 23       	and	r24, r24
    1914:	2c f4       	brge	.+10     	; 0x1920 <HLCD_ShiftDisplayLeft+0x6c>
		__ticks = 1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9e 83       	std	Y+6, r25	; 0x06
    191c:	8d 83       	std	Y+5, r24	; 0x05
    191e:	3f c0       	rjmp	.+126    	; 0x199e <HLCD_ShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    1920:	6f 81       	ldd	r22, Y+7	; 0x07
    1922:	78 85       	ldd	r23, Y+8	; 0x08
    1924:	89 85       	ldd	r24, Y+9	; 0x09
    1926:	9a 85       	ldd	r25, Y+10	; 0x0a
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	3f ef       	ldi	r19, 0xFF	; 255
    192c:	4f e7       	ldi	r20, 0x7F	; 127
    192e:	57 e4       	ldi	r21, 0x47	; 71
    1930:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1934:	18 16       	cp	r1, r24
    1936:	4c f5       	brge	.+82     	; 0x198a <HLCD_ShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1938:	6b 85       	ldd	r22, Y+11	; 0x0b
    193a:	7c 85       	ldd	r23, Y+12	; 0x0c
    193c:	8d 85       	ldd	r24, Y+13	; 0x0d
    193e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e2       	ldi	r20, 0x20	; 32
    1946:	51 e4       	ldi	r21, 0x41	; 65
    1948:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	bc 01       	movw	r22, r24
    1952:	cd 01       	movw	r24, r26
    1954:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	9e 83       	std	Y+6, r25	; 0x06
    195e:	8d 83       	std	Y+5, r24	; 0x05
    1960:	0f c0       	rjmp	.+30     	; 0x1980 <HLCD_ShiftDisplayLeft+0xcc>
    1962:	88 ec       	ldi	r24, 0xC8	; 200
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	9c 83       	std	Y+4, r25	; 0x04
    1968:	8b 83       	std	Y+3, r24	; 0x03
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	9c 81       	ldd	r25, Y+4	; 0x04
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <HLCD_ShiftDisplayLeft+0xba>
    1972:	9c 83       	std	Y+4, r25	; 0x04
    1974:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1976:	8d 81       	ldd	r24, Y+5	; 0x05
    1978:	9e 81       	ldd	r25, Y+6	; 0x06
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	9e 83       	std	Y+6, r25	; 0x06
    197e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1980:	8d 81       	ldd	r24, Y+5	; 0x05
    1982:	9e 81       	ldd	r25, Y+6	; 0x06
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	69 f7       	brne	.-38     	; 0x1962 <HLCD_ShiftDisplayLeft+0xae>
    1988:	14 c0       	rjmp	.+40     	; 0x19b2 <HLCD_ShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198a:	6f 81       	ldd	r22, Y+7	; 0x07
    198c:	78 85       	ldd	r23, Y+8	; 0x08
    198e:	89 85       	ldd	r24, Y+9	; 0x09
    1990:	9a 85       	ldd	r25, Y+10	; 0x0a
    1992:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	9e 83       	std	Y+6, r25	; 0x06
    199c:	8d 83       	std	Y+5, r24	; 0x05
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	9a 83       	std	Y+2, r25	; 0x02
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <HLCD_ShiftDisplayLeft+0xf6>
    19ae:	9a 83       	std	Y+2, r25	; 0x02
    19b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    19b2:	2e 96       	adiw	r28, 0x0e	; 14
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <HLCD_ShiftDisplayRight>:
 *
 * 		This Function Shift the display to the right
 *
 **************************************************************************/
void HLCD_ShiftDisplayRight()
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	2e 97       	sbiw	r28, 0x0e	; 14
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
	HLCD_VoidSendCommand(0b000111);
    19d8:	87 e0       	ldi	r24, 0x07	; 7
    19da:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	a0 e0       	ldi	r26, 0x00	; 0
    19e4:	b0 e4       	ldi	r27, 0x40	; 64
    19e6:	8b 87       	std	Y+11, r24	; 0x0b
    19e8:	9c 87       	std	Y+12, r25	; 0x0c
    19ea:	ad 87       	std	Y+13, r26	; 0x0d
    19ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	4a ef       	ldi	r20, 0xFA	; 250
    19fc:	54 e4       	ldi	r21, 0x44	; 68
    19fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	8f 83       	std	Y+7, r24	; 0x07
    1a08:	98 87       	std	Y+8, r25	; 0x08
    1a0a:	a9 87       	std	Y+9, r26	; 0x09
    1a0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a10:	78 85       	ldd	r23, Y+8	; 0x08
    1a12:	89 85       	ldd	r24, Y+9	; 0x09
    1a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e8       	ldi	r20, 0x80	; 128
    1a1c:	5f e3       	ldi	r21, 0x3F	; 63
    1a1e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a22:	88 23       	and	r24, r24
    1a24:	2c f4       	brge	.+10     	; 0x1a30 <HLCD_ShiftDisplayRight+0x6c>
		__ticks = 1;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9e 83       	std	Y+6, r25	; 0x06
    1a2c:	8d 83       	std	Y+5, r24	; 0x05
    1a2e:	3f c0       	rjmp	.+126    	; 0x1aae <HLCD_ShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    1a30:	6f 81       	ldd	r22, Y+7	; 0x07
    1a32:	78 85       	ldd	r23, Y+8	; 0x08
    1a34:	89 85       	ldd	r24, Y+9	; 0x09
    1a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	3f ef       	ldi	r19, 0xFF	; 255
    1a3c:	4f e7       	ldi	r20, 0x7F	; 127
    1a3e:	57 e4       	ldi	r21, 0x47	; 71
    1a40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a44:	18 16       	cp	r1, r24
    1a46:	4c f5       	brge	.+82     	; 0x1a9a <HLCD_ShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e2       	ldi	r20, 0x20	; 32
    1a56:	51 e4       	ldi	r21, 0x41	; 65
    1a58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	9e 83       	std	Y+6, r25	; 0x06
    1a6e:	8d 83       	std	Y+5, r24	; 0x05
    1a70:	0f c0       	rjmp	.+30     	; 0x1a90 <HLCD_ShiftDisplayRight+0xcc>
    1a72:	88 ec       	ldi	r24, 0xC8	; 200
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9c 83       	std	Y+4, r25	; 0x04
    1a78:	8b 83       	std	Y+3, r24	; 0x03
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <HLCD_ShiftDisplayRight+0xba>
    1a82:	9c 83       	std	Y+4, r25	; 0x04
    1a84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a86:	8d 81       	ldd	r24, Y+5	; 0x05
    1a88:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	9e 83       	std	Y+6, r25	; 0x06
    1a8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a90:	8d 81       	ldd	r24, Y+5	; 0x05
    1a92:	9e 81       	ldd	r25, Y+6	; 0x06
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	69 f7       	brne	.-38     	; 0x1a72 <HLCD_ShiftDisplayRight+0xae>
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <HLCD_ShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9c:	78 85       	ldd	r23, Y+8	; 0x08
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	9e 83       	std	Y+6, r25	; 0x06
    1aac:	8d 83       	std	Y+5, r24	; 0x05
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	9a 83       	std	Y+2, r25	; 0x02
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <HLCD_ShiftDisplayRight+0xf6>
    1abe:	9a 83       	std	Y+2, r25	; 0x02
    1ac0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1ac2:	2e 96       	adiw	r28, 0x0e	; 14
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <HLCD_ShiftCursorLeft>:
 *
 * 		This function shift the cursor to the left
 *
 * **************************************************/
void HLCD_ShiftCursorLeft(void)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	2e 97       	sbiw	r28, 0x0e	; 14
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
	HLCD_VoidSendCommand(0b000100);
    1ae8:	84 e0       	ldi	r24, 0x04	; 4
    1aea:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a0 e0       	ldi	r26, 0x00	; 0
    1af4:	b0 e4       	ldi	r27, 0x40	; 64
    1af6:	8b 87       	std	Y+11, r24	; 0x0b
    1af8:	9c 87       	std	Y+12, r25	; 0x0c
    1afa:	ad 87       	std	Y+13, r26	; 0x0d
    1afc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	4a ef       	ldi	r20, 0xFA	; 250
    1b0c:	54 e4       	ldi	r21, 0x44	; 68
    1b0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	8f 83       	std	Y+7, r24	; 0x07
    1b18:	98 87       	std	Y+8, r25	; 0x08
    1b1a:	a9 87       	std	Y+9, r26	; 0x09
    1b1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b20:	78 85       	ldd	r23, Y+8	; 0x08
    1b22:	89 85       	ldd	r24, Y+9	; 0x09
    1b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <HLCD_ShiftCursorLeft+0x6c>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
    1b3e:	3f c0       	rjmp	.+126    	; 0x1bbe <HLCD_ShiftCursorLeft+0xea>
	else if (__tmp > 65535)
    1b40:	6f 81       	ldd	r22, Y+7	; 0x07
    1b42:	78 85       	ldd	r23, Y+8	; 0x08
    1b44:	89 85       	ldd	r24, Y+9	; 0x09
    1b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	3f ef       	ldi	r19, 0xFF	; 255
    1b4c:	4f e7       	ldi	r20, 0x7F	; 127
    1b4e:	57 e4       	ldi	r21, 0x47	; 71
    1b50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	4c f5       	brge	.+82     	; 0x1baa <HLCD_ShiftCursorLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	51 e4       	ldi	r21, 0x41	; 65
    1b68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <HLCD_ShiftCursorLeft+0xcc>
    1b82:	88 ec       	ldi	r24, 0xC8	; 200
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9c 83       	std	Y+4, r25	; 0x04
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <HLCD_ShiftCursorLeft+0xba>
    1b92:	9c 83       	std	Y+4, r25	; 0x04
    1b94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b96:	8d 81       	ldd	r24, Y+5	; 0x05
    1b98:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	69 f7       	brne	.-38     	; 0x1b82 <HLCD_ShiftCursorLeft+0xae>
    1ba8:	14 c0       	rjmp	.+40     	; 0x1bd2 <HLCD_ShiftCursorLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1baa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bac:	78 85       	ldd	r23, Y+8	; 0x08
    1bae:	89 85       	ldd	r24, Y+9	; 0x09
    1bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <HLCD_ShiftCursorLeft+0xf6>
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1bd2:	2e 96       	adiw	r28, 0x0e	; 14
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <HLCD_ShiftCursorRight>:
 *
 * 		This function shift the cursor to the right
 *
 * **************************************************/
void HLCD_ShiftCursorRight(void)
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	2e 97       	sbiw	r28, 0x0e	; 14
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
	HLCD_VoidSendCommand(0b000101);
    1bf8:	85 e0       	ldi	r24, 0x05	; 5
    1bfa:	0e 94 7e 07 	call	0xefc	; 0xefc <HLCD_VoidSendCommand>
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	a0 e0       	ldi	r26, 0x00	; 0
    1c04:	b0 e4       	ldi	r27, 0x40	; 64
    1c06:	8b 87       	std	Y+11, r24	; 0x0b
    1c08:	9c 87       	std	Y+12, r25	; 0x0c
    1c0a:	ad 87       	std	Y+13, r26	; 0x0d
    1c0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4a ef       	ldi	r20, 0xFA	; 250
    1c1c:	54 e4       	ldi	r21, 0x44	; 68
    1c1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	8f 83       	std	Y+7, r24	; 0x07
    1c28:	98 87       	std	Y+8, r25	; 0x08
    1c2a:	a9 87       	std	Y+9, r26	; 0x09
    1c2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c30:	78 85       	ldd	r23, Y+8	; 0x08
    1c32:	89 85       	ldd	r24, Y+9	; 0x09
    1c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e8       	ldi	r20, 0x80	; 128
    1c3c:	5f e3       	ldi	r21, 0x3F	; 63
    1c3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c42:	88 23       	and	r24, r24
    1c44:	2c f4       	brge	.+10     	; 0x1c50 <HLCD_ShiftCursorRight+0x6c>
		__ticks = 1;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	3f c0       	rjmp	.+126    	; 0x1cce <HLCD_ShiftCursorRight+0xea>
	else if (__tmp > 65535)
    1c50:	6f 81       	ldd	r22, Y+7	; 0x07
    1c52:	78 85       	ldd	r23, Y+8	; 0x08
    1c54:	89 85       	ldd	r24, Y+9	; 0x09
    1c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	3f ef       	ldi	r19, 0xFF	; 255
    1c5c:	4f e7       	ldi	r20, 0x7F	; 127
    1c5e:	57 e4       	ldi	r21, 0x47	; 71
    1c60:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c64:	18 16       	cp	r1, r24
    1c66:	4c f5       	brge	.+82     	; 0x1cba <HLCD_ShiftCursorRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e2       	ldi	r20, 0x20	; 32
    1c76:	51 e4       	ldi	r21, 0x41	; 65
    1c78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	bc 01       	movw	r22, r24
    1c82:	cd 01       	movw	r24, r26
    1c84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9e 83       	std	Y+6, r25	; 0x06
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
    1c90:	0f c0       	rjmp	.+30     	; 0x1cb0 <HLCD_ShiftCursorRight+0xcc>
    1c92:	88 ec       	ldi	r24, 0xC8	; 200
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	9c 83       	std	Y+4, r25	; 0x04
    1c98:	8b 83       	std	Y+3, r24	; 0x03
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <HLCD_ShiftCursorRight+0xba>
    1ca2:	9c 83       	std	Y+4, r25	; 0x04
    1ca4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	9e 83       	std	Y+6, r25	; 0x06
    1cae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	69 f7       	brne	.-38     	; 0x1c92 <HLCD_ShiftCursorRight+0xae>
    1cb8:	14 c0       	rjmp	.+40     	; 0x1ce2 <HLCD_ShiftCursorRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cba:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbc:	78 85       	ldd	r23, Y+8	; 0x08
    1cbe:	89 85       	ldd	r24, Y+9	; 0x09
    1cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9e 83       	std	Y+6, r25	; 0x06
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	9a 83       	std	Y+2, r25	; 0x02
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <HLCD_ShiftCursorRight+0xf6>
    1cde:	9a 83       	std	Y+2, r25	; 0x02
    1ce0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1ce2:	2e 96       	adiw	r28, 0x0e	; 14
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <HLCD_WriteHexNumber>:
 *
 * 		This function write a number on the LCD as hex
 *
 ***************************************************** */
void HLCD_WriteHexNumber(u8 Number)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	c8 56       	subi	r28, 0x68	; 104
    1cfe:	d0 40       	sbci	r29, 0x00	; 0
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e8 59       	subi	r30, 0x98	; 152
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 83       	st	Z, r24
    /*				char array to store hexadecimal number				*/
    u8 Copy_u8HexaDeciNum[100];
    /*				counter for hexadecimal number array				*/
    u8 Copy_u8Counter = 0;
    1d12:	1b 82       	std	Y+3, r1	; 0x03
    1d14:	33 c0       	rjmp	.+102    	; 0x1d7c <HLCD_WriteHexNumber+0x88>
    while (Number != 0)
    {
        /*			temporary variable to store remainder				*/
        u8 Copy_u8tempVariable = 0;
    1d16:	1a 82       	std	Y+2, r1	; 0x02

        /*			storing remainder in Copy_u8tempVariable 			*/
        Copy_u8tempVariable = Number % 16;
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e8 59       	subi	r30, 0x98	; 152
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 81       	ld	r24, Z
    1d20:	8f 70       	andi	r24, 0x0F	; 15
    1d22:	8a 83       	std	Y+2, r24	; 0x02

        /*			check if Copy_u8tempVariable < 10					*/
        if (Copy_u8tempVariable < 10)
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	8a 30       	cpi	r24, 0x0A	; 10
    1d28:	80 f4       	brcc	.+32     	; 0x1d4a <HLCD_WriteHexNumber+0x56>
        {
            Copy_u8HexaDeciNum[Copy_u8Counter] = Copy_u8tempVariable + 48;
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	48 2f       	mov	r20, r24
    1d34:	40 5d       	subi	r20, 0xD0	; 208
    1d36:	ce 01       	movw	r24, r28
    1d38:	04 96       	adiw	r24, 0x04	; 4
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	e2 0f       	add	r30, r18
    1d3e:	f3 1f       	adc	r31, r19
    1d40:	40 83       	st	Z, r20
            Copy_u8Counter++;
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	8f 5f       	subi	r24, 0xFF	; 255
    1d46:	8b 83       	std	Y+3, r24	; 0x03
    1d48:	0f c0       	rjmp	.+30     	; 0x1d68 <HLCD_WriteHexNumber+0x74>
        }
        else
        {
        	Copy_u8HexaDeciNum[Copy_u8Counter] = Copy_u8tempVariable + 55;
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	48 2f       	mov	r20, r24
    1d54:	49 5c       	subi	r20, 0xC9	; 201
    1d56:	ce 01       	movw	r24, r28
    1d58:	04 96       	adiw	r24, 0x04	; 4
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	e2 0f       	add	r30, r18
    1d5e:	f3 1f       	adc	r31, r19
    1d60:	40 83       	st	Z, r20
        	Copy_u8Counter++;
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	8f 5f       	subi	r24, 0xFF	; 255
    1d66:	8b 83       	std	Y+3, r24	; 0x03
        }
        Number = Number / 16;
    1d68:	de 01       	movw	r26, r28
    1d6a:	a8 59       	subi	r26, 0x98	; 152
    1d6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e8 59       	subi	r30, 0x98	; 152
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 81       	ld	r24, Z
    1d76:	82 95       	swap	r24
    1d78:	8f 70       	andi	r24, 0x0F	; 15
    1d7a:	8c 93       	st	X, r24
{
    /*				char array to store hexadecimal number				*/
    u8 Copy_u8HexaDeciNum[100];
    /*				counter for hexadecimal number array				*/
    u8 Copy_u8Counter = 0;
    while (Number != 0)
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e8 59       	subi	r30, 0x98	; 152
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	80 81       	ld	r24, Z
    1d84:	88 23       	and	r24, r24
    1d86:	39 f6       	brne	.-114    	; 0x1d16 <HLCD_WriteHexNumber+0x22>
        	Copy_u8HexaDeciNum[Copy_u8Counter] = Copy_u8tempVariable + 55;
        	Copy_u8Counter++;
        }
        Number = Number / 16;
    }
    for (u8 Copy_u8Counterloop = Copy_u8Counter - 1; Copy_u8Counterloop >= 0; Copy_u8Counterloop--)
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	81 50       	subi	r24, 0x01	; 1
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    {
    	HLCD_SendNumber(Copy_u8HexaDeciNum[Copy_u8Counterloop]);
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	ce 01       	movw	r24, r28
    1d96:	04 96       	adiw	r24, 0x04	; 4
    1d98:	fc 01       	movw	r30, r24
    1d9a:	e2 0f       	add	r30, r18
    1d9c:	f3 1f       	adc	r31, r19
    1d9e:	80 81       	ld	r24, Z
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e0       	ldi	r26, 0x00	; 0
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	0e 94 cb 0a 	call	0x1596	; 0x1596 <HLCD_SendNumber>
        	Copy_u8HexaDeciNum[Copy_u8Counter] = Copy_u8tempVariable + 55;
        	Copy_u8Counter++;
        }
        Number = Number / 16;
    }
    for (u8 Copy_u8Counterloop = Copy_u8Counter - 1; Copy_u8Counterloop >= 0; Copy_u8Counterloop--)
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	81 50       	subi	r24, 0x01	; 1
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	eb cf       	rjmp	.-42     	; 0x1d8e <HLCD_WriteHexNumber+0x9a>

00001db8 <HLCD_WriteBinaryNumber>:
 *
 * 		This function Write a number in the LCD as a binary form
 *
 * ******************************************************************/
void HLCD_WriteBinaryNumber(u8 Number)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	c6 56       	subi	r28, 0x66	; 102
    1dc2:	d0 40       	sbci	r29, 0x00	; 0
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	fe 01       	movw	r30, r28
    1dd0:	ea 59       	subi	r30, 0x9A	; 154
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 83       	st	Z, r24
    /*				char array to store Binary number					*/
    u8 Copy_u8BinaryDeciNum[100];

    for(u8 Copy_u8Counter = 0; Number > 0; Copy_u8Counter++)
    1dd6:	19 82       	std	Y+1, r1	; 0x01
    1dd8:	2c c0       	rjmp	.+88     	; 0x1e32 <HLCD_WriteBinaryNumber+0x7a>
    {
    	/*			Getting the Mod of base 2 to convert into binary	*/
    	Copy_u8BinaryDeciNum[Copy_u8Counter] = Number % 2;
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	fe 01       	movw	r30, r28
    1de2:	ea 59       	subi	r30, 0x9A	; 154
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 81       	ld	r24, Z
    1de8:	48 2f       	mov	r20, r24
    1dea:	41 70       	andi	r20, 0x01	; 1
    1dec:	ce 01       	movw	r24, r28
    1dee:	02 96       	adiw	r24, 0x02	; 2
    1df0:	fc 01       	movw	r30, r24
    1df2:	e2 0f       	add	r30, r18
    1df4:	f3 1f       	adc	r31, r19
    1df6:	40 83       	st	Z, r20
    	Number = Number / 2;
    1df8:	de 01       	movw	r26, r28
    1dfa:	aa 59       	subi	r26, 0x9A	; 154
    1dfc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dfe:	fe 01       	movw	r30, r28
    1e00:	ea 59       	subi	r30, 0x9A	; 154
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	80 81       	ld	r24, Z
    1e06:	86 95       	lsr	r24
    1e08:	8c 93       	st	X, r24
    	/*			Sending the number to the LCD						*/
    	HLCD_SendNumber(Copy_u8BinaryDeciNum[Copy_u8Counter]);
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	ce 01       	movw	r24, r28
    1e12:	02 96       	adiw	r24, 0x02	; 2
    1e14:	fc 01       	movw	r30, r24
    1e16:	e2 0f       	add	r30, r18
    1e18:	f3 1f       	adc	r31, r19
    1e1a:	80 81       	ld	r24, Z
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a0 e0       	ldi	r26, 0x00	; 0
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 cb 0a 	call	0x1596	; 0x1596 <HLCD_SendNumber>
void HLCD_WriteBinaryNumber(u8 Number)
{
    /*				char array to store Binary number					*/
    u8 Copy_u8BinaryDeciNum[100];

    for(u8 Copy_u8Counter = 0; Number > 0; Copy_u8Counter++)
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	8f 5f       	subi	r24, 0xFF	; 255
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	fe 01       	movw	r30, r28
    1e34:	ea 59       	subi	r30, 0x9A	; 154
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	80 81       	ld	r24, Z
    1e3a:	88 23       	and	r24, r24
    1e3c:	71 f6       	brne	.-100    	; 0x1dda <HLCD_WriteBinaryNumber+0x22>
    	Copy_u8BinaryDeciNum[Copy_u8Counter] = Number % 2;
    	Number = Number / 2;
    	/*			Sending the number to the LCD						*/
    	HLCD_SendNumber(Copy_u8BinaryDeciNum[Copy_u8Counter]);
    }
}
    1e3e:	ca 59       	subi	r28, 0x9A	; 154
    1e40:	df 4f       	sbci	r29, 0xFF	; 255
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <HLCD_AnimateString>:
 * 			last character in the string start from the beginning
 * 			of the LCD
 *
 ***********************************************************************/
void HLCD_AnimateString(u8 * str)
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	60 97       	sbiw	r28, 0x10	; 16
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	98 8b       	std	Y+16, r25	; 0x10
    1e68:	8f 87       	std	Y+15, r24	; 0x0f
    1e6a:	93 c0       	rjmp	.+294    	; 0x1f92 <HLCD_AnimateString+0x140>
	static s8 Copy_iCounter = -1;
	/*			Looping on the string to make the animation on it		*/
	for(; Copy_iCounter <= 15; Copy_iCounter++)
	{
		/*		Set the cursor to the beginning							*/
		HLCD_GoToXY(1,Copy_iCounter);
    1e6c:	90 91 68 00 	lds	r25, 0x0068
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	69 2f       	mov	r22, r25
    1e74:	0e 94 a3 0a 	call	0x1546	; 0x1546 <HLCD_GoToXY>
		HLCD_VoidWriteStr(str);
    1e78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7a:	98 89       	ldd	r25, Y+16	; 0x10
    1e7c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <HLCD_VoidWriteStr>
		/*
		 * check if the counter bigger then the length of the
		 * 								character
		 *																*/
		if(Copy_iCounter > 10)
    1e80:	80 91 68 00 	lds	r24, 0x0068
    1e84:	8b 30       	cpi	r24, 0x0B	; 11
    1e86:	64 f0       	brlt	.+24     	; 0x1ea0 <HLCD_AnimateString+0x4e>
		{
			/*		Set the string from the first row and last column	*/
			HLCD_GoToXY(1, Copy_iCounter - 15);
    1e88:	80 91 68 00 	lds	r24, 0x0068
    1e8c:	8f 50       	subi	r24, 0x0F	; 15
    1e8e:	98 2f       	mov	r25, r24
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	69 2f       	mov	r22, r25
    1e94:	0e 94 a3 0a 	call	0x1546	; 0x1546 <HLCD_GoToXY>
			/*		Send the String to the LCD							*/
			HLCD_VoidWriteStr(str);
    1e98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e9a:	98 89       	ldd	r25, Y+16	; 0x10
    1e9c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <HLCD_VoidWriteStr>
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a8 e4       	ldi	r26, 0x48	; 72
    1ea6:	b3 e4       	ldi	r27, 0x43	; 67
    1ea8:	8b 87       	std	Y+11, r24	; 0x0b
    1eaa:	9c 87       	std	Y+12, r25	; 0x0c
    1eac:	ad 87       	std	Y+13, r26	; 0x0d
    1eae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4a ef       	ldi	r20, 0xFA	; 250
    1ebe:	54 e4       	ldi	r21, 0x44	; 68
    1ec0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	8f 83       	std	Y+7, r24	; 0x07
    1eca:	98 87       	std	Y+8, r25	; 0x08
    1ecc:	a9 87       	std	Y+9, r26	; 0x09
    1ece:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed2:	78 85       	ldd	r23, Y+8	; 0x08
    1ed4:	89 85       	ldd	r24, Y+9	; 0x09
    1ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ee4:	88 23       	and	r24, r24
    1ee6:	2c f4       	brge	.+10     	; 0x1ef2 <HLCD_AnimateString+0xa0>
		__ticks = 1;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
    1ef0:	3f c0       	rjmp	.+126    	; 0x1f70 <HLCD_AnimateString+0x11e>
	else if (__tmp > 65535)
    1ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef4:	78 85       	ldd	r23, Y+8	; 0x08
    1ef6:	89 85       	ldd	r24, Y+9	; 0x09
    1ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	3f ef       	ldi	r19, 0xFF	; 255
    1efe:	4f e7       	ldi	r20, 0x7F	; 127
    1f00:	57 e4       	ldi	r21, 0x47	; 71
    1f02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f06:	18 16       	cp	r1, r24
    1f08:	4c f5       	brge	.+82     	; 0x1f5c <HLCD_AnimateString+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e2       	ldi	r20, 0x20	; 32
    1f18:	51 e4       	ldi	r21, 0x41	; 65
    1f1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9e 83       	std	Y+6, r25	; 0x06
    1f30:	8d 83       	std	Y+5, r24	; 0x05
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <HLCD_AnimateString+0x100>
    1f34:	88 ec       	ldi	r24, 0xC8	; 200
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9c 83       	std	Y+4, r25	; 0x04
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <HLCD_AnimateString+0xee>
    1f44:	9c 83       	std	Y+4, r25	; 0x04
    1f46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	9e 83       	std	Y+6, r25	; 0x06
    1f50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f52:	8d 81       	ldd	r24, Y+5	; 0x05
    1f54:	9e 81       	ldd	r25, Y+6	; 0x06
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	69 f7       	brne	.-38     	; 0x1f34 <HLCD_AnimateString+0xe2>
    1f5a:	14 c0       	rjmp	.+40     	; 0x1f84 <HLCD_AnimateString+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5e:	78 85       	ldd	r23, Y+8	; 0x08
    1f60:	89 85       	ldd	r24, Y+9	; 0x09
    1f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9e 83       	std	Y+6, r25	; 0x06
    1f6e:	8d 83       	std	Y+5, r24	; 0x05
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	9a 83       	std	Y+2, r25	; 0x02
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <HLCD_AnimateString+0x12a>
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	89 83       	std	Y+1, r24	; 0x01
		}
		/*						Wait for 200ms 							*/
		_delay_ms(200);
		/*				Clear all the display							*/
		HLCD_ClearDisplay();
    1f84:	0e 94 a6 0b 	call	0x174c	; 0x174c <HLCD_ClearDisplay>
void HLCD_AnimateString(u8 * str)
{

	static s8 Copy_iCounter = -1;
	/*			Looping on the string to make the animation on it		*/
	for(; Copy_iCounter <= 15; Copy_iCounter++)
    1f88:	80 91 68 00 	lds	r24, 0x0068
    1f8c:	8f 5f       	subi	r24, 0xFF	; 255
    1f8e:	80 93 68 00 	sts	0x0068, r24
    1f92:	80 91 68 00 	lds	r24, 0x0068
    1f96:	80 31       	cpi	r24, 0x10	; 16
    1f98:	0c f4       	brge	.+2      	; 0x1f9c <HLCD_AnimateString+0x14a>
    1f9a:	68 cf       	rjmp	.-304    	; 0x1e6c <HLCD_AnimateString+0x1a>
		_delay_ms(200);
		/*				Clear all the display							*/
		HLCD_ClearDisplay();
	}
	/*				Start the counter from the beginning				*/
	Copy_iCounter = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	80 93 68 00 	sts	0x0068, r24
}
    1fa2:	60 96       	adiw	r28, 0x10	; 16
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <MDIO_VoidSetPinDirection>:
 *
 * 			Here we Set the Pin direction of the given port to 1 or 0
 *
 *************************************************************************/
void MDIO_VoidSetPinDirection(u8 Copy_u8Port ,u8 Copy_u8Pin, u8 Copy_u8Direc)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	27 97       	sbiw	r28, 0x07	; 7
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	6a 83       	std	Y+2, r22	; 0x02
    1fcc:	4b 83       	std	Y+3, r20	; 0x03
	/*check for pins here do it ur self*/
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	84 30       	cpi	r24, 0x04	; 4
    1fd2:	08 f0       	brcs	.+2      	; 0x1fd6 <MDIO_VoidSetPinDirection+0x22>
    1fd4:	ee c0       	rjmp	.+476    	; 0x21b2 <MDIO_VoidSetPinDirection+0x1fe>
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	88 30       	cpi	r24, 0x08	; 8
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <MDIO_VoidSetPinDirection+0x2a>
    1fdc:	ea c0       	rjmp	.+468    	; 0x21b2 <MDIO_VoidSetPinDirection+0x1fe>
	{
	/*check the direction*/
		if(DIO_OUTPUT == Copy_u8Direc)
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	8f 3f       	cpi	r24, 0xFF	; 255
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <MDIO_VoidSetPinDirection+0x32>
    1fe4:	6f c0       	rjmp	.+222    	; 0x20c4 <MDIO_VoidSetPinDirection+0x110>
		{
			switch(Copy_u8Port)
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	3f 83       	std	Y+7, r19	; 0x07
    1fee:	2e 83       	std	Y+6, r18	; 0x06
    1ff0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff4:	81 30       	cpi	r24, 0x01	; 1
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	49 f1       	breq	.+82     	; 0x204c <MDIO_VoidSetPinDirection+0x98>
    1ffa:	2e 81       	ldd	r18, Y+6	; 0x06
    1ffc:	3f 81       	ldd	r19, Y+7	; 0x07
    1ffe:	22 30       	cpi	r18, 0x02	; 2
    2000:	31 05       	cpc	r19, r1
    2002:	2c f4       	brge	.+10     	; 0x200e <MDIO_VoidSetPinDirection+0x5a>
    2004:	8e 81       	ldd	r24, Y+6	; 0x06
    2006:	9f 81       	ldd	r25, Y+7	; 0x07
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	61 f0       	breq	.+24     	; 0x2024 <MDIO_VoidSetPinDirection+0x70>
    200c:	d2 c0       	rjmp	.+420    	; 0x21b2 <MDIO_VoidSetPinDirection+0x1fe>
    200e:	2e 81       	ldd	r18, Y+6	; 0x06
    2010:	3f 81       	ldd	r19, Y+7	; 0x07
    2012:	22 30       	cpi	r18, 0x02	; 2
    2014:	31 05       	cpc	r19, r1
    2016:	71 f1       	breq	.+92     	; 0x2074 <MDIO_VoidSetPinDirection+0xc0>
    2018:	8e 81       	ldd	r24, Y+6	; 0x06
    201a:	9f 81       	ldd	r25, Y+7	; 0x07
    201c:	83 30       	cpi	r24, 0x03	; 3
    201e:	91 05       	cpc	r25, r1
    2020:	e9 f1       	breq	.+122    	; 0x209c <MDIO_VoidSetPinDirection+0xe8>
    2022:	c7 c0       	rjmp	.+398    	; 0x21b2 <MDIO_VoidSetPinDirection+0x1fe>
			{
				case DIO_PORTA:SET_BIT(DDRA_REG, Copy_u8Pin); break;
    2024:	aa e3       	ldi	r26, 0x3A	; 58
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	ea e3       	ldi	r30, 0x3A	; 58
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	48 2f       	mov	r20, r24
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	02 2e       	mov	r0, r18
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <MDIO_VoidSetPinDirection+0x8e>
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	0a 94       	dec	r0
    2044:	e2 f7       	brpl	.-8      	; 0x203e <MDIO_VoidSetPinDirection+0x8a>
    2046:	84 2b       	or	r24, r20
    2048:	8c 93       	st	X, r24
    204a:	b3 c0       	rjmp	.+358    	; 0x21b2 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTB:SET_BIT(DDRB_REG, Copy_u8Pin); break;
    204c:	a7 e3       	ldi	r26, 0x37	; 55
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e7 e3       	ldi	r30, 0x37	; 55
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	48 2f       	mov	r20, r24
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	02 2e       	mov	r0, r18
    2064:	02 c0       	rjmp	.+4      	; 0x206a <MDIO_VoidSetPinDirection+0xb6>
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	0a 94       	dec	r0
    206c:	e2 f7       	brpl	.-8      	; 0x2066 <MDIO_VoidSetPinDirection+0xb2>
    206e:	84 2b       	or	r24, r20
    2070:	8c 93       	st	X, r24
    2072:	9f c0       	rjmp	.+318    	; 0x21b2 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTC:SET_BIT(DDRC_REG, Copy_u8Pin); break;
    2074:	a4 e3       	ldi	r26, 0x34	; 52
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e4 e3       	ldi	r30, 0x34	; 52
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	48 2f       	mov	r20, r24
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	02 2e       	mov	r0, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <MDIO_VoidSetPinDirection+0xde>
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	0a 94       	dec	r0
    2094:	e2 f7       	brpl	.-8      	; 0x208e <MDIO_VoidSetPinDirection+0xda>
    2096:	84 2b       	or	r24, r20
    2098:	8c 93       	st	X, r24
    209a:	8b c0       	rjmp	.+278    	; 0x21b2 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTD:SET_BIT(DDRD_REG, Copy_u8Pin); break;
    209c:	a1 e3       	ldi	r26, 0x31	; 49
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e1 e3       	ldi	r30, 0x31	; 49
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	48 2f       	mov	r20, r24
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	02 2e       	mov	r0, r18
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <MDIO_VoidSetPinDirection+0x106>
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	0a 94       	dec	r0
    20bc:	e2 f7       	brpl	.-8      	; 0x20b6 <MDIO_VoidSetPinDirection+0x102>
    20be:	84 2b       	or	r24, r20
    20c0:	8c 93       	st	X, r24
    20c2:	77 c0       	rjmp	.+238    	; 0x21b2 <MDIO_VoidSetPinDirection+0x1fe>
				default: /*		Wrong POrt ID		*/	      break;
			}
		}
	/**/
		else if(DIO_INPUT == Copy_u8Direc)
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	88 23       	and	r24, r24
    20c8:	09 f0       	breq	.+2      	; 0x20cc <MDIO_VoidSetPinDirection+0x118>
    20ca:	73 c0       	rjmp	.+230    	; 0x21b2 <MDIO_VoidSetPinDirection+0x1fe>
		{
			switch(Copy_u8Port)
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	3d 83       	std	Y+5, r19	; 0x05
    20d4:	2c 83       	std	Y+4, r18	; 0x04
    20d6:	8c 81       	ldd	r24, Y+4	; 0x04
    20d8:	9d 81       	ldd	r25, Y+5	; 0x05
    20da:	81 30       	cpi	r24, 0x01	; 1
    20dc:	91 05       	cpc	r25, r1
    20de:	59 f1       	breq	.+86     	; 0x2136 <MDIO_VoidSetPinDirection+0x182>
    20e0:	2c 81       	ldd	r18, Y+4	; 0x04
    20e2:	3d 81       	ldd	r19, Y+5	; 0x05
    20e4:	22 30       	cpi	r18, 0x02	; 2
    20e6:	31 05       	cpc	r19, r1
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <MDIO_VoidSetPinDirection+0x140>
    20ea:	8c 81       	ldd	r24, Y+4	; 0x04
    20ec:	9d 81       	ldd	r25, Y+5	; 0x05
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	69 f0       	breq	.+26     	; 0x210c <MDIO_VoidSetPinDirection+0x158>
    20f2:	5f c0       	rjmp	.+190    	; 0x21b2 <MDIO_VoidSetPinDirection+0x1fe>
    20f4:	2c 81       	ldd	r18, Y+4	; 0x04
    20f6:	3d 81       	ldd	r19, Y+5	; 0x05
    20f8:	22 30       	cpi	r18, 0x02	; 2
    20fa:	31 05       	cpc	r19, r1
    20fc:	89 f1       	breq	.+98     	; 0x2160 <MDIO_VoidSetPinDirection+0x1ac>
    20fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2100:	9d 81       	ldd	r25, Y+5	; 0x05
    2102:	83 30       	cpi	r24, 0x03	; 3
    2104:	91 05       	cpc	r25, r1
    2106:	09 f4       	brne	.+2      	; 0x210a <MDIO_VoidSetPinDirection+0x156>
    2108:	40 c0       	rjmp	.+128    	; 0x218a <MDIO_VoidSetPinDirection+0x1d6>
    210a:	53 c0       	rjmp	.+166    	; 0x21b2 <MDIO_VoidSetPinDirection+0x1fe>
			{
				case DIO_PORTA:CLR_BIT(DDRA_REG, Copy_u8Pin); break;
    210c:	aa e3       	ldi	r26, 0x3A	; 58
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	ea e3       	ldi	r30, 0x3A	; 58
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	48 2f       	mov	r20, r24
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	02 2e       	mov	r0, r18
    2124:	02 c0       	rjmp	.+4      	; 0x212a <MDIO_VoidSetPinDirection+0x176>
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	0a 94       	dec	r0
    212c:	e2 f7       	brpl	.-8      	; 0x2126 <MDIO_VoidSetPinDirection+0x172>
    212e:	80 95       	com	r24
    2130:	84 23       	and	r24, r20
    2132:	8c 93       	st	X, r24
    2134:	3e c0       	rjmp	.+124    	; 0x21b2 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTB:CLR_BIT(DDRB_REG, Copy_u8Pin); break;
    2136:	a7 e3       	ldi	r26, 0x37	; 55
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e7 e3       	ldi	r30, 0x37	; 55
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	48 2f       	mov	r20, r24
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 2e       	mov	r0, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <MDIO_VoidSetPinDirection+0x1a0>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <MDIO_VoidSetPinDirection+0x19c>
    2158:	80 95       	com	r24
    215a:	84 23       	and	r24, r20
    215c:	8c 93       	st	X, r24
    215e:	29 c0       	rjmp	.+82     	; 0x21b2 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTC:CLR_BIT(DDRC_REG, Copy_u8Pin); break;
    2160:	a4 e3       	ldi	r26, 0x34	; 52
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e4 e3       	ldi	r30, 0x34	; 52
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	48 2f       	mov	r20, r24
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	02 2e       	mov	r0, r18
    2178:	02 c0       	rjmp	.+4      	; 0x217e <MDIO_VoidSetPinDirection+0x1ca>
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	0a 94       	dec	r0
    2180:	e2 f7       	brpl	.-8      	; 0x217a <MDIO_VoidSetPinDirection+0x1c6>
    2182:	80 95       	com	r24
    2184:	84 23       	and	r24, r20
    2186:	8c 93       	st	X, r24
    2188:	14 c0       	rjmp	.+40     	; 0x21b2 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTD:CLR_BIT(DDRD_REG, Copy_u8Pin); break;
    218a:	a1 e3       	ldi	r26, 0x31	; 49
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e1 e3       	ldi	r30, 0x31	; 49
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	48 2f       	mov	r20, r24
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	02 2e       	mov	r0, r18
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <MDIO_VoidSetPinDirection+0x1f4>
    21a4:	88 0f       	add	r24, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	0a 94       	dec	r0
    21aa:	e2 f7       	brpl	.-8      	; 0x21a4 <MDIO_VoidSetPinDirection+0x1f0>
    21ac:	80 95       	com	r24
    21ae:	84 23       	and	r24, r20
    21b0:	8c 93       	st	X, r24
	}
	else
	{
		/*Wrong PIN ID or POrt ID*/
	}
}
    21b2:	27 96       	adiw	r28, 0x07	; 7
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <MDIO_VoidSetPinValue>:
 *
 * 			Here we Set the Pin value of the given port to 1 or 0
 *
 *************************************************************************/
void MDIO_VoidSetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin, u8 Copy_u8Value)
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	27 97       	sbiw	r28, 0x07	; 7
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	6a 83       	std	Y+2, r22	; 0x02
    21dc:	4b 83       	std	Y+3, r20	; 0x03
	/*check for pins here do it ur self*/
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	84 30       	cpi	r24, 0x04	; 4
    21e2:	08 f0       	brcs	.+2      	; 0x21e6 <MDIO_VoidSetPinValue+0x22>
    21e4:	ee c0       	rjmp	.+476    	; 0x23c2 <MDIO_VoidSetPinValue+0x1fe>
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	88 30       	cpi	r24, 0x08	; 8
    21ea:	08 f0       	brcs	.+2      	; 0x21ee <MDIO_VoidSetPinValue+0x2a>
    21ec:	ea c0       	rjmp	.+468    	; 0x23c2 <MDIO_VoidSetPinValue+0x1fe>
	{
	/*check the direction*/
		if(DIO_HIGH == Copy_u8Value)
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	81 30       	cpi	r24, 0x01	; 1
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <MDIO_VoidSetPinValue+0x32>
    21f4:	6f c0       	rjmp	.+222    	; 0x22d4 <MDIO_VoidSetPinValue+0x110>
		{
			switch(Copy_u8Port)
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	3f 83       	std	Y+7, r19	; 0x07
    21fe:	2e 83       	std	Y+6, r18	; 0x06
    2200:	8e 81       	ldd	r24, Y+6	; 0x06
    2202:	9f 81       	ldd	r25, Y+7	; 0x07
    2204:	81 30       	cpi	r24, 0x01	; 1
    2206:	91 05       	cpc	r25, r1
    2208:	49 f1       	breq	.+82     	; 0x225c <MDIO_VoidSetPinValue+0x98>
    220a:	2e 81       	ldd	r18, Y+6	; 0x06
    220c:	3f 81       	ldd	r19, Y+7	; 0x07
    220e:	22 30       	cpi	r18, 0x02	; 2
    2210:	31 05       	cpc	r19, r1
    2212:	2c f4       	brge	.+10     	; 0x221e <MDIO_VoidSetPinValue+0x5a>
    2214:	8e 81       	ldd	r24, Y+6	; 0x06
    2216:	9f 81       	ldd	r25, Y+7	; 0x07
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	61 f0       	breq	.+24     	; 0x2234 <MDIO_VoidSetPinValue+0x70>
    221c:	d2 c0       	rjmp	.+420    	; 0x23c2 <MDIO_VoidSetPinValue+0x1fe>
    221e:	2e 81       	ldd	r18, Y+6	; 0x06
    2220:	3f 81       	ldd	r19, Y+7	; 0x07
    2222:	22 30       	cpi	r18, 0x02	; 2
    2224:	31 05       	cpc	r19, r1
    2226:	71 f1       	breq	.+92     	; 0x2284 <MDIO_VoidSetPinValue+0xc0>
    2228:	8e 81       	ldd	r24, Y+6	; 0x06
    222a:	9f 81       	ldd	r25, Y+7	; 0x07
    222c:	83 30       	cpi	r24, 0x03	; 3
    222e:	91 05       	cpc	r25, r1
    2230:	e9 f1       	breq	.+122    	; 0x22ac <MDIO_VoidSetPinValue+0xe8>
    2232:	c7 c0       	rjmp	.+398    	; 0x23c2 <MDIO_VoidSetPinValue+0x1fe>
			{
				case DIO_PORTA:SET_BIT(PORTA_REG, Copy_u8Pin); break;
    2234:	ab e3       	ldi	r26, 0x3B	; 59
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	eb e3       	ldi	r30, 0x3B	; 59
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	48 2f       	mov	r20, r24
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	02 2e       	mov	r0, r18
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <MDIO_VoidSetPinValue+0x8e>
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	0a 94       	dec	r0
    2254:	e2 f7       	brpl	.-8      	; 0x224e <MDIO_VoidSetPinValue+0x8a>
    2256:	84 2b       	or	r24, r20
    2258:	8c 93       	st	X, r24
    225a:	b3 c0       	rjmp	.+358    	; 0x23c2 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTB:SET_BIT(PORTB_REG, Copy_u8Pin); break;
    225c:	a8 e3       	ldi	r26, 0x38	; 56
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e8 e3       	ldi	r30, 0x38	; 56
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	48 2f       	mov	r20, r24
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	02 2e       	mov	r0, r18
    2274:	02 c0       	rjmp	.+4      	; 0x227a <MDIO_VoidSetPinValue+0xb6>
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	0a 94       	dec	r0
    227c:	e2 f7       	brpl	.-8      	; 0x2276 <MDIO_VoidSetPinValue+0xb2>
    227e:	84 2b       	or	r24, r20
    2280:	8c 93       	st	X, r24
    2282:	9f c0       	rjmp	.+318    	; 0x23c2 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTC:SET_BIT(PORTC_REG, Copy_u8Pin); break;
    2284:	a5 e3       	ldi	r26, 0x35	; 53
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e5 e3       	ldi	r30, 0x35	; 53
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	48 2f       	mov	r20, r24
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	02 2e       	mov	r0, r18
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <MDIO_VoidSetPinValue+0xde>
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <MDIO_VoidSetPinValue+0xda>
    22a6:	84 2b       	or	r24, r20
    22a8:	8c 93       	st	X, r24
    22aa:	8b c0       	rjmp	.+278    	; 0x23c2 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTD:SET_BIT(PORTD_REG, Copy_u8Pin); break;
    22ac:	a2 e3       	ldi	r26, 0x32	; 50
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e2 e3       	ldi	r30, 0x32	; 50
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	48 2f       	mov	r20, r24
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	02 2e       	mov	r0, r18
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <MDIO_VoidSetPinValue+0x106>
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	0a 94       	dec	r0
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <MDIO_VoidSetPinValue+0x102>
    22ce:	84 2b       	or	r24, r20
    22d0:	8c 93       	st	X, r24
    22d2:	77 c0       	rjmp	.+238    	; 0x23c2 <MDIO_VoidSetPinValue+0x1fe>
				default: /*		Wrong POrt ID		*/	   	   break;
			}
		}
	/**/
		else if(DIO_LOW == Copy_u8Value)
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	88 23       	and	r24, r24
    22d8:	09 f0       	breq	.+2      	; 0x22dc <MDIO_VoidSetPinValue+0x118>
    22da:	73 c0       	rjmp	.+230    	; 0x23c2 <MDIO_VoidSetPinValue+0x1fe>
		{
			switch(Copy_u8Port)
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	3d 83       	std	Y+5, r19	; 0x05
    22e4:	2c 83       	std	Y+4, r18	; 0x04
    22e6:	8c 81       	ldd	r24, Y+4	; 0x04
    22e8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ea:	81 30       	cpi	r24, 0x01	; 1
    22ec:	91 05       	cpc	r25, r1
    22ee:	59 f1       	breq	.+86     	; 0x2346 <MDIO_VoidSetPinValue+0x182>
    22f0:	2c 81       	ldd	r18, Y+4	; 0x04
    22f2:	3d 81       	ldd	r19, Y+5	; 0x05
    22f4:	22 30       	cpi	r18, 0x02	; 2
    22f6:	31 05       	cpc	r19, r1
    22f8:	2c f4       	brge	.+10     	; 0x2304 <MDIO_VoidSetPinValue+0x140>
    22fa:	8c 81       	ldd	r24, Y+4	; 0x04
    22fc:	9d 81       	ldd	r25, Y+5	; 0x05
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	69 f0       	breq	.+26     	; 0x231c <MDIO_VoidSetPinValue+0x158>
    2302:	5f c0       	rjmp	.+190    	; 0x23c2 <MDIO_VoidSetPinValue+0x1fe>
    2304:	2c 81       	ldd	r18, Y+4	; 0x04
    2306:	3d 81       	ldd	r19, Y+5	; 0x05
    2308:	22 30       	cpi	r18, 0x02	; 2
    230a:	31 05       	cpc	r19, r1
    230c:	89 f1       	breq	.+98     	; 0x2370 <MDIO_VoidSetPinValue+0x1ac>
    230e:	8c 81       	ldd	r24, Y+4	; 0x04
    2310:	9d 81       	ldd	r25, Y+5	; 0x05
    2312:	83 30       	cpi	r24, 0x03	; 3
    2314:	91 05       	cpc	r25, r1
    2316:	09 f4       	brne	.+2      	; 0x231a <MDIO_VoidSetPinValue+0x156>
    2318:	40 c0       	rjmp	.+128    	; 0x239a <MDIO_VoidSetPinValue+0x1d6>
    231a:	53 c0       	rjmp	.+166    	; 0x23c2 <MDIO_VoidSetPinValue+0x1fe>
			{
				case DIO_PORTA:CLR_BIT(PORTA_REG, Copy_u8Pin); break;
    231c:	ab e3       	ldi	r26, 0x3B	; 59
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	eb e3       	ldi	r30, 0x3B	; 59
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	48 2f       	mov	r20, r24
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	02 2e       	mov	r0, r18
    2334:	02 c0       	rjmp	.+4      	; 0x233a <MDIO_VoidSetPinValue+0x176>
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	0a 94       	dec	r0
    233c:	e2 f7       	brpl	.-8      	; 0x2336 <MDIO_VoidSetPinValue+0x172>
    233e:	80 95       	com	r24
    2340:	84 23       	and	r24, r20
    2342:	8c 93       	st	X, r24
    2344:	3e c0       	rjmp	.+124    	; 0x23c2 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTB:CLR_BIT(PORTB_REG, Copy_u8Pin); break;
    2346:	a8 e3       	ldi	r26, 0x38	; 56
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e8 e3       	ldi	r30, 0x38	; 56
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	48 2f       	mov	r20, r24
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	02 2e       	mov	r0, r18
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <MDIO_VoidSetPinValue+0x1a0>
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	0a 94       	dec	r0
    2366:	e2 f7       	brpl	.-8      	; 0x2360 <MDIO_VoidSetPinValue+0x19c>
    2368:	80 95       	com	r24
    236a:	84 23       	and	r24, r20
    236c:	8c 93       	st	X, r24
    236e:	29 c0       	rjmp	.+82     	; 0x23c2 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTC:CLR_BIT(PORTC_REG, Copy_u8Pin); break;
    2370:	a5 e3       	ldi	r26, 0x35	; 53
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e5 e3       	ldi	r30, 0x35	; 53
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	48 2f       	mov	r20, r24
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	28 2f       	mov	r18, r24
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	02 2e       	mov	r0, r18
    2388:	02 c0       	rjmp	.+4      	; 0x238e <MDIO_VoidSetPinValue+0x1ca>
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	0a 94       	dec	r0
    2390:	e2 f7       	brpl	.-8      	; 0x238a <MDIO_VoidSetPinValue+0x1c6>
    2392:	80 95       	com	r24
    2394:	84 23       	and	r24, r20
    2396:	8c 93       	st	X, r24
    2398:	14 c0       	rjmp	.+40     	; 0x23c2 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTD:CLR_BIT(PORTD_REG, Copy_u8Pin); break;
    239a:	a2 e3       	ldi	r26, 0x32	; 50
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e2 e3       	ldi	r30, 0x32	; 50
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	48 2f       	mov	r20, r24
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	02 2e       	mov	r0, r18
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <MDIO_VoidSetPinValue+0x1f4>
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	0a 94       	dec	r0
    23ba:	e2 f7       	brpl	.-8      	; 0x23b4 <MDIO_VoidSetPinValue+0x1f0>
    23bc:	80 95       	com	r24
    23be:	84 23       	and	r24, r20
    23c0:	8c 93       	st	X, r24
	else
	{
		/*Wrong PIN ID or POrt ID*/
	}

}
    23c2:	27 96       	adiw	r28, 0x07	; 7
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <MDIO_u8GetPinValue>:
 *
 * 			Here we get the Pin value of the given port and pin
 *
 *************************************************************************/
u8 MDIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	00 d0       	rcall	.+0      	; 0x23da <MDIO_u8GetPinValue+0x6>
    23da:	00 d0       	rcall	.+0      	; 0x23dc <MDIO_u8GetPinValue+0x8>
    23dc:	0f 92       	push	r0
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	8a 83       	std	Y+2, r24	; 0x02
    23e4:	6b 83       	std	Y+3, r22	; 0x03
	/*check for pins here do it your self*/
	u8 LOC_u8RetValue_var1;
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	84 30       	cpi	r24, 0x04	; 4
    23ea:	08 f0       	brcs	.+2      	; 0x23ee <MDIO_u8GetPinValue+0x1a>
    23ec:	6c c0       	rjmp	.+216    	; 0x24c6 <MDIO_u8GetPinValue+0xf2>
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	88 30       	cpi	r24, 0x08	; 8
    23f2:	08 f0       	brcs	.+2      	; 0x23f6 <MDIO_u8GetPinValue+0x22>
    23f4:	68 c0       	rjmp	.+208    	; 0x24c6 <MDIO_u8GetPinValue+0xf2>
	{

		switch(Copy_u8Port)
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	3d 83       	std	Y+5, r19	; 0x05
    23fe:	2c 83       	std	Y+4, r18	; 0x04
    2400:	4c 81       	ldd	r20, Y+4	; 0x04
    2402:	5d 81       	ldd	r21, Y+5	; 0x05
    2404:	41 30       	cpi	r20, 0x01	; 1
    2406:	51 05       	cpc	r21, r1
    2408:	41 f1       	breq	.+80     	; 0x245a <MDIO_u8GetPinValue+0x86>
    240a:	8c 81       	ldd	r24, Y+4	; 0x04
    240c:	9d 81       	ldd	r25, Y+5	; 0x05
    240e:	82 30       	cpi	r24, 0x02	; 2
    2410:	91 05       	cpc	r25, r1
    2412:	34 f4       	brge	.+12     	; 0x2420 <MDIO_u8GetPinValue+0x4c>
    2414:	2c 81       	ldd	r18, Y+4	; 0x04
    2416:	3d 81       	ldd	r19, Y+5	; 0x05
    2418:	21 15       	cp	r18, r1
    241a:	31 05       	cpc	r19, r1
    241c:	61 f0       	breq	.+24     	; 0x2436 <MDIO_u8GetPinValue+0x62>
    241e:	55 c0       	rjmp	.+170    	; 0x24ca <MDIO_u8GetPinValue+0xf6>
    2420:	4c 81       	ldd	r20, Y+4	; 0x04
    2422:	5d 81       	ldd	r21, Y+5	; 0x05
    2424:	42 30       	cpi	r20, 0x02	; 2
    2426:	51 05       	cpc	r21, r1
    2428:	51 f1       	breq	.+84     	; 0x247e <MDIO_u8GetPinValue+0xaa>
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	9d 81       	ldd	r25, Y+5	; 0x05
    242e:	83 30       	cpi	r24, 0x03	; 3
    2430:	91 05       	cpc	r25, r1
    2432:	b9 f1       	breq	.+110    	; 0x24a2 <MDIO_u8GetPinValue+0xce>
    2434:	4a c0       	rjmp	.+148    	; 0x24ca <MDIO_u8GetPinValue+0xf6>
		{
			case DIO_PORTA: LOC_u8RetValue_var1 = GET_BIT(PINA_REG, Copy_u8Pin);break;
    2436:	e9 e3       	ldi	r30, 0x39	; 57
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	28 2f       	mov	r18, r24
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	88 2f       	mov	r24, r24
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	a9 01       	movw	r20, r18
    2448:	02 c0       	rjmp	.+4      	; 0x244e <MDIO_u8GetPinValue+0x7a>
    244a:	55 95       	asr	r21
    244c:	47 95       	ror	r20
    244e:	8a 95       	dec	r24
    2450:	e2 f7       	brpl	.-8      	; 0x244a <MDIO_u8GetPinValue+0x76>
    2452:	ca 01       	movw	r24, r20
    2454:	81 70       	andi	r24, 0x01	; 1
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	38 c0       	rjmp	.+112    	; 0x24ca <MDIO_u8GetPinValue+0xf6>
			case DIO_PORTB: LOC_u8RetValue_var1 = GET_BIT(PINB_REG, Copy_u8Pin);break;
    245a:	e6 e3       	ldi	r30, 0x36	; 54
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	28 2f       	mov	r18, r24
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	88 2f       	mov	r24, r24
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a9 01       	movw	r20, r18
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <MDIO_u8GetPinValue+0x9e>
    246e:	55 95       	asr	r21
    2470:	47 95       	ror	r20
    2472:	8a 95       	dec	r24
    2474:	e2 f7       	brpl	.-8      	; 0x246e <MDIO_u8GetPinValue+0x9a>
    2476:	ca 01       	movw	r24, r20
    2478:	81 70       	andi	r24, 0x01	; 1
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	26 c0       	rjmp	.+76     	; 0x24ca <MDIO_u8GetPinValue+0xf6>
			case DIO_PORTC: LOC_u8RetValue_var1 = GET_BIT(PINC_REG, Copy_u8Pin);break;
    247e:	e3 e3       	ldi	r30, 0x33	; 51
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	88 2f       	mov	r24, r24
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	a9 01       	movw	r20, r18
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <MDIO_u8GetPinValue+0xc2>
    2492:	55 95       	asr	r21
    2494:	47 95       	ror	r20
    2496:	8a 95       	dec	r24
    2498:	e2 f7       	brpl	.-8      	; 0x2492 <MDIO_u8GetPinValue+0xbe>
    249a:	ca 01       	movw	r24, r20
    249c:	81 70       	andi	r24, 0x01	; 1
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	14 c0       	rjmp	.+40     	; 0x24ca <MDIO_u8GetPinValue+0xf6>
			case DIO_PORTD: LOC_u8RetValue_var1 = GET_BIT(PIND_REG, Copy_u8Pin);break;
    24a2:	e0 e3       	ldi	r30, 0x30	; 48
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	88 2f       	mov	r24, r24
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	a9 01       	movw	r20, r18
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <MDIO_u8GetPinValue+0xe6>
    24b6:	55 95       	asr	r21
    24b8:	47 95       	ror	r20
    24ba:	8a 95       	dec	r24
    24bc:	e2 f7       	brpl	.-8      	; 0x24b6 <MDIO_u8GetPinValue+0xe2>
    24be:	ca 01       	movw	r24, r20
    24c0:	81 70       	andi	r24, 0x01	; 1
    24c2:	89 83       	std	Y+1, r24	; 0x01
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <MDIO_u8GetPinValue+0xf6>
		}
	}
	else
	{
		/*Wrong PIN ID or POrt ID*/
		LOC_u8RetValue_var1 = DIO_UNDEFINED_VAL;
    24c6:	8f ef       	ldi	r24, 0xFF	; 255
    24c8:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_u8RetValue_var1;
    24ca:	89 81       	ldd	r24, Y+1	; 0x01

}
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <MDIO_VoidSetPortDirection>:
 *
 * 			Here we Set the port direction of the given port to 1 or 0
 *
 *************************************************************************/
void MDIO_VoidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direc)
{
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <MDIO_VoidSetPortDirection+0x6>
    24e2:	00 d0       	rcall	.+0      	; 0x24e4 <MDIO_VoidSetPortDirection+0x8>
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	6a 83       	std	Y+2, r22	; 0x02
	/*check for pins here do it your self*/
	switch(Copy_u8Port)
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	3c 83       	std	Y+4, r19	; 0x04
    24f4:	2b 83       	std	Y+3, r18	; 0x03
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	91 05       	cpc	r25, r1
    24fe:	d1 f0       	breq	.+52     	; 0x2534 <MDIO_VoidSetPortDirection+0x58>
    2500:	2b 81       	ldd	r18, Y+3	; 0x03
    2502:	3c 81       	ldd	r19, Y+4	; 0x04
    2504:	22 30       	cpi	r18, 0x02	; 2
    2506:	31 05       	cpc	r19, r1
    2508:	2c f4       	brge	.+10     	; 0x2514 <MDIO_VoidSetPortDirection+0x38>
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	9c 81       	ldd	r25, Y+4	; 0x04
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	61 f0       	breq	.+24     	; 0x252a <MDIO_VoidSetPortDirection+0x4e>
    2512:	1e c0       	rjmp	.+60     	; 0x2550 <MDIO_VoidSetPortDirection+0x74>
    2514:	2b 81       	ldd	r18, Y+3	; 0x03
    2516:	3c 81       	ldd	r19, Y+4	; 0x04
    2518:	22 30       	cpi	r18, 0x02	; 2
    251a:	31 05       	cpc	r19, r1
    251c:	81 f0       	breq	.+32     	; 0x253e <MDIO_VoidSetPortDirection+0x62>
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	9c 81       	ldd	r25, Y+4	; 0x04
    2522:	83 30       	cpi	r24, 0x03	; 3
    2524:	91 05       	cpc	r25, r1
    2526:	81 f0       	breq	.+32     	; 0x2548 <MDIO_VoidSetPortDirection+0x6c>
    2528:	13 c0       	rjmp	.+38     	; 0x2550 <MDIO_VoidSetPortDirection+0x74>
	{
		case DIO_PORTA:  DDRA_REG =  Copy_u8Direc; break;
    252a:	ea e3       	ldi	r30, 0x3A	; 58
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	80 83       	st	Z, r24
    2532:	0e c0       	rjmp	.+28     	; 0x2550 <MDIO_VoidSetPortDirection+0x74>
		case DIO_PORTB:  DDRB_REG =  Copy_u8Direc; break;
    2534:	e7 e3       	ldi	r30, 0x37	; 55
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	8a 81       	ldd	r24, Y+2	; 0x02
    253a:	80 83       	st	Z, r24
    253c:	09 c0       	rjmp	.+18     	; 0x2550 <MDIO_VoidSetPortDirection+0x74>
		case DIO_PORTC:  DDRC_REG =  Copy_u8Direc; break;
    253e:	e4 e3       	ldi	r30, 0x34	; 52
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	80 83       	st	Z, r24
    2546:	04 c0       	rjmp	.+8      	; 0x2550 <MDIO_VoidSetPortDirection+0x74>
		case DIO_PORTD:  DDRD_REG =  Copy_u8Direc; break;
    2548:	e1 e3       	ldi	r30, 0x31	; 49
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	80 83       	st	Z, r24
		default: /*		Wrong POrt ID		*/	   break;
	}
}
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <MDIO_VoidSetPortValue>:
 *
 * 			Here we Set the port value of the given port to 1 or 0
 *
 *************************************************************************/
void MDIO_VoidSetPortValue(u8 Copy_u8Port ,u8 Copy_u8Value)
{
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	00 d0       	rcall	.+0      	; 0x2564 <MDIO_VoidSetPortValue+0x6>
    2564:	00 d0       	rcall	.+0      	; 0x2566 <MDIO_VoidSetPortValue+0x8>
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	89 83       	std	Y+1, r24	; 0x01
    256c:	6a 83       	std	Y+2, r22	; 0x02
	/*check for pins here do it ur self*/
	switch(Copy_u8Port)
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	3c 83       	std	Y+4, r19	; 0x04
    2576:	2b 83       	std	Y+3, r18	; 0x03
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	9c 81       	ldd	r25, Y+4	; 0x04
    257c:	81 30       	cpi	r24, 0x01	; 1
    257e:	91 05       	cpc	r25, r1
    2580:	d1 f0       	breq	.+52     	; 0x25b6 <MDIO_VoidSetPortValue+0x58>
    2582:	2b 81       	ldd	r18, Y+3	; 0x03
    2584:	3c 81       	ldd	r19, Y+4	; 0x04
    2586:	22 30       	cpi	r18, 0x02	; 2
    2588:	31 05       	cpc	r19, r1
    258a:	2c f4       	brge	.+10     	; 0x2596 <MDIO_VoidSetPortValue+0x38>
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	9c 81       	ldd	r25, Y+4	; 0x04
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	61 f0       	breq	.+24     	; 0x25ac <MDIO_VoidSetPortValue+0x4e>
    2594:	1e c0       	rjmp	.+60     	; 0x25d2 <MDIO_VoidSetPortValue+0x74>
    2596:	2b 81       	ldd	r18, Y+3	; 0x03
    2598:	3c 81       	ldd	r19, Y+4	; 0x04
    259a:	22 30       	cpi	r18, 0x02	; 2
    259c:	31 05       	cpc	r19, r1
    259e:	81 f0       	breq	.+32     	; 0x25c0 <MDIO_VoidSetPortValue+0x62>
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	83 30       	cpi	r24, 0x03	; 3
    25a6:	91 05       	cpc	r25, r1
    25a8:	81 f0       	breq	.+32     	; 0x25ca <MDIO_VoidSetPortValue+0x6c>
    25aa:	13 c0       	rjmp	.+38     	; 0x25d2 <MDIO_VoidSetPortValue+0x74>
	{
		case DIO_PORTA:  PORTA_REG =  Copy_u8Value; break;
    25ac:	eb e3       	ldi	r30, 0x3B	; 59
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	80 83       	st	Z, r24
    25b4:	0e c0       	rjmp	.+28     	; 0x25d2 <MDIO_VoidSetPortValue+0x74>
		case DIO_PORTB:  PORTB_REG =  Copy_u8Value; break;
    25b6:	e8 e3       	ldi	r30, 0x38	; 56
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	80 83       	st	Z, r24
    25be:	09 c0       	rjmp	.+18     	; 0x25d2 <MDIO_VoidSetPortValue+0x74>
		case DIO_PORTC:  PORTC_REG =  Copy_u8Value; break;
    25c0:	e5 e3       	ldi	r30, 0x35	; 53
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	80 83       	st	Z, r24
    25c8:	04 c0       	rjmp	.+8      	; 0x25d2 <MDIO_VoidSetPortValue+0x74>
		case DIO_PORTD:  PORTD_REG =  Copy_u8Value; break;
    25ca:	e2 e3       	ldi	r30, 0x32	; 50
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	80 83       	st	Z, r24
		default: /*		Wrong POrt ID		*/		break;
	}
}
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <MDIO_VoidTogglePin>:
 *
 * 			Here we toggle the Pin
 *
 *************************************************************************/
void MDIO_VoidTogglePin(u8 Copy_u8Port ,u8 Copy_u8Pin)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <MDIO_VoidTogglePin+0x6>
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <MDIO_VoidTogglePin+0x8>
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	6a 83       	std	Y+2, r22	; 0x02
	/*check for pins here do it ur self*/
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	84 30       	cpi	r24, 0x04	; 4
    25f4:	08 f0       	brcs	.+2      	; 0x25f8 <MDIO_VoidTogglePin+0x18>
    25f6:	72 c0       	rjmp	.+228    	; 0x26dc <MDIO_VoidTogglePin+0xfc>
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	88 30       	cpi	r24, 0x08	; 8
    25fc:	08 f0       	brcs	.+2      	; 0x2600 <MDIO_VoidTogglePin+0x20>
    25fe:	6e c0       	rjmp	.+220    	; 0x26dc <MDIO_VoidTogglePin+0xfc>
	{
		switch(Copy_u8Port)
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	28 2f       	mov	r18, r24
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	3c 83       	std	Y+4, r19	; 0x04
    2608:	2b 83       	std	Y+3, r18	; 0x03
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	9c 81       	ldd	r25, Y+4	; 0x04
    260e:	81 30       	cpi	r24, 0x01	; 1
    2610:	91 05       	cpc	r25, r1
    2612:	49 f1       	breq	.+82     	; 0x2666 <MDIO_VoidTogglePin+0x86>
    2614:	2b 81       	ldd	r18, Y+3	; 0x03
    2616:	3c 81       	ldd	r19, Y+4	; 0x04
    2618:	22 30       	cpi	r18, 0x02	; 2
    261a:	31 05       	cpc	r19, r1
    261c:	2c f4       	brge	.+10     	; 0x2628 <MDIO_VoidTogglePin+0x48>
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	61 f0       	breq	.+24     	; 0x263e <MDIO_VoidTogglePin+0x5e>
    2626:	5a c0       	rjmp	.+180    	; 0x26dc <MDIO_VoidTogglePin+0xfc>
    2628:	2b 81       	ldd	r18, Y+3	; 0x03
    262a:	3c 81       	ldd	r19, Y+4	; 0x04
    262c:	22 30       	cpi	r18, 0x02	; 2
    262e:	31 05       	cpc	r19, r1
    2630:	71 f1       	breq	.+92     	; 0x268e <MDIO_VoidTogglePin+0xae>
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	83 30       	cpi	r24, 0x03	; 3
    2638:	91 05       	cpc	r25, r1
    263a:	e9 f1       	breq	.+122    	; 0x26b6 <MDIO_VoidTogglePin+0xd6>
    263c:	4f c0       	rjmp	.+158    	; 0x26dc <MDIO_VoidTogglePin+0xfc>
		{
			case DIO_PORTA:TOGGLE_BIT(PORTA_REG, Copy_u8Pin); break;
    263e:	ab e3       	ldi	r26, 0x3B	; 59
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	eb e3       	ldi	r30, 0x3B	; 59
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	48 2f       	mov	r20, r24
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	28 2f       	mov	r18, r24
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	02 2e       	mov	r0, r18
    2656:	02 c0       	rjmp	.+4      	; 0x265c <MDIO_VoidTogglePin+0x7c>
    2658:	88 0f       	add	r24, r24
    265a:	99 1f       	adc	r25, r25
    265c:	0a 94       	dec	r0
    265e:	e2 f7       	brpl	.-8      	; 0x2658 <MDIO_VoidTogglePin+0x78>
    2660:	84 27       	eor	r24, r20
    2662:	8c 93       	st	X, r24
    2664:	3b c0       	rjmp	.+118    	; 0x26dc <MDIO_VoidTogglePin+0xfc>
			case DIO_PORTB:TOGGLE_BIT(PORTB_REG, Copy_u8Pin); break;
    2666:	a8 e3       	ldi	r26, 0x38	; 56
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e8 e3       	ldi	r30, 0x38	; 56
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	48 2f       	mov	r20, r24
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	02 2e       	mov	r0, r18
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <MDIO_VoidTogglePin+0xa4>
    2680:	88 0f       	add	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	0a 94       	dec	r0
    2686:	e2 f7       	brpl	.-8      	; 0x2680 <MDIO_VoidTogglePin+0xa0>
    2688:	84 27       	eor	r24, r20
    268a:	8c 93       	st	X, r24
    268c:	27 c0       	rjmp	.+78     	; 0x26dc <MDIO_VoidTogglePin+0xfc>
			case DIO_PORTC:TOGGLE_BIT(PORTC_REG, Copy_u8Pin); break;
    268e:	a5 e3       	ldi	r26, 0x35	; 53
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e5 e3       	ldi	r30, 0x35	; 53
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	48 2f       	mov	r20, r24
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	02 2e       	mov	r0, r18
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <MDIO_VoidTogglePin+0xcc>
    26a8:	88 0f       	add	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	0a 94       	dec	r0
    26ae:	e2 f7       	brpl	.-8      	; 0x26a8 <MDIO_VoidTogglePin+0xc8>
    26b0:	84 27       	eor	r24, r20
    26b2:	8c 93       	st	X, r24
    26b4:	13 c0       	rjmp	.+38     	; 0x26dc <MDIO_VoidTogglePin+0xfc>
			case DIO_PORTD:TOGGLE_BIT(PORTD_REG, Copy_u8Pin); break;
    26b6:	a2 e3       	ldi	r26, 0x32	; 50
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e2 e3       	ldi	r30, 0x32	; 50
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	48 2f       	mov	r20, r24
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	28 2f       	mov	r18, r24
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	02 2e       	mov	r0, r18
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <MDIO_VoidTogglePin+0xf4>
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	0a 94       	dec	r0
    26d6:	e2 f7       	brpl	.-8      	; 0x26d0 <MDIO_VoidTogglePin+0xf0>
    26d8:	84 27       	eor	r24, r20
    26da:	8c 93       	st	X, r24
	}
	else
	{
		/*Wrong PIN ID or POrt ID*/
	}
}
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <MDIO_VoidEnablePullUpResistor>:
 *
 * 			Here we Enable the pull up resistor
 *
 *************************************************************************/
void MDIO_VoidEnablePullUpResistor(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <MDIO_VoidEnablePullUpResistor+0x6>
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <MDIO_VoidEnablePullUpResistor+0x8>
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	6a 83       	std	Y+2, r22	; 0x02
	/*check for pins here do it your self*/
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	84 30       	cpi	r24, 0x04	; 4
    26fe:	08 f0       	brcs	.+2      	; 0x2702 <MDIO_VoidEnablePullUpResistor+0x18>
    2700:	72 c0       	rjmp	.+228    	; 0x27e6 <MDIO_VoidEnablePullUpResistor+0xfc>
    2702:	8a 81       	ldd	r24, Y+2	; 0x02
    2704:	88 30       	cpi	r24, 0x08	; 8
    2706:	08 f0       	brcs	.+2      	; 0x270a <MDIO_VoidEnablePullUpResistor+0x20>
    2708:	6e c0       	rjmp	.+220    	; 0x27e6 <MDIO_VoidEnablePullUpResistor+0xfc>
	{
		switch(Copy_u8Port)
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	28 2f       	mov	r18, r24
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	3c 83       	std	Y+4, r19	; 0x04
    2712:	2b 83       	std	Y+3, r18	; 0x03
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	9c 81       	ldd	r25, Y+4	; 0x04
    2718:	81 30       	cpi	r24, 0x01	; 1
    271a:	91 05       	cpc	r25, r1
    271c:	49 f1       	breq	.+82     	; 0x2770 <MDIO_VoidEnablePullUpResistor+0x86>
    271e:	2b 81       	ldd	r18, Y+3	; 0x03
    2720:	3c 81       	ldd	r19, Y+4	; 0x04
    2722:	22 30       	cpi	r18, 0x02	; 2
    2724:	31 05       	cpc	r19, r1
    2726:	2c f4       	brge	.+10     	; 0x2732 <MDIO_VoidEnablePullUpResistor+0x48>
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	9c 81       	ldd	r25, Y+4	; 0x04
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	61 f0       	breq	.+24     	; 0x2748 <MDIO_VoidEnablePullUpResistor+0x5e>
    2730:	5a c0       	rjmp	.+180    	; 0x27e6 <MDIO_VoidEnablePullUpResistor+0xfc>
    2732:	2b 81       	ldd	r18, Y+3	; 0x03
    2734:	3c 81       	ldd	r19, Y+4	; 0x04
    2736:	22 30       	cpi	r18, 0x02	; 2
    2738:	31 05       	cpc	r19, r1
    273a:	71 f1       	breq	.+92     	; 0x2798 <MDIO_VoidEnablePullUpResistor+0xae>
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
    273e:	9c 81       	ldd	r25, Y+4	; 0x04
    2740:	83 30       	cpi	r24, 0x03	; 3
    2742:	91 05       	cpc	r25, r1
    2744:	e9 f1       	breq	.+122    	; 0x27c0 <MDIO_VoidEnablePullUpResistor+0xd6>
    2746:	4f c0       	rjmp	.+158    	; 0x27e6 <MDIO_VoidEnablePullUpResistor+0xfc>
		{
			case DIO_PORTA:SET_BIT(PORTA_REG, Copy_u8Pin); break;
    2748:	ab e3       	ldi	r26, 0x3B	; 59
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	eb e3       	ldi	r30, 0x3B	; 59
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	48 2f       	mov	r20, r24
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	02 2e       	mov	r0, r18
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <MDIO_VoidEnablePullUpResistor+0x7c>
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	0a 94       	dec	r0
    2768:	e2 f7       	brpl	.-8      	; 0x2762 <MDIO_VoidEnablePullUpResistor+0x78>
    276a:	84 2b       	or	r24, r20
    276c:	8c 93       	st	X, r24
    276e:	3b c0       	rjmp	.+118    	; 0x27e6 <MDIO_VoidEnablePullUpResistor+0xfc>
			case DIO_PORTB:SET_BIT(PORTB_REG, Copy_u8Pin); break;
    2770:	a8 e3       	ldi	r26, 0x38	; 56
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	e8 e3       	ldi	r30, 0x38	; 56
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	48 2f       	mov	r20, r24
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	28 2f       	mov	r18, r24
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	02 2e       	mov	r0, r18
    2788:	02 c0       	rjmp	.+4      	; 0x278e <MDIO_VoidEnablePullUpResistor+0xa4>
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	0a 94       	dec	r0
    2790:	e2 f7       	brpl	.-8      	; 0x278a <MDIO_VoidEnablePullUpResistor+0xa0>
    2792:	84 2b       	or	r24, r20
    2794:	8c 93       	st	X, r24
    2796:	27 c0       	rjmp	.+78     	; 0x27e6 <MDIO_VoidEnablePullUpResistor+0xfc>
			case DIO_PORTC:SET_BIT(PORTC_REG, Copy_u8Pin); break;
    2798:	a5 e3       	ldi	r26, 0x35	; 53
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e5 e3       	ldi	r30, 0x35	; 53
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	48 2f       	mov	r20, r24
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	28 2f       	mov	r18, r24
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	02 2e       	mov	r0, r18
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <MDIO_VoidEnablePullUpResistor+0xcc>
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	0a 94       	dec	r0
    27b8:	e2 f7       	brpl	.-8      	; 0x27b2 <MDIO_VoidEnablePullUpResistor+0xc8>
    27ba:	84 2b       	or	r24, r20
    27bc:	8c 93       	st	X, r24
    27be:	13 c0       	rjmp	.+38     	; 0x27e6 <MDIO_VoidEnablePullUpResistor+0xfc>
			case DIO_PORTD:SET_BIT(PORTD_REG, Copy_u8Pin); break;
    27c0:	a2 e3       	ldi	r26, 0x32	; 50
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e2 e3       	ldi	r30, 0x32	; 50
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	48 2f       	mov	r20, r24
    27cc:	8a 81       	ldd	r24, Y+2	; 0x02
    27ce:	28 2f       	mov	r18, r24
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	02 2e       	mov	r0, r18
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <MDIO_VoidEnablePullUpResistor+0xf4>
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	0a 94       	dec	r0
    27e0:	e2 f7       	brpl	.-8      	; 0x27da <MDIO_VoidEnablePullUpResistor+0xf0>
    27e2:	84 2b       	or	r24, r20
    27e4:	8c 93       	st	X, r24
	}
	else
	{
		/*Wrong PIN ID or POrt ID*/
	}
}
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <main>:
#include"HLCD_Interface.h"
#include"HKPD_Interface.h"
#include<avr/delay.h>

int main(void)
{
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	6c 97       	sbiw	r28, 0x1c	; 28
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	f8 94       	cli
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	cd bf       	out	0x3d, r28	; 61

	MDIO_VoidSetPinDirection(DIO_PORTC,DIO_PIN6,1);
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	66 e0       	ldi	r22, 0x06	; 6
    280c:	41 e0       	ldi	r20, 0x01	; 1
    280e:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <MDIO_VoidSetPinDirection>

	while(1)
	{
		MDIO_VoidSetPinValue(DIO_PORTC,DIO_PIN6,1);
    2812:	82 e0       	ldi	r24, 0x02	; 2
    2814:	66 e0       	ldi	r22, 0x06	; 6
    2816:	41 e0       	ldi	r20, 0x01	; 1
    2818:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <MDIO_VoidSetPinValue>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	aa e7       	ldi	r26, 0x7A	; 122
    2822:	b4 e4       	ldi	r27, 0x44	; 68
    2824:	89 8f       	std	Y+25, r24	; 0x19
    2826:	9a 8f       	std	Y+26, r25	; 0x1a
    2828:	ab 8f       	std	Y+27, r26	; 0x1b
    282a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282c:	69 8d       	ldd	r22, Y+25	; 0x19
    282e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2830:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2832:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	4a ef       	ldi	r20, 0xFA	; 250
    283a:	54 e4       	ldi	r21, 0x44	; 68
    283c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	8d 8b       	std	Y+21, r24	; 0x15
    2846:	9e 8b       	std	Y+22, r25	; 0x16
    2848:	af 8b       	std	Y+23, r26	; 0x17
    284a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    284c:	6d 89       	ldd	r22, Y+21	; 0x15
    284e:	7e 89       	ldd	r23, Y+22	; 0x16
    2850:	8f 89       	ldd	r24, Y+23	; 0x17
    2852:	98 8d       	ldd	r25, Y+24	; 0x18
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e8       	ldi	r20, 0x80	; 128
    285a:	5f e3       	ldi	r21, 0x3F	; 63
    285c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2860:	88 23       	and	r24, r24
    2862:	2c f4       	brge	.+10     	; 0x286e <main+0x7a>
		__ticks = 1;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9c 8b       	std	Y+20, r25	; 0x14
    286a:	8b 8b       	std	Y+19, r24	; 0x13
    286c:	3f c0       	rjmp	.+126    	; 0x28ec <main+0xf8>
	else if (__tmp > 65535)
    286e:	6d 89       	ldd	r22, Y+21	; 0x15
    2870:	7e 89       	ldd	r23, Y+22	; 0x16
    2872:	8f 89       	ldd	r24, Y+23	; 0x17
    2874:	98 8d       	ldd	r25, Y+24	; 0x18
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	3f ef       	ldi	r19, 0xFF	; 255
    287a:	4f e7       	ldi	r20, 0x7F	; 127
    287c:	57 e4       	ldi	r21, 0x47	; 71
    287e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2882:	18 16       	cp	r1, r24
    2884:	4c f5       	brge	.+82     	; 0x28d8 <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2886:	69 8d       	ldd	r22, Y+25	; 0x19
    2888:	7a 8d       	ldd	r23, Y+26	; 0x1a
    288a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    288c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e2       	ldi	r20, 0x20	; 32
    2894:	51 e4       	ldi	r21, 0x41	; 65
    2896:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	9c 8b       	std	Y+20, r25	; 0x14
    28ac:	8b 8b       	std	Y+19, r24	; 0x13
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <main+0xda>
    28b0:	88 ec       	ldi	r24, 0xC8	; 200
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9a 8b       	std	Y+18, r25	; 0x12
    28b6:	89 8b       	std	Y+17, r24	; 0x11
    28b8:	89 89       	ldd	r24, Y+17	; 0x11
    28ba:	9a 89       	ldd	r25, Y+18	; 0x12
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <main+0xc8>
    28c0:	9a 8b       	std	Y+18, r25	; 0x12
    28c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c4:	8b 89       	ldd	r24, Y+19	; 0x13
    28c6:	9c 89       	ldd	r25, Y+20	; 0x14
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	9c 8b       	std	Y+20, r25	; 0x14
    28cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ce:	8b 89       	ldd	r24, Y+19	; 0x13
    28d0:	9c 89       	ldd	r25, Y+20	; 0x14
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	69 f7       	brne	.-38     	; 0x28b0 <main+0xbc>
    28d6:	14 c0       	rjmp	.+40     	; 0x2900 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d8:	6d 89       	ldd	r22, Y+21	; 0x15
    28da:	7e 89       	ldd	r23, Y+22	; 0x16
    28dc:	8f 89       	ldd	r24, Y+23	; 0x17
    28de:	98 8d       	ldd	r25, Y+24	; 0x18
    28e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9c 8b       	std	Y+20, r25	; 0x14
    28ea:	8b 8b       	std	Y+19, r24	; 0x13
    28ec:	8b 89       	ldd	r24, Y+19	; 0x13
    28ee:	9c 89       	ldd	r25, Y+20	; 0x14
    28f0:	98 8b       	std	Y+16, r25	; 0x10
    28f2:	8f 87       	std	Y+15, r24	; 0x0f
    28f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f6:	98 89       	ldd	r25, Y+16	; 0x10
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <main+0x104>
    28fc:	98 8b       	std	Y+16, r25	; 0x10
    28fe:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		MDIO_VoidSetPinValue(DIO_PORTC,DIO_PIN6,0);
    2900:	82 e0       	ldi	r24, 0x02	; 2
    2902:	66 e0       	ldi	r22, 0x06	; 6
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <MDIO_VoidSetPinValue>
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	aa e7       	ldi	r26, 0x7A	; 122
    2910:	b4 e4       	ldi	r27, 0x44	; 68
    2912:	8b 87       	std	Y+11, r24	; 0x0b
    2914:	9c 87       	std	Y+12, r25	; 0x0c
    2916:	ad 87       	std	Y+13, r26	; 0x0d
    2918:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291a:	6b 85       	ldd	r22, Y+11	; 0x0b
    291c:	7c 85       	ldd	r23, Y+12	; 0x0c
    291e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2920:	9e 85       	ldd	r25, Y+14	; 0x0e
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	4a ef       	ldi	r20, 0xFA	; 250
    2928:	54 e4       	ldi	r21, 0x44	; 68
    292a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	8f 83       	std	Y+7, r24	; 0x07
    2934:	98 87       	std	Y+8, r25	; 0x08
    2936:	a9 87       	std	Y+9, r26	; 0x09
    2938:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    293a:	6f 81       	ldd	r22, Y+7	; 0x07
    293c:	78 85       	ldd	r23, Y+8	; 0x08
    293e:	89 85       	ldd	r24, Y+9	; 0x09
    2940:	9a 85       	ldd	r25, Y+10	; 0x0a
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e8       	ldi	r20, 0x80	; 128
    2948:	5f e3       	ldi	r21, 0x3F	; 63
    294a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    294e:	88 23       	and	r24, r24
    2950:	2c f4       	brge	.+10     	; 0x295c <main+0x168>
		__ticks = 1;
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9e 83       	std	Y+6, r25	; 0x06
    2958:	8d 83       	std	Y+5, r24	; 0x05
    295a:	3f c0       	rjmp	.+126    	; 0x29da <main+0x1e6>
	else if (__tmp > 65535)
    295c:	6f 81       	ldd	r22, Y+7	; 0x07
    295e:	78 85       	ldd	r23, Y+8	; 0x08
    2960:	89 85       	ldd	r24, Y+9	; 0x09
    2962:	9a 85       	ldd	r25, Y+10	; 0x0a
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	3f ef       	ldi	r19, 0xFF	; 255
    2968:	4f e7       	ldi	r20, 0x7F	; 127
    296a:	57 e4       	ldi	r21, 0x47	; 71
    296c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2970:	18 16       	cp	r1, r24
    2972:	4c f5       	brge	.+82     	; 0x29c6 <main+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2974:	6b 85       	ldd	r22, Y+11	; 0x0b
    2976:	7c 85       	ldd	r23, Y+12	; 0x0c
    2978:	8d 85       	ldd	r24, Y+13	; 0x0d
    297a:	9e 85       	ldd	r25, Y+14	; 0x0e
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e2       	ldi	r20, 0x20	; 32
    2982:	51 e4       	ldi	r21, 0x41	; 65
    2984:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	9e 83       	std	Y+6, r25	; 0x06
    299a:	8d 83       	std	Y+5, r24	; 0x05
    299c:	0f c0       	rjmp	.+30     	; 0x29bc <main+0x1c8>
    299e:	88 ec       	ldi	r24, 0xC8	; 200
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	9c 83       	std	Y+4, r25	; 0x04
    29a4:	8b 83       	std	Y+3, r24	; 0x03
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	9c 81       	ldd	r25, Y+4	; 0x04
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <main+0x1b6>
    29ae:	9c 83       	std	Y+4, r25	; 0x04
    29b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b2:	8d 81       	ldd	r24, Y+5	; 0x05
    29b4:	9e 81       	ldd	r25, Y+6	; 0x06
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	9e 83       	std	Y+6, r25	; 0x06
    29ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	9e 81       	ldd	r25, Y+6	; 0x06
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	69 f7       	brne	.-38     	; 0x299e <main+0x1aa>
    29c4:	26 cf       	rjmp	.-436    	; 0x2812 <main+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c6:	6f 81       	ldd	r22, Y+7	; 0x07
    29c8:	78 85       	ldd	r23, Y+8	; 0x08
    29ca:	89 85       	ldd	r24, Y+9	; 0x09
    29cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	9e 83       	std	Y+6, r25	; 0x06
    29d8:	8d 83       	std	Y+5, r24	; 0x05
    29da:	8d 81       	ldd	r24, Y+5	; 0x05
    29dc:	9e 81       	ldd	r25, Y+6	; 0x06
    29de:	9a 83       	std	Y+2, r25	; 0x02
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	9a 81       	ldd	r25, Y+2	; 0x02
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <main+0x1f2>
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	11 cf       	rjmp	.-478    	; 0x2812 <main+0x1e>

000029f0 <__mulsi3>:
    29f0:	62 9f       	mul	r22, r18
    29f2:	d0 01       	movw	r26, r0
    29f4:	73 9f       	mul	r23, r19
    29f6:	f0 01       	movw	r30, r0
    29f8:	82 9f       	mul	r24, r18
    29fa:	e0 0d       	add	r30, r0
    29fc:	f1 1d       	adc	r31, r1
    29fe:	64 9f       	mul	r22, r20
    2a00:	e0 0d       	add	r30, r0
    2a02:	f1 1d       	adc	r31, r1
    2a04:	92 9f       	mul	r25, r18
    2a06:	f0 0d       	add	r31, r0
    2a08:	83 9f       	mul	r24, r19
    2a0a:	f0 0d       	add	r31, r0
    2a0c:	74 9f       	mul	r23, r20
    2a0e:	f0 0d       	add	r31, r0
    2a10:	65 9f       	mul	r22, r21
    2a12:	f0 0d       	add	r31, r0
    2a14:	99 27       	eor	r25, r25
    2a16:	72 9f       	mul	r23, r18
    2a18:	b0 0d       	add	r27, r0
    2a1a:	e1 1d       	adc	r30, r1
    2a1c:	f9 1f       	adc	r31, r25
    2a1e:	63 9f       	mul	r22, r19
    2a20:	b0 0d       	add	r27, r0
    2a22:	e1 1d       	adc	r30, r1
    2a24:	f9 1f       	adc	r31, r25
    2a26:	bd 01       	movw	r22, r26
    2a28:	cf 01       	movw	r24, r30
    2a2a:	11 24       	eor	r1, r1
    2a2c:	08 95       	ret

00002a2e <__udivmodsi4>:
    2a2e:	a1 e2       	ldi	r26, 0x21	; 33
    2a30:	1a 2e       	mov	r1, r26
    2a32:	aa 1b       	sub	r26, r26
    2a34:	bb 1b       	sub	r27, r27
    2a36:	fd 01       	movw	r30, r26
    2a38:	0d c0       	rjmp	.+26     	; 0x2a54 <__udivmodsi4_ep>

00002a3a <__udivmodsi4_loop>:
    2a3a:	aa 1f       	adc	r26, r26
    2a3c:	bb 1f       	adc	r27, r27
    2a3e:	ee 1f       	adc	r30, r30
    2a40:	ff 1f       	adc	r31, r31
    2a42:	a2 17       	cp	r26, r18
    2a44:	b3 07       	cpc	r27, r19
    2a46:	e4 07       	cpc	r30, r20
    2a48:	f5 07       	cpc	r31, r21
    2a4a:	20 f0       	brcs	.+8      	; 0x2a54 <__udivmodsi4_ep>
    2a4c:	a2 1b       	sub	r26, r18
    2a4e:	b3 0b       	sbc	r27, r19
    2a50:	e4 0b       	sbc	r30, r20
    2a52:	f5 0b       	sbc	r31, r21

00002a54 <__udivmodsi4_ep>:
    2a54:	66 1f       	adc	r22, r22
    2a56:	77 1f       	adc	r23, r23
    2a58:	88 1f       	adc	r24, r24
    2a5a:	99 1f       	adc	r25, r25
    2a5c:	1a 94       	dec	r1
    2a5e:	69 f7       	brne	.-38     	; 0x2a3a <__udivmodsi4_loop>
    2a60:	60 95       	com	r22
    2a62:	70 95       	com	r23
    2a64:	80 95       	com	r24
    2a66:	90 95       	com	r25
    2a68:	9b 01       	movw	r18, r22
    2a6a:	ac 01       	movw	r20, r24
    2a6c:	bd 01       	movw	r22, r26
    2a6e:	cf 01       	movw	r24, r30
    2a70:	08 95       	ret

00002a72 <__prologue_saves__>:
    2a72:	2f 92       	push	r2
    2a74:	3f 92       	push	r3
    2a76:	4f 92       	push	r4
    2a78:	5f 92       	push	r5
    2a7a:	6f 92       	push	r6
    2a7c:	7f 92       	push	r7
    2a7e:	8f 92       	push	r8
    2a80:	9f 92       	push	r9
    2a82:	af 92       	push	r10
    2a84:	bf 92       	push	r11
    2a86:	cf 92       	push	r12
    2a88:	df 92       	push	r13
    2a8a:	ef 92       	push	r14
    2a8c:	ff 92       	push	r15
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	ca 1b       	sub	r28, r26
    2a9c:	db 0b       	sbc	r29, r27
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	09 94       	ijmp

00002aaa <__epilogue_restores__>:
    2aaa:	2a 88       	ldd	r2, Y+18	; 0x12
    2aac:	39 88       	ldd	r3, Y+17	; 0x11
    2aae:	48 88       	ldd	r4, Y+16	; 0x10
    2ab0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ab2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ab4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ab6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ab8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aba:	aa 84       	ldd	r10, Y+10	; 0x0a
    2abc:	b9 84       	ldd	r11, Y+9	; 0x09
    2abe:	c8 84       	ldd	r12, Y+8	; 0x08
    2ac0:	df 80       	ldd	r13, Y+7	; 0x07
    2ac2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ac4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ac6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ac8:	1b 81       	ldd	r17, Y+3	; 0x03
    2aca:	aa 81       	ldd	r26, Y+2	; 0x02
    2acc:	b9 81       	ldd	r27, Y+1	; 0x01
    2ace:	ce 0f       	add	r28, r30
    2ad0:	d1 1d       	adc	r29, r1
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	ed 01       	movw	r28, r26
    2ade:	08 95       	ret

00002ae0 <_exit>:
    2ae0:	f8 94       	cli

00002ae2 <__stop_program>:
    2ae2:	ff cf       	rjmp	.-2      	; 0x2ae2 <__stop_program>
