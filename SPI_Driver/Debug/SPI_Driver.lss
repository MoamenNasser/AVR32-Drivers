
SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  000029b8  00002a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001f68  00000000  00000000  00002b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e0b  00000000  00000000  00004aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  000058ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  00005a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  00005bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  00007c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  00008d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00009d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  00009f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000aadc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 59 14 	call	0x28b2	; 0x28b2 <main>
      7a:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 af 14 	jmp	0x295e	; 0x295e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 af 14 	jmp	0x295e	; 0x295e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 af 14 	jmp	0x295e	; 0x295e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 af 14 	jmp	0x295e	; 0x295e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 af 14 	jmp	0x295e	; 0x295e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	e8 59       	subi	r30, 0x98	; 152
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <HLCD_VoidSendChar>:
 *
 *					This Function send a character to the LCD
 *
 **********************************************************************/
void HLCD_VoidSendChar(u8 Copy_u8Data)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	6d 97       	sbiw	r28, 0x1d	; 29
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	8d 8f       	std	Y+29, r24	; 0x1d
	/*								set RS pin							*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RS_PIN,DIO_PIN_HIGH);
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	0e 94 19 11 	call	0x2232	; 0x2232 <MDIO_VoidSetPinValue>
	/*								clear RW pin						*/
	/*				here we set the pin value to port B pin 1 to 0v		*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RW_PIN,DIO_PIN_LOW);
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	0e 94 19 11 	call	0x2232	; 0x2232 <MDIO_VoidSetPinValue>

	/*				here we set the port C to the given data			*/
	MDIO_VoidSetPortValue(HLCD_DATA_PORT, Copy_u8Data);
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	6d 8d       	ldd	r22, Y+29	; 0x1d
     cbe:	0e 94 e6 12 	call	0x25cc	; 0x25cc <MDIO_VoidSetPortValue>
	/*				set E pin to HIGH									*/
	/*				here we set the pin value to port B pin 0 to 5v		*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_E_PIN,DIO_PIN_HIGH);
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	62 e0       	ldi	r22, 0x02	; 2
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	0e 94 19 11 	call	0x2232	; 0x2232 <MDIO_VoidSetPinValue>
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	a0 e8       	ldi	r26, 0x80	; 128
     cd2:	bf e3       	ldi	r27, 0x3F	; 63
     cd4:	89 8f       	std	Y+25, r24	; 0x19
     cd6:	9a 8f       	std	Y+26, r25	; 0x1a
     cd8:	ab 8f       	std	Y+27, r26	; 0x1b
     cda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cdc:	69 8d       	ldd	r22, Y+25	; 0x19
     cde:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ce0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ce2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	4a ef       	ldi	r20, 0xFA	; 250
     cea:	54 e4       	ldi	r21, 0x44	; 68
     cec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	8d 8b       	std	Y+21, r24	; 0x15
     cf6:	9e 8b       	std	Y+22, r25	; 0x16
     cf8:	af 8b       	std	Y+23, r26	; 0x17
     cfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cfc:	6d 89       	ldd	r22, Y+21	; 0x15
     cfe:	7e 89       	ldd	r23, Y+22	; 0x16
     d00:	8f 89       	ldd	r24, Y+23	; 0x17
     d02:	98 8d       	ldd	r25, Y+24	; 0x18
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e8       	ldi	r20, 0x80	; 128
     d0a:	5f e3       	ldi	r21, 0x3F	; 63
     d0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d10:	88 23       	and	r24, r24
     d12:	2c f4       	brge	.+10     	; 0xd1e <HLCD_VoidSendChar+0x8e>
		__ticks = 1;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	9c 8b       	std	Y+20, r25	; 0x14
     d1a:	8b 8b       	std	Y+19, r24	; 0x13
     d1c:	3f c0       	rjmp	.+126    	; 0xd9c <HLCD_VoidSendChar+0x10c>
	else if (__tmp > 65535)
     d1e:	6d 89       	ldd	r22, Y+21	; 0x15
     d20:	7e 89       	ldd	r23, Y+22	; 0x16
     d22:	8f 89       	ldd	r24, Y+23	; 0x17
     d24:	98 8d       	ldd	r25, Y+24	; 0x18
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	3f ef       	ldi	r19, 0xFF	; 255
     d2a:	4f e7       	ldi	r20, 0x7F	; 127
     d2c:	57 e4       	ldi	r21, 0x47	; 71
     d2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d32:	18 16       	cp	r1, r24
     d34:	4c f5       	brge	.+82     	; 0xd88 <HLCD_VoidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d36:	69 8d       	ldd	r22, Y+25	; 0x19
     d38:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e2       	ldi	r20, 0x20	; 32
     d44:	51 e4       	ldi	r21, 0x41	; 65
     d46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	9c 8b       	std	Y+20, r25	; 0x14
     d5c:	8b 8b       	std	Y+19, r24	; 0x13
     d5e:	0f c0       	rjmp	.+30     	; 0xd7e <HLCD_VoidSendChar+0xee>
     d60:	88 ec       	ldi	r24, 0xC8	; 200
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	9a 8b       	std	Y+18, r25	; 0x12
     d66:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d68:	89 89       	ldd	r24, Y+17	; 0x11
     d6a:	9a 89       	ldd	r25, Y+18	; 0x12
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <HLCD_VoidSendChar+0xdc>
     d70:	9a 8b       	std	Y+18, r25	; 0x12
     d72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d74:	8b 89       	ldd	r24, Y+19	; 0x13
     d76:	9c 89       	ldd	r25, Y+20	; 0x14
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	9c 8b       	std	Y+20, r25	; 0x14
     d7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7e:	8b 89       	ldd	r24, Y+19	; 0x13
     d80:	9c 89       	ldd	r25, Y+20	; 0x14
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	69 f7       	brne	.-38     	; 0xd60 <HLCD_VoidSendChar+0xd0>
     d86:	14 c0       	rjmp	.+40     	; 0xdb0 <HLCD_VoidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d88:	6d 89       	ldd	r22, Y+21	; 0x15
     d8a:	7e 89       	ldd	r23, Y+22	; 0x16
     d8c:	8f 89       	ldd	r24, Y+23	; 0x17
     d8e:	98 8d       	ldd	r25, Y+24	; 0x18
     d90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	9c 8b       	std	Y+20, r25	; 0x14
     d9a:	8b 8b       	std	Y+19, r24	; 0x13
     d9c:	8b 89       	ldd	r24, Y+19	; 0x13
     d9e:	9c 89       	ldd	r25, Y+20	; 0x14
     da0:	98 8b       	std	Y+16, r25	; 0x10
     da2:	8f 87       	std	Y+15, r24	; 0x0f
     da4:	8f 85       	ldd	r24, Y+15	; 0x0f
     da6:	98 89       	ldd	r25, Y+16	; 0x10
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <HLCD_VoidSendChar+0x118>
     dac:	98 8b       	std	Y+16, r25	; 0x10
     dae:	8f 87       	std	Y+15, r24	; 0x0f
	/*				Delay Function for 10 microsecond					*/
	_delay_ms(1);
	/*							clear E pin								*/
	/*		here we set the pin value to port B pin 2 to 5v				*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_E_PIN,DIO_PIN_LOW);
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	62 e0       	ldi	r22, 0x02	; 2
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	0e 94 19 11 	call	0x2232	; 0x2232 <MDIO_VoidSetPinValue>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	a0 e8       	ldi	r26, 0x80	; 128
     dc0:	b0 e4       	ldi	r27, 0x40	; 64
     dc2:	8b 87       	std	Y+11, r24	; 0x0b
     dc4:	9c 87       	std	Y+12, r25	; 0x0c
     dc6:	ad 87       	std	Y+13, r26	; 0x0d
     dc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dca:	6b 85       	ldd	r22, Y+11	; 0x0b
     dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dce:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	4a ef       	ldi	r20, 0xFA	; 250
     dd8:	54 e4       	ldi	r21, 0x44	; 68
     dda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	8f 83       	std	Y+7, r24	; 0x07
     de4:	98 87       	std	Y+8, r25	; 0x08
     de6:	a9 87       	std	Y+9, r26	; 0x09
     de8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dea:	6f 81       	ldd	r22, Y+7	; 0x07
     dec:	78 85       	ldd	r23, Y+8	; 0x08
     dee:	89 85       	ldd	r24, Y+9	; 0x09
     df0:	9a 85       	ldd	r25, Y+10	; 0x0a
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e8       	ldi	r20, 0x80	; 128
     df8:	5f e3       	ldi	r21, 0x3F	; 63
     dfa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     dfe:	88 23       	and	r24, r24
     e00:	2c f4       	brge	.+10     	; 0xe0c <HLCD_VoidSendChar+0x17c>
		__ticks = 1;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	9e 83       	std	Y+6, r25	; 0x06
     e08:	8d 83       	std	Y+5, r24	; 0x05
     e0a:	3f c0       	rjmp	.+126    	; 0xe8a <HLCD_VoidSendChar+0x1fa>
	else if (__tmp > 65535)
     e0c:	6f 81       	ldd	r22, Y+7	; 0x07
     e0e:	78 85       	ldd	r23, Y+8	; 0x08
     e10:	89 85       	ldd	r24, Y+9	; 0x09
     e12:	9a 85       	ldd	r25, Y+10	; 0x0a
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	3f ef       	ldi	r19, 0xFF	; 255
     e18:	4f e7       	ldi	r20, 0x7F	; 127
     e1a:	57 e4       	ldi	r21, 0x47	; 71
     e1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e20:	18 16       	cp	r1, r24
     e22:	4c f5       	brge	.+82     	; 0xe76 <HLCD_VoidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e24:	6b 85       	ldd	r22, Y+11	; 0x0b
     e26:	7c 85       	ldd	r23, Y+12	; 0x0c
     e28:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e2       	ldi	r20, 0x20	; 32
     e32:	51 e4       	ldi	r21, 0x41	; 65
     e34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	bc 01       	movw	r22, r24
     e3e:	cd 01       	movw	r24, r26
     e40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	9e 83       	std	Y+6, r25	; 0x06
     e4a:	8d 83       	std	Y+5, r24	; 0x05
     e4c:	0f c0       	rjmp	.+30     	; 0xe6c <HLCD_VoidSendChar+0x1dc>
     e4e:	88 ec       	ldi	r24, 0xC8	; 200
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9c 83       	std	Y+4, r25	; 0x04
     e54:	8b 83       	std	Y+3, r24	; 0x03
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <HLCD_VoidSendChar+0x1ca>
     e5e:	9c 83       	std	Y+4, r25	; 0x04
     e60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
     e64:	9e 81       	ldd	r25, Y+6	; 0x06
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	9e 83       	std	Y+6, r25	; 0x06
     e6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	9e 81       	ldd	r25, Y+6	; 0x06
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	69 f7       	brne	.-38     	; 0xe4e <HLCD_VoidSendChar+0x1be>
     e74:	14 c0       	rjmp	.+40     	; 0xe9e <HLCD_VoidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e76:	6f 81       	ldd	r22, Y+7	; 0x07
     e78:	78 85       	ldd	r23, Y+8	; 0x08
     e7a:	89 85       	ldd	r24, Y+9	; 0x09
     e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	9e 83       	std	Y+6, r25	; 0x06
     e88:	8d 83       	std	Y+5, r24	; 0x05
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	9e 81       	ldd	r25, Y+6	; 0x06
     e8e:	9a 83       	std	Y+2, r25	; 0x02
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <HLCD_VoidSendChar+0x206>
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
	/*Delay Function for 1ms to make sure that the LCD complete the task*/
	_delay_ms(4);

}
     e9e:	6d 96       	adiw	r28, 0x1d	; 29
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <HLCD_VoidSendCommand>:
 *
 *		This Function send a command to the LCD
 *
 ************************************************************************/
void HLCD_VoidSendCommand(u8 Copy_u8Command)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	6d 97       	sbiw	r28, 0x1d	; 29
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	8d 8f       	std	Y+29, r24	; 0x1d
	/*					clear Rs pin									*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RS_PIN,DIO_PIN_LOW);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	0e 94 19 11 	call	0x2232	; 0x2232 <MDIO_VoidSetPinValue>
	/*					clear RW pin									*/
	/*			here we set the pin value to port B pin 1 to 0v			*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RW_PIN,DIO_PIN_LOW);
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	61 e0       	ldi	r22, 0x01	; 1
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	0e 94 19 11 	call	0x2232	; 0x2232 <MDIO_VoidSetPinValue>

	/*			Delay Function for 10 microsecond						*/
	/*			here we set the port C to the given data				*/
	MDIO_VoidSetPortValue(HLCD_DATA_PORT, Copy_u8Command);
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	6d 8d       	ldd	r22, Y+29	; 0x1d
     ede:	0e 94 e6 12 	call	0x25cc	; 0x25cc <MDIO_VoidSetPortValue>
	/*				set E pin to HIGH									*/
	/*			here we set the pin value to port B pin 0 to 5v			*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_E_PIN,DIO_PIN_HIGH);
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	62 e0       	ldi	r22, 0x02	; 2
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	0e 94 19 11 	call	0x2232	; 0x2232 <MDIO_VoidSetPinValue>
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	a0 e8       	ldi	r26, 0x80	; 128
     ef2:	bf e3       	ldi	r27, 0x3F	; 63
     ef4:	89 8f       	std	Y+25, r24	; 0x19
     ef6:	9a 8f       	std	Y+26, r25	; 0x1a
     ef8:	ab 8f       	std	Y+27, r26	; 0x1b
     efa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efc:	69 8d       	ldd	r22, Y+25	; 0x19
     efe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	4a ef       	ldi	r20, 0xFA	; 250
     f0a:	54 e4       	ldi	r21, 0x44	; 68
     f0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	8d 8b       	std	Y+21, r24	; 0x15
     f16:	9e 8b       	std	Y+22, r25	; 0x16
     f18:	af 8b       	std	Y+23, r26	; 0x17
     f1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f1c:	6d 89       	ldd	r22, Y+21	; 0x15
     f1e:	7e 89       	ldd	r23, Y+22	; 0x16
     f20:	8f 89       	ldd	r24, Y+23	; 0x17
     f22:	98 8d       	ldd	r25, Y+24	; 0x18
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e8       	ldi	r20, 0x80	; 128
     f2a:	5f e3       	ldi	r21, 0x3F	; 63
     f2c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f30:	88 23       	and	r24, r24
     f32:	2c f4       	brge	.+10     	; 0xf3e <HLCD_VoidSendCommand+0x8e>
		__ticks = 1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	9c 8b       	std	Y+20, r25	; 0x14
     f3a:	8b 8b       	std	Y+19, r24	; 0x13
     f3c:	3f c0       	rjmp	.+126    	; 0xfbc <HLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
     f3e:	6d 89       	ldd	r22, Y+21	; 0x15
     f40:	7e 89       	ldd	r23, Y+22	; 0x16
     f42:	8f 89       	ldd	r24, Y+23	; 0x17
     f44:	98 8d       	ldd	r25, Y+24	; 0x18
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	3f ef       	ldi	r19, 0xFF	; 255
     f4a:	4f e7       	ldi	r20, 0x7F	; 127
     f4c:	57 e4       	ldi	r21, 0x47	; 71
     f4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f52:	18 16       	cp	r1, r24
     f54:	4c f5       	brge	.+82     	; 0xfa8 <HLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f56:	69 8d       	ldd	r22, Y+25	; 0x19
     f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e2       	ldi	r20, 0x20	; 32
     f64:	51 e4       	ldi	r21, 0x41	; 65
     f66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	bc 01       	movw	r22, r24
     f70:	cd 01       	movw	r24, r26
     f72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	9c 8b       	std	Y+20, r25	; 0x14
     f7c:	8b 8b       	std	Y+19, r24	; 0x13
     f7e:	0f c0       	rjmp	.+30     	; 0xf9e <HLCD_VoidSendCommand+0xee>
     f80:	88 ec       	ldi	r24, 0xC8	; 200
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	9a 8b       	std	Y+18, r25	; 0x12
     f86:	89 8b       	std	Y+17, r24	; 0x11
     f88:	89 89       	ldd	r24, Y+17	; 0x11
     f8a:	9a 89       	ldd	r25, Y+18	; 0x12
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <HLCD_VoidSendCommand+0xdc>
     f90:	9a 8b       	std	Y+18, r25	; 0x12
     f92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f94:	8b 89       	ldd	r24, Y+19	; 0x13
     f96:	9c 89       	ldd	r25, Y+20	; 0x14
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	9c 8b       	std	Y+20, r25	; 0x14
     f9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9e:	8b 89       	ldd	r24, Y+19	; 0x13
     fa0:	9c 89       	ldd	r25, Y+20	; 0x14
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	69 f7       	brne	.-38     	; 0xf80 <HLCD_VoidSendCommand+0xd0>
     fa6:	14 c0       	rjmp	.+40     	; 0xfd0 <HLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa8:	6d 89       	ldd	r22, Y+21	; 0x15
     faa:	7e 89       	ldd	r23, Y+22	; 0x16
     fac:	8f 89       	ldd	r24, Y+23	; 0x17
     fae:	98 8d       	ldd	r25, Y+24	; 0x18
     fb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	8b 89       	ldd	r24, Y+19	; 0x13
     fbe:	9c 89       	ldd	r25, Y+20	; 0x14
     fc0:	98 8b       	std	Y+16, r25	; 0x10
     fc2:	8f 87       	std	Y+15, r24	; 0x0f
     fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc6:	98 89       	ldd	r25, Y+16	; 0x10
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <HLCD_VoidSendCommand+0x118>
     fcc:	98 8b       	std	Y+16, r25	; 0x10
     fce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*					clear E pin										*/
	/*			here we set the pin value to port B pin 2 to 5v			*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_E_PIN,DIO_PIN_LOW);
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	62 e0       	ldi	r22, 0x02	; 2
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	0e 94 19 11 	call	0x2232	; 0x2232 <MDIO_VoidSetPinValue>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a0 e8       	ldi	r26, 0x80	; 128
     fe0:	b0 e4       	ldi	r27, 0x40	; 64
     fe2:	8b 87       	std	Y+11, r24	; 0x0b
     fe4:	9c 87       	std	Y+12, r25	; 0x0c
     fe6:	ad 87       	std	Y+13, r26	; 0x0d
     fe8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fea:	6b 85       	ldd	r22, Y+11	; 0x0b
     fec:	7c 85       	ldd	r23, Y+12	; 0x0c
     fee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4a ef       	ldi	r20, 0xFA	; 250
     ff8:	54 e4       	ldi	r21, 0x44	; 68
     ffa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	8f 83       	std	Y+7, r24	; 0x07
    1004:	98 87       	std	Y+8, r25	; 0x08
    1006:	a9 87       	std	Y+9, r26	; 0x09
    1008:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    100a:	6f 81       	ldd	r22, Y+7	; 0x07
    100c:	78 85       	ldd	r23, Y+8	; 0x08
    100e:	89 85       	ldd	r24, Y+9	; 0x09
    1010:	9a 85       	ldd	r25, Y+10	; 0x0a
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	40 e8       	ldi	r20, 0x80	; 128
    1018:	5f e3       	ldi	r21, 0x3F	; 63
    101a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    101e:	88 23       	and	r24, r24
    1020:	2c f4       	brge	.+10     	; 0x102c <HLCD_VoidSendCommand+0x17c>
		__ticks = 1;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9e 83       	std	Y+6, r25	; 0x06
    1028:	8d 83       	std	Y+5, r24	; 0x05
    102a:	3f c0       	rjmp	.+126    	; 0x10aa <HLCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    102c:	6f 81       	ldd	r22, Y+7	; 0x07
    102e:	78 85       	ldd	r23, Y+8	; 0x08
    1030:	89 85       	ldd	r24, Y+9	; 0x09
    1032:	9a 85       	ldd	r25, Y+10	; 0x0a
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	3f ef       	ldi	r19, 0xFF	; 255
    1038:	4f e7       	ldi	r20, 0x7F	; 127
    103a:	57 e4       	ldi	r21, 0x47	; 71
    103c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1040:	18 16       	cp	r1, r24
    1042:	4c f5       	brge	.+82     	; 0x1096 <HLCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1044:	6b 85       	ldd	r22, Y+11	; 0x0b
    1046:	7c 85       	ldd	r23, Y+12	; 0x0c
    1048:	8d 85       	ldd	r24, Y+13	; 0x0d
    104a:	9e 85       	ldd	r25, Y+14	; 0x0e
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e2       	ldi	r20, 0x20	; 32
    1052:	51 e4       	ldi	r21, 0x41	; 65
    1054:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	0f c0       	rjmp	.+30     	; 0x108c <HLCD_VoidSendCommand+0x1dc>
    106e:	88 ec       	ldi	r24, 0xC8	; 200
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9c 83       	std	Y+4, r25	; 0x04
    1074:	8b 83       	std	Y+3, r24	; 0x03
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <HLCD_VoidSendCommand+0x1ca>
    107e:	9c 83       	std	Y+4, r25	; 0x04
    1080:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	9e 83       	std	Y+6, r25	; 0x06
    108a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	9e 81       	ldd	r25, Y+6	; 0x06
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	69 f7       	brne	.-38     	; 0x106e <HLCD_VoidSendCommand+0x1be>
    1094:	14 c0       	rjmp	.+40     	; 0x10be <HLCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1096:	6f 81       	ldd	r22, Y+7	; 0x07
    1098:	78 85       	ldd	r23, Y+8	; 0x08
    109a:	89 85       	ldd	r24, Y+9	; 0x09
    109c:	9a 85       	ldd	r25, Y+10	; 0x0a
    109e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	9e 83       	std	Y+6, r25	; 0x06
    10a8:	8d 83       	std	Y+5, r24	; 0x05
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9e 81       	ldd	r25, Y+6	; 0x06
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <HLCD_VoidSendCommand+0x206>
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	89 83       	std	Y+1, r24	; 0x01
	/*Delay Function for 1ms to make sure that the LCD complete the task*/
	_delay_ms(4);
}
    10be:	6d 96       	adiw	r28, 0x1d	; 29
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <HLCD_enuInit>:
 *
 * 		Here we initialize each port direction and every pin we need
 *
 **********************************************************************/
void HLCD_enuInit(void)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	e8 97       	sbiw	r28, 0x38	; 56
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
	MDIO_VoidSetPortDirection(DIO_PORTC,DIO_PORT_HIGH);
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	6f ef       	ldi	r22, 0xFF	; 255
    10e8:	0e 94 a5 12 	call	0x254a	; 0x254a <MDIO_VoidSetPortDirection>
	/**/
	MDIO_VoidSetPinDirection(DIO_PORTB,DIO_PIN0,DIO_PIN_HIGH);
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	41 e0       	ldi	r20, 0x01	; 1
    10f2:	0e 94 11 10 	call	0x2022	; 0x2022 <MDIO_VoidSetPinDirection>
	/**/
	MDIO_VoidSetPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_HIGH);
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	0e 94 11 10 	call	0x2022	; 0x2022 <MDIO_VoidSetPinDirection>
	/**/
	MDIO_VoidSetPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_HIGH);
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	62 e0       	ldi	r22, 0x02	; 2
    1104:	41 e0       	ldi	r20, 0x01	; 1
    1106:	0e 94 11 10 	call	0x2022	; 0x2022 <MDIO_VoidSetPinDirection>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a8 e4       	ldi	r26, 0x48	; 72
    1110:	b2 e4       	ldi	r27, 0x42	; 66
    1112:	8d ab       	std	Y+53, r24	; 0x35
    1114:	9e ab       	std	Y+54, r25	; 0x36
    1116:	af ab       	std	Y+55, r26	; 0x37
    1118:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111a:	6d a9       	ldd	r22, Y+53	; 0x35
    111c:	7e a9       	ldd	r23, Y+54	; 0x36
    111e:	8f a9       	ldd	r24, Y+55	; 0x37
    1120:	98 ad       	ldd	r25, Y+56	; 0x38
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	4a ef       	ldi	r20, 0xFA	; 250
    1128:	54 e4       	ldi	r21, 0x44	; 68
    112a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	89 ab       	std	Y+49, r24	; 0x31
    1134:	9a ab       	std	Y+50, r25	; 0x32
    1136:	ab ab       	std	Y+51, r26	; 0x33
    1138:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    113a:	69 a9       	ldd	r22, Y+49	; 0x31
    113c:	7a a9       	ldd	r23, Y+50	; 0x32
    113e:	8b a9       	ldd	r24, Y+51	; 0x33
    1140:	9c a9       	ldd	r25, Y+52	; 0x34
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e8       	ldi	r20, 0x80	; 128
    1148:	5f e3       	ldi	r21, 0x3F	; 63
    114a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    114e:	88 23       	and	r24, r24
    1150:	2c f4       	brge	.+10     	; 0x115c <HLCD_enuInit+0x8c>
		__ticks = 1;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	98 ab       	std	Y+48, r25	; 0x30
    1158:	8f a7       	std	Y+47, r24	; 0x2f
    115a:	3f c0       	rjmp	.+126    	; 0x11da <HLCD_enuInit+0x10a>
	else if (__tmp > 65535)
    115c:	69 a9       	ldd	r22, Y+49	; 0x31
    115e:	7a a9       	ldd	r23, Y+50	; 0x32
    1160:	8b a9       	ldd	r24, Y+51	; 0x33
    1162:	9c a9       	ldd	r25, Y+52	; 0x34
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	3f ef       	ldi	r19, 0xFF	; 255
    1168:	4f e7       	ldi	r20, 0x7F	; 127
    116a:	57 e4       	ldi	r21, 0x47	; 71
    116c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1170:	18 16       	cp	r1, r24
    1172:	4c f5       	brge	.+82     	; 0x11c6 <HLCD_enuInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1174:	6d a9       	ldd	r22, Y+53	; 0x35
    1176:	7e a9       	ldd	r23, Y+54	; 0x36
    1178:	8f a9       	ldd	r24, Y+55	; 0x37
    117a:	98 ad       	ldd	r25, Y+56	; 0x38
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e2       	ldi	r20, 0x20	; 32
    1182:	51 e4       	ldi	r21, 0x41	; 65
    1184:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	bc 01       	movw	r22, r24
    118e:	cd 01       	movw	r24, r26
    1190:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	98 ab       	std	Y+48, r25	; 0x30
    119a:	8f a7       	std	Y+47, r24	; 0x2f
    119c:	0f c0       	rjmp	.+30     	; 0x11bc <HLCD_enuInit+0xec>
    119e:	88 ec       	ldi	r24, 0xC8	; 200
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	9e a7       	std	Y+46, r25	; 0x2e
    11a4:	8d a7       	std	Y+45, r24	; 0x2d
    11a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    11a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <HLCD_enuInit+0xda>
    11ae:	9e a7       	std	Y+46, r25	; 0x2e
    11b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b4:	98 a9       	ldd	r25, Y+48	; 0x30
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	98 ab       	std	Y+48, r25	; 0x30
    11ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    11be:	98 a9       	ldd	r25, Y+48	; 0x30
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	69 f7       	brne	.-38     	; 0x119e <HLCD_enuInit+0xce>
    11c4:	14 c0       	rjmp	.+40     	; 0x11ee <HLCD_enuInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c6:	69 a9       	ldd	r22, Y+49	; 0x31
    11c8:	7a a9       	ldd	r23, Y+50	; 0x32
    11ca:	8b a9       	ldd	r24, Y+51	; 0x33
    11cc:	9c a9       	ldd	r25, Y+52	; 0x34
    11ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	98 ab       	std	Y+48, r25	; 0x30
    11d8:	8f a7       	std	Y+47, r24	; 0x2f
    11da:	8f a5       	ldd	r24, Y+47	; 0x2f
    11dc:	98 a9       	ldd	r25, Y+48	; 0x30
    11de:	9c a7       	std	Y+44, r25	; 0x2c
    11e0:	8b a7       	std	Y+43, r24	; 0x2b
    11e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <HLCD_enuInit+0x116>
    11ea:	9c a7       	std	Y+44, r25	; 0x2c
    11ec:	8b a7       	std	Y+43, r24	; 0x2b
#if HLCD_INIT_MODE == HLCD_8_BIT_MODE

		/*					Delay for 30ms									*/
		_delay_ms(50);
		/*					set Port c to output							*/
		HLCD_VoidSendCommand(0b00111000);
    11ee:	88 e3       	ldi	r24, 0x38	; 56
    11f0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	a0 e8       	ldi	r26, 0x80	; 128
    11fa:	bf e3       	ldi	r27, 0x3F	; 63
    11fc:	8f a3       	std	Y+39, r24	; 0x27
    11fe:	98 a7       	std	Y+40, r25	; 0x28
    1200:	a9 a7       	std	Y+41, r26	; 0x29
    1202:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1204:	6f a1       	ldd	r22, Y+39	; 0x27
    1206:	78 a5       	ldd	r23, Y+40	; 0x28
    1208:	89 a5       	ldd	r24, Y+41	; 0x29
    120a:	9a a5       	ldd	r25, Y+42	; 0x2a
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	4a ef       	ldi	r20, 0xFA	; 250
    1212:	54 e4       	ldi	r21, 0x44	; 68
    1214:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	8b a3       	std	Y+35, r24	; 0x23
    121e:	9c a3       	std	Y+36, r25	; 0x24
    1220:	ad a3       	std	Y+37, r26	; 0x25
    1222:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1224:	6b a1       	ldd	r22, Y+35	; 0x23
    1226:	7c a1       	ldd	r23, Y+36	; 0x24
    1228:	8d a1       	ldd	r24, Y+37	; 0x25
    122a:	9e a1       	ldd	r25, Y+38	; 0x26
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e8       	ldi	r20, 0x80	; 128
    1232:	5f e3       	ldi	r21, 0x3F	; 63
    1234:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1238:	88 23       	and	r24, r24
    123a:	2c f4       	brge	.+10     	; 0x1246 <HLCD_enuInit+0x176>
		__ticks = 1;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9a a3       	std	Y+34, r25	; 0x22
    1242:	89 a3       	std	Y+33, r24	; 0x21
    1244:	3f c0       	rjmp	.+126    	; 0x12c4 <HLCD_enuInit+0x1f4>
	else if (__tmp > 65535)
    1246:	6b a1       	ldd	r22, Y+35	; 0x23
    1248:	7c a1       	ldd	r23, Y+36	; 0x24
    124a:	8d a1       	ldd	r24, Y+37	; 0x25
    124c:	9e a1       	ldd	r25, Y+38	; 0x26
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	3f ef       	ldi	r19, 0xFF	; 255
    1252:	4f e7       	ldi	r20, 0x7F	; 127
    1254:	57 e4       	ldi	r21, 0x47	; 71
    1256:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    125a:	18 16       	cp	r1, r24
    125c:	4c f5       	brge	.+82     	; 0x12b0 <HLCD_enuInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    125e:	6f a1       	ldd	r22, Y+39	; 0x27
    1260:	78 a5       	ldd	r23, Y+40	; 0x28
    1262:	89 a5       	ldd	r24, Y+41	; 0x29
    1264:	9a a5       	ldd	r25, Y+42	; 0x2a
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	40 e2       	ldi	r20, 0x20	; 32
    126c:	51 e4       	ldi	r21, 0x41	; 65
    126e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	bc 01       	movw	r22, r24
    1278:	cd 01       	movw	r24, r26
    127a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	9a a3       	std	Y+34, r25	; 0x22
    1284:	89 a3       	std	Y+33, r24	; 0x21
    1286:	0f c0       	rjmp	.+30     	; 0x12a6 <HLCD_enuInit+0x1d6>
    1288:	88 ec       	ldi	r24, 0xC8	; 200
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	98 a3       	std	Y+32, r25	; 0x20
    128e:	8f 8f       	std	Y+31, r24	; 0x1f
    1290:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1292:	98 a1       	ldd	r25, Y+32	; 0x20
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <HLCD_enuInit+0x1c4>
    1298:	98 a3       	std	Y+32, r25	; 0x20
    129a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129c:	89 a1       	ldd	r24, Y+33	; 0x21
    129e:	9a a1       	ldd	r25, Y+34	; 0x22
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	9a a3       	std	Y+34, r25	; 0x22
    12a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a6:	89 a1       	ldd	r24, Y+33	; 0x21
    12a8:	9a a1       	ldd	r25, Y+34	; 0x22
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	69 f7       	brne	.-38     	; 0x1288 <HLCD_enuInit+0x1b8>
    12ae:	14 c0       	rjmp	.+40     	; 0x12d8 <HLCD_enuInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b0:	6b a1       	ldd	r22, Y+35	; 0x23
    12b2:	7c a1       	ldd	r23, Y+36	; 0x24
    12b4:	8d a1       	ldd	r24, Y+37	; 0x25
    12b6:	9e a1       	ldd	r25, Y+38	; 0x26
    12b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	9a a3       	std	Y+34, r25	; 0x22
    12c2:	89 a3       	std	Y+33, r24	; 0x21
    12c4:	89 a1       	ldd	r24, Y+33	; 0x21
    12c6:	9a a1       	ldd	r25, Y+34	; 0x22
    12c8:	9e 8f       	std	Y+30, r25	; 0x1e
    12ca:	8d 8f       	std	Y+29, r24	; 0x1d
    12cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	f1 f7       	brne	.-4      	; 0x12d0 <HLCD_enuInit+0x200>
    12d4:	9e 8f       	std	Y+30, r25	; 0x1e
    12d6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		/*					set port b pin number 0 to high					*/
		HLCD_VoidSendCommand(0b00001111);
    12d8:	8f e0       	ldi	r24, 0x0F	; 15
    12da:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a0 e8       	ldi	r26, 0x80	; 128
    12e4:	bf e3       	ldi	r27, 0x3F	; 63
    12e6:	89 8f       	std	Y+25, r24	; 0x19
    12e8:	9a 8f       	std	Y+26, r25	; 0x1a
    12ea:	ab 8f       	std	Y+27, r26	; 0x1b
    12ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ee:	69 8d       	ldd	r22, Y+25	; 0x19
    12f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	4a ef       	ldi	r20, 0xFA	; 250
    12fc:	54 e4       	ldi	r21, 0x44	; 68
    12fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	8d 8b       	std	Y+21, r24	; 0x15
    1308:	9e 8b       	std	Y+22, r25	; 0x16
    130a:	af 8b       	std	Y+23, r26	; 0x17
    130c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    130e:	6d 89       	ldd	r22, Y+21	; 0x15
    1310:	7e 89       	ldd	r23, Y+22	; 0x16
    1312:	8f 89       	ldd	r24, Y+23	; 0x17
    1314:	98 8d       	ldd	r25, Y+24	; 0x18
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e8       	ldi	r20, 0x80	; 128
    131c:	5f e3       	ldi	r21, 0x3F	; 63
    131e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1322:	88 23       	and	r24, r24
    1324:	2c f4       	brge	.+10     	; 0x1330 <HLCD_enuInit+0x260>
		__ticks = 1;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	9c 8b       	std	Y+20, r25	; 0x14
    132c:	8b 8b       	std	Y+19, r24	; 0x13
    132e:	3f c0       	rjmp	.+126    	; 0x13ae <HLCD_enuInit+0x2de>
	else if (__tmp > 65535)
    1330:	6d 89       	ldd	r22, Y+21	; 0x15
    1332:	7e 89       	ldd	r23, Y+22	; 0x16
    1334:	8f 89       	ldd	r24, Y+23	; 0x17
    1336:	98 8d       	ldd	r25, Y+24	; 0x18
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	3f ef       	ldi	r19, 0xFF	; 255
    133c:	4f e7       	ldi	r20, 0x7F	; 127
    133e:	57 e4       	ldi	r21, 0x47	; 71
    1340:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1344:	18 16       	cp	r1, r24
    1346:	4c f5       	brge	.+82     	; 0x139a <HLCD_enuInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1348:	69 8d       	ldd	r22, Y+25	; 0x19
    134a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    134c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    134e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e2       	ldi	r20, 0x20	; 32
    1356:	51 e4       	ldi	r21, 0x41	; 65
    1358:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	9c 8b       	std	Y+20, r25	; 0x14
    136e:	8b 8b       	std	Y+19, r24	; 0x13
    1370:	0f c0       	rjmp	.+30     	; 0x1390 <HLCD_enuInit+0x2c0>
    1372:	88 ec       	ldi	r24, 0xC8	; 200
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9a 8b       	std	Y+18, r25	; 0x12
    1378:	89 8b       	std	Y+17, r24	; 0x11
    137a:	89 89       	ldd	r24, Y+17	; 0x11
    137c:	9a 89       	ldd	r25, Y+18	; 0x12
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <HLCD_enuInit+0x2ae>
    1382:	9a 8b       	std	Y+18, r25	; 0x12
    1384:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1386:	8b 89       	ldd	r24, Y+19	; 0x13
    1388:	9c 89       	ldd	r25, Y+20	; 0x14
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	9c 8b       	std	Y+20, r25	; 0x14
    138e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1390:	8b 89       	ldd	r24, Y+19	; 0x13
    1392:	9c 89       	ldd	r25, Y+20	; 0x14
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	69 f7       	brne	.-38     	; 0x1372 <HLCD_enuInit+0x2a2>
    1398:	14 c0       	rjmp	.+40     	; 0x13c2 <HLCD_enuInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139a:	6d 89       	ldd	r22, Y+21	; 0x15
    139c:	7e 89       	ldd	r23, Y+22	; 0x16
    139e:	8f 89       	ldd	r24, Y+23	; 0x17
    13a0:	98 8d       	ldd	r25, Y+24	; 0x18
    13a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	9c 8b       	std	Y+20, r25	; 0x14
    13ac:	8b 8b       	std	Y+19, r24	; 0x13
    13ae:	8b 89       	ldd	r24, Y+19	; 0x13
    13b0:	9c 89       	ldd	r25, Y+20	; 0x14
    13b2:	98 8b       	std	Y+16, r25	; 0x10
    13b4:	8f 87       	std	Y+15, r24	; 0x0f
    13b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b8:	98 89       	ldd	r25, Y+16	; 0x10
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <HLCD_enuInit+0x2ea>
    13be:	98 8b       	std	Y+16, r25	; 0x10
    13c0:	8f 87       	std	Y+15, r24	; 0x0f
		/*					Delay for 1ms									*/
		_delay_ms(1);
		HLCD_VoidSendCommand(0b00000000);
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a0 e0       	ldi	r26, 0x00	; 0
    13ce:	b0 e4       	ldi	r27, 0x40	; 64
    13d0:	8b 87       	std	Y+11, r24	; 0x0b
    13d2:	9c 87       	std	Y+12, r25	; 0x0c
    13d4:	ad 87       	std	Y+13, r26	; 0x0d
    13d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13da:	7c 85       	ldd	r23, Y+12	; 0x0c
    13dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13de:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	4a ef       	ldi	r20, 0xFA	; 250
    13e6:	54 e4       	ldi	r21, 0x44	; 68
    13e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	8f 83       	std	Y+7, r24	; 0x07
    13f2:	98 87       	std	Y+8, r25	; 0x08
    13f4:	a9 87       	std	Y+9, r26	; 0x09
    13f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f8:	6f 81       	ldd	r22, Y+7	; 0x07
    13fa:	78 85       	ldd	r23, Y+8	; 0x08
    13fc:	89 85       	ldd	r24, Y+9	; 0x09
    13fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e8       	ldi	r20, 0x80	; 128
    1406:	5f e3       	ldi	r21, 0x3F	; 63
    1408:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    140c:	88 23       	and	r24, r24
    140e:	2c f4       	brge	.+10     	; 0x141a <HLCD_enuInit+0x34a>
		__ticks = 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9e 83       	std	Y+6, r25	; 0x06
    1416:	8d 83       	std	Y+5, r24	; 0x05
    1418:	3f c0       	rjmp	.+126    	; 0x1498 <HLCD_enuInit+0x3c8>
	else if (__tmp > 65535)
    141a:	6f 81       	ldd	r22, Y+7	; 0x07
    141c:	78 85       	ldd	r23, Y+8	; 0x08
    141e:	89 85       	ldd	r24, Y+9	; 0x09
    1420:	9a 85       	ldd	r25, Y+10	; 0x0a
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	3f ef       	ldi	r19, 0xFF	; 255
    1426:	4f e7       	ldi	r20, 0x7F	; 127
    1428:	57 e4       	ldi	r21, 0x47	; 71
    142a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    142e:	18 16       	cp	r1, r24
    1430:	4c f5       	brge	.+82     	; 0x1484 <HLCD_enuInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1432:	6b 85       	ldd	r22, Y+11	; 0x0b
    1434:	7c 85       	ldd	r23, Y+12	; 0x0c
    1436:	8d 85       	ldd	r24, Y+13	; 0x0d
    1438:	9e 85       	ldd	r25, Y+14	; 0x0e
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e2       	ldi	r20, 0x20	; 32
    1440:	51 e4       	ldi	r21, 0x41	; 65
    1442:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	bc 01       	movw	r22, r24
    144c:	cd 01       	movw	r24, r26
    144e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9e 83       	std	Y+6, r25	; 0x06
    1458:	8d 83       	std	Y+5, r24	; 0x05
    145a:	0f c0       	rjmp	.+30     	; 0x147a <HLCD_enuInit+0x3aa>
    145c:	88 ec       	ldi	r24, 0xC8	; 200
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9c 83       	std	Y+4, r25	; 0x04
    1462:	8b 83       	std	Y+3, r24	; 0x03
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <HLCD_enuInit+0x398>
    146c:	9c 83       	std	Y+4, r25	; 0x04
    146e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	69 f7       	brne	.-38     	; 0x145c <HLCD_enuInit+0x38c>
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <HLCD_enuInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1484:	6f 81       	ldd	r22, Y+7	; 0x07
    1486:	78 85       	ldd	r23, Y+8	; 0x08
    1488:	89 85       	ldd	r24, Y+9	; 0x09
    148a:	9a 85       	ldd	r25, Y+10	; 0x0a
    148c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 83       	std	Y+5, r24	; 0x05
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <HLCD_enuInit+0x3d4>
    14a8:	9a 83       	std	Y+2, r25	; 0x02
    14aa:	89 83       	std	Y+1, r24	; 0x01
		/*							*/
		HLCD_VoidSendCommand(0b00000110);

#endif

}
    14ac:	e8 96       	adiw	r28, 0x38	; 56
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <HLCD_VoidWriteStr>:
 *
 *		This function write the whole string in the LCD
 *
 **********************************************************************/
void HLCD_VoidWriteStr(u8 * pu8str)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <HLCD_VoidWriteStr+0x6>
    14c4:	0f 92       	push	r0
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	9b 83       	std	Y+3, r25	; 0x03
    14cc:	8a 83       	std	Y+2, r24	; 0x02
	/*Null terminator is very important that helps me a lot*/
	u8 i = 0;
    14ce:	19 82       	std	Y+1, r1	; 0x01
    14d0:	0e c0       	rjmp	.+28     	; 0x14ee <HLCD_VoidWriteStr+0x30>
	/*			Here we loop till the null terminator				*/
	while(pu8str[i] != 0)
	{
		/*Send the character to the LCD in each iteration till the end*/
		HLCD_VoidSendChar(pu8str[i]);
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	9b 81       	ldd	r25, Y+3	; 0x03
    14dc:	fc 01       	movw	r30, r24
    14de:	e2 0f       	add	r30, r18
    14e0:	f3 1f       	adc	r31, r19
    14e2:	80 81       	ld	r24, Z
    14e4:	0e 94 48 06 	call	0xc90	; 0xc90 <HLCD_VoidSendChar>
		i++;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	8f 5f       	subi	r24, 0xFF	; 255
    14ec:	89 83       	std	Y+1, r24	; 0x01
void HLCD_VoidWriteStr(u8 * pu8str)
{
	/*Null terminator is very important that helps me a lot*/
	u8 i = 0;
	/*			Here we loop till the null terminator				*/
	while(pu8str[i] != 0)
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	9b 81       	ldd	r25, Y+3	; 0x03
    14f8:	fc 01       	movw	r30, r24
    14fa:	e2 0f       	add	r30, r18
    14fc:	f3 1f       	adc	r31, r19
    14fe:	80 81       	ld	r24, Z
    1500:	88 23       	and	r24, r24
    1502:	39 f7       	brne	.-50     	; 0x14d2 <HLCD_VoidWriteStr+0x14>
		/*Send the character to the LCD in each iteration till the end*/
		HLCD_VoidSendChar(pu8str[i]);
		i++;
	}

}
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <HLCD_GoToXY>:
 *
 * Function to go to special position of the col
 *
 *********************************************************************/
void HLCD_GoToXY(u8 x,s8 y)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <HLCD_GoToXY+0x6>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <HLCD_GoToXY+0x8>
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	6a 83       	std	Y+2, r22	; 0x02
	/*			here we check the x if it's 1 or 2					*/
	switch(x)
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	3c 83       	std	Y+4, r19	; 0x04
    1528:	2b 83       	std	Y+3, r18	; 0x03
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	91 05       	cpc	r25, r1
    1532:	31 f0       	breq	.+12     	; 0x1540 <HLCD_GoToXY+0x30>
    1534:	2b 81       	ldd	r18, Y+3	; 0x03
    1536:	3c 81       	ldd	r19, Y+4	; 0x04
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	31 05       	cpc	r19, r1
    153c:	31 f0       	breq	.+12     	; 0x154a <HLCD_GoToXY+0x3a>
    153e:	09 c0       	rjmp	.+18     	; 0x1552 <HLCD_GoToXY+0x42>
	{
		/* 		0x80 === 127 decimal		*/
		case 1: HLCD_VoidSendCommand(y + 127); break;
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	81 58       	subi	r24, 0x81	; 129
    1544:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
    1548:	04 c0       	rjmp	.+8      	; 0x1552 <HLCD_GoToXY+0x42>
		/* 		0xBF === 191 decimal		*/
		case 2: HLCD_VoidSendCommand(y + 191); break;
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	81 54       	subi	r24, 0x41	; 65
    154e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	}
}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <HLCD_VoidSendNumber>:
 *
 * This function send an int number to the LCD
 *
 ********************************************************************/
void HLCD_VoidSendNumber(u32 Number)
{
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	2c 97       	sbiw	r28, 0x0c	; 12
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	69 87       	std	Y+9, r22	; 0x09
    157e:	7a 87       	std	Y+10, r23	; 0x0a
    1580:	8b 87       	std	Y+11, r24	; 0x0b
    1582:	9c 87       	std	Y+12, r25	; 0x0c
	if(Number == 0)
    1584:	89 85       	ldd	r24, Y+9	; 0x09
    1586:	9a 85       	ldd	r25, Y+10	; 0x0a
    1588:	ab 85       	ldd	r26, Y+11	; 0x0b
    158a:	bc 85       	ldd	r27, Y+12	; 0x0c
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	a1 05       	cpc	r26, r1
    1590:	b1 05       	cpc	r27, r1
    1592:	09 f4       	brne	.+2      	; 0x1596 <HLCD_VoidSendNumber+0x36>
    1594:	79 c0       	rjmp	.+242    	; 0x1688 <HLCD_VoidSendNumber+0x128>
		/*					Here Print the zero						*/
	}
	else
	{
		/*			Looping if the number is positive only 			*/
		u32 reverse = 1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	a0 e0       	ldi	r26, 0x00	; 0
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	af 83       	std	Y+7, r26	; 0x07
    15a4:	b8 87       	std	Y+8, r27	; 0x08
    15a6:	36 c0       	rjmp	.+108    	; 0x1614 <HLCD_VoidSendNumber+0xb4>
		while(Number > 0)
		{
			/*	Here we reverse the number to display it on screen	*/
			reverse = (reverse * 10) + (Number  % 10);
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	af 81       	ldd	r26, Y+7	; 0x07
    15ae:	b8 85       	ldd	r27, Y+8	; 0x08
    15b0:	2a e0       	ldi	r18, 0x0A	; 10
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	bc 01       	movw	r22, r24
    15ba:	cd 01       	movw	r24, r26
    15bc:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__mulsi3>
    15c0:	7b 01       	movw	r14, r22
    15c2:	8c 01       	movw	r16, r24
    15c4:	89 85       	ldd	r24, Y+9	; 0x09
    15c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c8:	ab 85       	ldd	r26, Y+11	; 0x0b
    15ca:	bc 85       	ldd	r27, Y+12	; 0x0c
    15cc:	2a e0       	ldi	r18, 0x0A	; 10
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	0e 94 81 14 	call	0x2902	; 0x2902 <__udivmodsi4>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	8e 0d       	add	r24, r14
    15e2:	9f 1d       	adc	r25, r15
    15e4:	a0 1f       	adc	r26, r16
    15e6:	b1 1f       	adc	r27, r17
    15e8:	8d 83       	std	Y+5, r24	; 0x05
    15ea:	9e 83       	std	Y+6, r25	; 0x06
    15ec:	af 83       	std	Y+7, r26	; 0x07
    15ee:	b8 87       	std	Y+8, r27	; 0x08
			Number = Number / 10;
    15f0:	89 85       	ldd	r24, Y+9	; 0x09
    15f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f4:	ab 85       	ldd	r26, Y+11	; 0x0b
    15f6:	bc 85       	ldd	r27, Y+12	; 0x0c
    15f8:	2a e0       	ldi	r18, 0x0A	; 10
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	bc 01       	movw	r22, r24
    1602:	cd 01       	movw	r24, r26
    1604:	0e 94 81 14 	call	0x2902	; 0x2902 <__udivmodsi4>
    1608:	da 01       	movw	r26, r20
    160a:	c9 01       	movw	r24, r18
    160c:	89 87       	std	Y+9, r24	; 0x09
    160e:	9a 87       	std	Y+10, r25	; 0x0a
    1610:	ab 87       	std	Y+11, r26	; 0x0b
    1612:	bc 87       	std	Y+12, r27	; 0x0c
	}
	else
	{
		/*			Looping if the number is positive only 			*/
		u32 reverse = 1;
		while(Number > 0)
    1614:	89 85       	ldd	r24, Y+9	; 0x09
    1616:	9a 85       	ldd	r25, Y+10	; 0x0a
    1618:	ab 85       	ldd	r26, Y+11	; 0x0b
    161a:	bc 85       	ldd	r27, Y+12	; 0x0c
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	a1 05       	cpc	r26, r1
    1620:	b1 05       	cpc	r27, r1
    1622:	11 f6       	brne	.-124    	; 0x15a8 <HLCD_VoidSendNumber+0x48>
    1624:	28 c0       	rjmp	.+80     	; 0x1676 <HLCD_VoidSendNumber+0x116>
		}
		/*		Check if the reverse number is bigger than 1 or not */
		while(reverse > 1)
		{
			u32 remainder;
			remainder = reverse % 10;
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	af 81       	ldd	r26, Y+7	; 0x07
    162c:	b8 85       	ldd	r27, Y+8	; 0x08
    162e:	2a e0       	ldi	r18, 0x0A	; 10
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 81 14 	call	0x2902	; 0x2902 <__udivmodsi4>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	9a 83       	std	Y+2, r25	; 0x02
    1646:	ab 83       	std	Y+3, r26	; 0x03
    1648:	bc 83       	std	Y+4, r27	; 0x04
			/*		Send the number to the LCD as a character		*/
			HLCD_VoidSendChar(remainder + 48);
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	80 5d       	subi	r24, 0xD0	; 208
    164e:	0e 94 48 06 	call	0xc90	; 0xc90 <HLCD_VoidSendChar>
			reverse = reverse / 10;
    1652:	8d 81       	ldd	r24, Y+5	; 0x05
    1654:	9e 81       	ldd	r25, Y+6	; 0x06
    1656:	af 81       	ldd	r26, Y+7	; 0x07
    1658:	b8 85       	ldd	r27, Y+8	; 0x08
    165a:	2a e0       	ldi	r18, 0x0A	; 10
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	50 e0       	ldi	r21, 0x00	; 0
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	0e 94 81 14 	call	0x2902	; 0x2902 <__udivmodsi4>
    166a:	da 01       	movw	r26, r20
    166c:	c9 01       	movw	r24, r18
    166e:	8d 83       	std	Y+5, r24	; 0x05
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	af 83       	std	Y+7, r26	; 0x07
    1674:	b8 87       	std	Y+8, r27	; 0x08
			/*	Here we reverse the number to display it on screen	*/
			reverse = (reverse * 10) + (Number  % 10);
			Number = Number / 10;
		}
		/*		Check if the reverse number is bigger than 1 or not */
		while(reverse > 1)
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	af 81       	ldd	r26, Y+7	; 0x07
    167c:	b8 85       	ldd	r27, Y+8	; 0x08
    167e:	82 30       	cpi	r24, 0x02	; 2
    1680:	91 05       	cpc	r25, r1
    1682:	a1 05       	cpc	r26, r1
    1684:	b1 05       	cpc	r27, r1
    1686:	78 f6       	brcc	.-98     	; 0x1626 <HLCD_VoidSendNumber+0xc6>
			/*		Send the number to the LCD as a character		*/
			HLCD_VoidSendChar(remainder + 48);
			reverse = reverse / 10;
		}
	}
}
    1688:	2c 96       	adiw	r28, 0x0c	; 12
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	ff 90       	pop	r15
    169e:	ef 90       	pop	r14
    16a0:	08 95       	ret

000016a2 <HLCD_SendFloatNumber>:
 *
 * 		This function send an float number to the LCD
 *
 *************************************************************/
void HLCD_SendFloatNumber(f32 Copy_f32Number)
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	2c 97       	sbiw	r28, 0x0c	; 12
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	69 87       	std	Y+9, r22	; 0x09
    16b8:	7a 87       	std	Y+10, r23	; 0x0a
    16ba:	8b 87       	std	Y+11, r24	; 0x0b
    16bc:	9c 87       	std	Y+12, r25	; 0x0c
	f32 Local_f32FloatR;
	s32 Local_s32CopyNumber = (u32) Copy_f32Number;
    16be:	69 85       	ldd	r22, Y+9	; 0x09
    16c0:	7a 85       	ldd	r23, Y+10	; 0x0a
    16c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    16c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    16c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	ab 83       	std	Y+3, r26	; 0x03
    16d4:	bc 83       	std	Y+4, r27	; 0x04
	HLCD_VoidSendNumber(Local_s32CopyNumber);
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	ab 81       	ldd	r26, Y+3	; 0x03
    16dc:	bc 81       	ldd	r27, Y+4	; 0x04
    16de:	bc 01       	movw	r22, r24
    16e0:	cd 01       	movw	r24, r26
    16e2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <HLCD_VoidSendNumber>
	HLCD_VoidSendChar('.');
    16e6:	8e e2       	ldi	r24, 0x2E	; 46
    16e8:	0e 94 48 06 	call	0xc90	; 0xc90 <HLCD_VoidSendChar>

	Local_f32FloatR = (f32) Copy_f32Number - Local_s32CopyNumber;
    16ec:	69 81       	ldd	r22, Y+1	; 0x01
    16ee:	7a 81       	ldd	r23, Y+2	; 0x02
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    16f8:	9b 01       	movw	r18, r22
    16fa:	ac 01       	movw	r20, r24
    16fc:	69 85       	ldd	r22, Y+9	; 0x09
    16fe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1700:	8b 85       	ldd	r24, Y+11	; 0x0b
    1702:	9c 85       	ldd	r25, Y+12	; 0x0c
    1704:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	8d 83       	std	Y+5, r24	; 0x05
    170e:	9e 83       	std	Y+6, r25	; 0x06
    1710:	af 83       	std	Y+7, r26	; 0x07
    1712:	b8 87       	std	Y+8, r27	; 0x08
	/*				Check if the number is negative we need to get off the sign						*/
	if(Copy_f32Number < 0)
    1714:	69 85       	ldd	r22, Y+9	; 0x09
    1716:	7a 85       	ldd	r23, Y+10	; 0x0a
    1718:	8b 85       	ldd	r24, Y+11	; 0x0b
    171a:	9c 85       	ldd	r25, Y+12	; 0x0c
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1728:	88 23       	and	r24, r24
    172a:	4c f4       	brge	.+18     	; 0x173e <HLCD_SendFloatNumber+0x9c>
	{
		Local_f32FloatR = (f32) (-1) * (Local_f32FloatR);
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	af 81       	ldd	r26, Y+7	; 0x07
    1732:	b8 85       	ldd	r27, Y+8	; 0x08
    1734:	b0 58       	subi	r27, 0x80	; 128
    1736:	8d 83       	std	Y+5, r24	; 0x05
    1738:	9e 83       	std	Y+6, r25	; 0x06
    173a:	af 83       	std	Y+7, r26	; 0x07
    173c:	b8 87       	std	Y+8, r27	; 0x08
	}
	HLCD_VoidSendNumber((u32) Local_f32FloatR);
    173e:	6d 81       	ldd	r22, Y+5	; 0x05
    1740:	7e 81       	ldd	r23, Y+6	; 0x06
    1742:	8f 81       	ldd	r24, Y+7	; 0x07
    1744:	98 85       	ldd	r25, Y+8	; 0x08
    1746:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 b0 0a 	call	0x1560	; 0x1560 <HLCD_VoidSendNumber>
}
    1756:	2c 96       	adiw	r28, 0x0c	; 12
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <HLCD_DrawCharacterE>:
 *
 * This function Draw shape E without the left
 *
 *************************************************************/
void HLCD_DrawCharacterE(void)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
	HLCD_GoToXY(0,0);
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	0e 94 88 0a 	call	0x1510	; 0x1510 <HLCD_GoToXY>
	HLCD_VoidSendCommand(0b01000000);
    1778:	80 e4       	ldi	r24, 0x40	; 64
    177a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    177e:	8e e0       	ldi	r24, 0x0E	; 14
    1780:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01010);
    1784:	8a e0       	ldi	r24, 0x0A	; 10
    1786:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    178a:	8e e0       	ldi	r24, 0x0E	; 14
    178c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00010);
    1790:	82 e0       	ldi	r24, 0x02	; 2
    1792:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00010);
    1796:	82 e0       	ldi	r24, 0x02	; 2
    1798:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    179c:	8e e0       	ldi	r24, 0x0E	; 14
    179e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00000);
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00000);
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0);
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	0e 94 48 06 	call	0xc90	; 0xc90 <HLCD_VoidSendChar>

}
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <HLCD_ClearDisplay>:
 *
 * 		This function clear all the characters on the screen
 *
 * ***********************************************************/
void HLCD_ClearDisplay(void)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
	HLCD_VoidSendCommand(1);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
}
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <HLCD_DrawCharacterF>:
 *
 * This function print F character on the screen
 *
 ************************************************************/
void HLCD_DrawCharacterF(void)
{
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
	HLCD_GoToXY(0,3);
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	63 e0       	ldi	r22, 0x03	; 3
    17da:	0e 94 88 0a 	call	0x1510	; 0x1510 <HLCD_GoToXY>
	HLCD_VoidSendCommand(0b01000011);
    17de:	83 e4       	ldi	r24, 0x43	; 67
    17e0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00110);
    17e4:	86 e0       	ldi	r24, 0x06	; 6
    17e6:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    17ea:	84 e0       	ldi	r24, 0x04	; 4
    17ec:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    17f0:	8e e0       	ldi	r24, 0x0E	; 14
    17f2:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    17f6:	84 e0       	ldi	r24, 0x04	; 4
    17f8:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    17fc:	84 e0       	ldi	r24, 0x04	; 4
    17fe:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    1802:	84 e0       	ldi	r24, 0x04	; 4
    1804:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    1808:	84 e0       	ldi	r24, 0x04	; 4
    180a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    180e:	84 e0       	ldi	r24, 0x04	; 4
    1810:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0);
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	0e 94 48 06 	call	0xc90	; 0xc90 <HLCD_VoidSendChar>
}
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <HLCD_DrawHuman>:
 *
 * This function draw a human
 *
 ***********************************************************/
void HLCD_DrawHuman(void)
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
	HLCD_VoidSendCommand(0b01000010);
    1828:	82 e4       	ldi	r24, 0x42	; 66
    182a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_GoToXY(1,5);
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	65 e0       	ldi	r22, 0x05	; 5
    1832:	0e 94 88 0a 	call	0x1510	; 0x1510 <HLCD_GoToXY>
	HLCD_VoidSendCommand(0b00100);
    1836:	84 e0       	ldi	r24, 0x04	; 4
    1838:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01010);
    183c:	8a e0       	ldi	r24, 0x0A	; 10
    183e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    1842:	8e e0       	ldi	r24, 0x0E	; 14
    1844:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    1848:	84 e0       	ldi	r24, 0x04	; 4
    184a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    184e:	8e e0       	ldi	r24, 0x0E	; 14
    1850:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b10101);
    1854:	85 e1       	ldi	r24, 0x15	; 21
    1856:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    185a:	84 e0       	ldi	r24, 0x04	; 4
    185c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    1860:	84 e0       	ldi	r24, 0x04	; 4
    1862:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0);
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	0e 94 48 06 	call	0xc90	; 0xc90 <HLCD_VoidSendChar>
}
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <HLCD_S32Private_GetPower>:
 *
 * 		This is a private function that get the power of a number
 *
 ****************************************************************************/
s32 HLCD_S32Private_GetPower(u8 Copy_u8BaseNumber, u8 Copy_PowerNumber)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	28 97       	sbiw	r28, 0x08	; 8
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	8b 83       	std	Y+3, r24	; 0x03
    1888:	6c 83       	std	Y+4, r22	; 0x04
	u8 Copy_u8Counter = Copy_PowerNumber;
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Copy_u8NumberAfterPower = 0;
    188e:	19 82       	std	Y+1, r1	; 0x01
    1890:	09 c0       	rjmp	.+18     	; 0x18a4 <HLCD_S32Private_GetPower+0x32>
	while(Copy_u8Counter != 0)
	{
		Copy_u8NumberAfterPower = Copy_u8BaseNumber * Copy_u8BaseNumber;
    1892:	9b 81       	ldd	r25, Y+3	; 0x03
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	98 9f       	mul	r25, r24
    1898:	80 2d       	mov	r24, r0
    189a:	11 24       	eor	r1, r1
    189c:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8Counter--;
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	81 50       	subi	r24, 0x01	; 1
    18a2:	8a 83       	std	Y+2, r24	; 0x02
 ****************************************************************************/
s32 HLCD_S32Private_GetPower(u8 Copy_u8BaseNumber, u8 Copy_PowerNumber)
{
	u8 Copy_u8Counter = Copy_PowerNumber;
	u8 Copy_u8NumberAfterPower = 0;
	while(Copy_u8Counter != 0)
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	88 23       	and	r24, r24
    18a8:	a1 f7       	brne	.-24     	; 0x1892 <HLCD_S32Private_GetPower+0x20>
	{
		Copy_u8NumberAfterPower = Copy_u8BaseNumber * Copy_u8BaseNumber;
		Copy_u8Counter--;
	}
}
    18aa:	28 96       	adiw	r28, 0x08	; 8
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <HLCD_StoreCustomCharacter>:
 *
 * 		This function stores a custom pattern passed by an array
 *
 ***************************************************************************/
void HLCD_StoreCustomCharacter(u8 Copy_char_Index, u8 * Copy_Pattern)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <HLCD_StoreCustomCharacter+0x6>
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <HLCD_StoreCustomCharacter+0x8>
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	8b 83       	std	Y+3, r24	; 0x03
    18cc:	7d 83       	std	Y+5, r23	; 0x05
    18ce:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_CGRAMAdd = Copy_char_Index * 8;
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	8a 83       	std	Y+2, r24	; 0x02
	/*			Set CGRAM address										*/
	HLCD_VoidSendCommand(0b01000000 + Local_CGRAMAdd);
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	80 5c       	subi	r24, 0xC0	; 192
    18e8:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
	/*			put the pattern in CGRAM								*/
	for(u8 Local_Counter = 0; Local_Counter < 8; Local_Counter++)
    18ec:	19 82       	std	Y+1, r1	; 0x01
    18ee:	0e c0       	rjmp	.+28     	; 0x190c <HLCD_StoreCustomCharacter+0x50>
	{
		HLCD_VoidSendChar(Copy_Pattern[Local_Counter]);
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	8c 81       	ldd	r24, Y+4	; 0x04
    18f8:	9d 81       	ldd	r25, Y+5	; 0x05
    18fa:	fc 01       	movw	r30, r24
    18fc:	e2 0f       	add	r30, r18
    18fe:	f3 1f       	adc	r31, r19
    1900:	80 81       	ld	r24, Z
    1902:	0e 94 48 06 	call	0xc90	; 0xc90 <HLCD_VoidSendChar>
{
	u8 Local_CGRAMAdd = Copy_char_Index * 8;
	/*			Set CGRAM address										*/
	HLCD_VoidSendCommand(0b01000000 + Local_CGRAMAdd);
	/*			put the pattern in CGRAM								*/
	for(u8 Local_Counter = 0; Local_Counter < 8; Local_Counter++)
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	8f 5f       	subi	r24, 0xFF	; 255
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	88 30       	cpi	r24, 0x08	; 8
    1910:	78 f3       	brcs	.-34     	; 0x18f0 <HLCD_StoreCustomCharacter+0x34>
	{
		HLCD_VoidSendChar(Copy_Pattern[Local_Counter]);
	}
}
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <HLCD_ShiftDisplayLeft>:
 *
 * 		This Function Shift the display to the left
 *
 ***************************************************************************/
void HLCD_ShiftDisplayLeft()
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	2e 97       	sbiw	r28, 0x0e	; 14
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
	HLCD_VoidSendCommand(0b000110);
    1936:	86 e0       	ldi	r24, 0x06	; 6
    1938:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	a0 e0       	ldi	r26, 0x00	; 0
    1942:	b0 e4       	ldi	r27, 0x40	; 64
    1944:	8b 87       	std	Y+11, r24	; 0x0b
    1946:	9c 87       	std	Y+12, r25	; 0x0c
    1948:	ad 87       	std	Y+13, r26	; 0x0d
    194a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194c:	6b 85       	ldd	r22, Y+11	; 0x0b
    194e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1950:	8d 85       	ldd	r24, Y+13	; 0x0d
    1952:	9e 85       	ldd	r25, Y+14	; 0x0e
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	4a ef       	ldi	r20, 0xFA	; 250
    195a:	54 e4       	ldi	r21, 0x44	; 68
    195c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	8f 83       	std	Y+7, r24	; 0x07
    1966:	98 87       	std	Y+8, r25	; 0x08
    1968:	a9 87       	std	Y+9, r26	; 0x09
    196a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    196c:	6f 81       	ldd	r22, Y+7	; 0x07
    196e:	78 85       	ldd	r23, Y+8	; 0x08
    1970:	89 85       	ldd	r24, Y+9	; 0x09
    1972:	9a 85       	ldd	r25, Y+10	; 0x0a
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e8       	ldi	r20, 0x80	; 128
    197a:	5f e3       	ldi	r21, 0x3F	; 63
    197c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1980:	88 23       	and	r24, r24
    1982:	2c f4       	brge	.+10     	; 0x198e <HLCD_ShiftDisplayLeft+0x6c>
		__ticks = 1;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	9e 83       	std	Y+6, r25	; 0x06
    198a:	8d 83       	std	Y+5, r24	; 0x05
    198c:	3f c0       	rjmp	.+126    	; 0x1a0c <HLCD_ShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    198e:	6f 81       	ldd	r22, Y+7	; 0x07
    1990:	78 85       	ldd	r23, Y+8	; 0x08
    1992:	89 85       	ldd	r24, Y+9	; 0x09
    1994:	9a 85       	ldd	r25, Y+10	; 0x0a
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	3f ef       	ldi	r19, 0xFF	; 255
    199a:	4f e7       	ldi	r20, 0x7F	; 127
    199c:	57 e4       	ldi	r21, 0x47	; 71
    199e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19a2:	18 16       	cp	r1, r24
    19a4:	4c f5       	brge	.+82     	; 0x19f8 <HLCD_ShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e2       	ldi	r20, 0x20	; 32
    19b4:	51 e4       	ldi	r21, 0x41	; 65
    19b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	bc 01       	movw	r22, r24
    19c0:	cd 01       	movw	r24, r26
    19c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	9e 83       	std	Y+6, r25	; 0x06
    19cc:	8d 83       	std	Y+5, r24	; 0x05
    19ce:	0f c0       	rjmp	.+30     	; 0x19ee <HLCD_ShiftDisplayLeft+0xcc>
    19d0:	88 ec       	ldi	r24, 0xC8	; 200
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9c 83       	std	Y+4, r25	; 0x04
    19d6:	8b 83       	std	Y+3, r24	; 0x03
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <HLCD_ShiftDisplayLeft+0xba>
    19e0:	9c 83       	std	Y+4, r25	; 0x04
    19e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e4:	8d 81       	ldd	r24, Y+5	; 0x05
    19e6:	9e 81       	ldd	r25, Y+6	; 0x06
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	9e 83       	std	Y+6, r25	; 0x06
    19ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ee:	8d 81       	ldd	r24, Y+5	; 0x05
    19f0:	9e 81       	ldd	r25, Y+6	; 0x06
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	69 f7       	brne	.-38     	; 0x19d0 <HLCD_ShiftDisplayLeft+0xae>
    19f6:	14 c0       	rjmp	.+40     	; 0x1a20 <HLCD_ShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f8:	6f 81       	ldd	r22, Y+7	; 0x07
    19fa:	78 85       	ldd	r23, Y+8	; 0x08
    19fc:	89 85       	ldd	r24, Y+9	; 0x09
    19fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	9e 83       	std	Y+6, r25	; 0x06
    1a0a:	8d 83       	std	Y+5, r24	; 0x05
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a10:	9a 83       	std	Y+2, r25	; 0x02
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <HLCD_ShiftDisplayLeft+0xf6>
    1a1c:	9a 83       	std	Y+2, r25	; 0x02
    1a1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1a20:	2e 96       	adiw	r28, 0x0e	; 14
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <HLCD_ShiftDisplayRight>:
 *
 * 		This Function Shift the display to the right
 *
 **************************************************************************/
void HLCD_ShiftDisplayRight()
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	2e 97       	sbiw	r28, 0x0e	; 14
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
	HLCD_VoidSendCommand(0b000111);
    1a46:	87 e0       	ldi	r24, 0x07	; 7
    1a48:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a0 e0       	ldi	r26, 0x00	; 0
    1a52:	b0 e4       	ldi	r27, 0x40	; 64
    1a54:	8b 87       	std	Y+11, r24	; 0x0b
    1a56:	9c 87       	std	Y+12, r25	; 0x0c
    1a58:	ad 87       	std	Y+13, r26	; 0x0d
    1a5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	4a ef       	ldi	r20, 0xFA	; 250
    1a6a:	54 e4       	ldi	r21, 0x44	; 68
    1a6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	8f 83       	std	Y+7, r24	; 0x07
    1a76:	98 87       	std	Y+8, r25	; 0x08
    1a78:	a9 87       	std	Y+9, r26	; 0x09
    1a7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7e:	78 85       	ldd	r23, Y+8	; 0x08
    1a80:	89 85       	ldd	r24, Y+9	; 0x09
    1a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e8       	ldi	r20, 0x80	; 128
    1a8a:	5f e3       	ldi	r21, 0x3F	; 63
    1a8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a90:	88 23       	and	r24, r24
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <HLCD_ShiftDisplayRight+0x6c>
		__ticks = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9e 83       	std	Y+6, r25	; 0x06
    1a9a:	8d 83       	std	Y+5, r24	; 0x05
    1a9c:	3f c0       	rjmp	.+126    	; 0x1b1c <HLCD_ShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    1a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa0:	78 85       	ldd	r23, Y+8	; 0x08
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	3f ef       	ldi	r19, 0xFF	; 255
    1aaa:	4f e7       	ldi	r20, 0x7F	; 127
    1aac:	57 e4       	ldi	r21, 0x47	; 71
    1aae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ab2:	18 16       	cp	r1, r24
    1ab4:	4c f5       	brge	.+82     	; 0x1b08 <HLCD_ShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e2       	ldi	r20, 0x20	; 32
    1ac4:	51 e4       	ldi	r21, 0x41	; 65
    1ac6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	0f c0       	rjmp	.+30     	; 0x1afe <HLCD_ShiftDisplayRight+0xcc>
    1ae0:	88 ec       	ldi	r24, 0xC8	; 200
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9c 83       	std	Y+4, r25	; 0x04
    1ae6:	8b 83       	std	Y+3, r24	; 0x03
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <HLCD_ShiftDisplayRight+0xba>
    1af0:	9c 83       	std	Y+4, r25	; 0x04
    1af2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	69 f7       	brne	.-38     	; 0x1ae0 <HLCD_ShiftDisplayRight+0xae>
    1b06:	14 c0       	rjmp	.+40     	; 0x1b30 <HLCD_ShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b08:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0a:	78 85       	ldd	r23, Y+8	; 0x08
    1b0c:	89 85       	ldd	r24, Y+9	; 0x09
    1b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <HLCD_ShiftDisplayRight+0xf6>
    1b2c:	9a 83       	std	Y+2, r25	; 0x02
    1b2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1b30:	2e 96       	adiw	r28, 0x0e	; 14
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <HLCD_ShiftCursorLeft>:
 *
 * 		This function shift the cursor to the left
 *
 * **************************************************/
void HLCD_ShiftCursorLeft(void)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	2e 97       	sbiw	r28, 0x0e	; 14
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
	HLCD_VoidSendCommand(0b000100);
    1b56:	84 e0       	ldi	r24, 0x04	; 4
    1b58:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	a0 e0       	ldi	r26, 0x00	; 0
    1b62:	b0 e4       	ldi	r27, 0x40	; 64
    1b64:	8b 87       	std	Y+11, r24	; 0x0b
    1b66:	9c 87       	std	Y+12, r25	; 0x0c
    1b68:	ad 87       	std	Y+13, r26	; 0x0d
    1b6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	4a ef       	ldi	r20, 0xFA	; 250
    1b7a:	54 e4       	ldi	r21, 0x44	; 68
    1b7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	8f 83       	std	Y+7, r24	; 0x07
    1b86:	98 87       	std	Y+8, r25	; 0x08
    1b88:	a9 87       	std	Y+9, r26	; 0x09
    1b8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8e:	78 85       	ldd	r23, Y+8	; 0x08
    1b90:	89 85       	ldd	r24, Y+9	; 0x09
    1b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e8       	ldi	r20, 0x80	; 128
    1b9a:	5f e3       	ldi	r21, 0x3F	; 63
    1b9c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ba0:	88 23       	and	r24, r24
    1ba2:	2c f4       	brge	.+10     	; 0x1bae <HLCD_ShiftCursorLeft+0x6c>
		__ticks = 1;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	9e 83       	std	Y+6, r25	; 0x06
    1baa:	8d 83       	std	Y+5, r24	; 0x05
    1bac:	3f c0       	rjmp	.+126    	; 0x1c2c <HLCD_ShiftCursorLeft+0xea>
	else if (__tmp > 65535)
    1bae:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb0:	78 85       	ldd	r23, Y+8	; 0x08
    1bb2:	89 85       	ldd	r24, Y+9	; 0x09
    1bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	3f ef       	ldi	r19, 0xFF	; 255
    1bba:	4f e7       	ldi	r20, 0x7F	; 127
    1bbc:	57 e4       	ldi	r21, 0x47	; 71
    1bbe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bc2:	18 16       	cp	r1, r24
    1bc4:	4c f5       	brge	.+82     	; 0x1c18 <HLCD_ShiftCursorLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e2       	ldi	r20, 0x20	; 32
    1bd4:	51 e4       	ldi	r21, 0x41	; 65
    1bd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	bc 01       	movw	r22, r24
    1be0:	cd 01       	movw	r24, r26
    1be2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	9e 83       	std	Y+6, r25	; 0x06
    1bec:	8d 83       	std	Y+5, r24	; 0x05
    1bee:	0f c0       	rjmp	.+30     	; 0x1c0e <HLCD_ShiftCursorLeft+0xcc>
    1bf0:	88 ec       	ldi	r24, 0xC8	; 200
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9c 83       	std	Y+4, r25	; 0x04
    1bf6:	8b 83       	std	Y+3, r24	; 0x03
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <HLCD_ShiftCursorLeft+0xba>
    1c00:	9c 83       	std	Y+4, r25	; 0x04
    1c02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	9e 83       	std	Y+6, r25	; 0x06
    1c0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c10:	9e 81       	ldd	r25, Y+6	; 0x06
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	69 f7       	brne	.-38     	; 0x1bf0 <HLCD_ShiftCursorLeft+0xae>
    1c16:	14 c0       	rjmp	.+40     	; 0x1c40 <HLCD_ShiftCursorLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c18:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1a:	78 85       	ldd	r23, Y+8	; 0x08
    1c1c:	89 85       	ldd	r24, Y+9	; 0x09
    1c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	9e 83       	std	Y+6, r25	; 0x06
    1c2a:	8d 83       	std	Y+5, r24	; 0x05
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	9a 83       	std	Y+2, r25	; 0x02
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	9a 81       	ldd	r25, Y+2	; 0x02
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <HLCD_ShiftCursorLeft+0xf6>
    1c3c:	9a 83       	std	Y+2, r25	; 0x02
    1c3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c40:	2e 96       	adiw	r28, 0x0e	; 14
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <HLCD_ShiftCursorRight>:
 *
 * 		This function shift the cursor to the right
 *
 * **************************************************/
void HLCD_ShiftCursorRight(void)
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
	HLCD_VoidSendCommand(0b000101);
    1c66:	85 e0       	ldi	r24, 0x05	; 5
    1c68:	0e 94 58 07 	call	0xeb0	; 0xeb0 <HLCD_VoidSendCommand>
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	a0 e0       	ldi	r26, 0x00	; 0
    1c72:	b0 e4       	ldi	r27, 0x40	; 64
    1c74:	8b 87       	std	Y+11, r24	; 0x0b
    1c76:	9c 87       	std	Y+12, r25	; 0x0c
    1c78:	ad 87       	std	Y+13, r26	; 0x0d
    1c7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	4a ef       	ldi	r20, 0xFA	; 250
    1c8a:	54 e4       	ldi	r21, 0x44	; 68
    1c8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	8f 83       	std	Y+7, r24	; 0x07
    1c96:	98 87       	std	Y+8, r25	; 0x08
    1c98:	a9 87       	std	Y+9, r26	; 0x09
    1c9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e8       	ldi	r20, 0x80	; 128
    1caa:	5f e3       	ldi	r21, 0x3F	; 63
    1cac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cb0:	88 23       	and	r24, r24
    1cb2:	2c f4       	brge	.+10     	; 0x1cbe <HLCD_ShiftCursorRight+0x6c>
		__ticks = 1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	3f c0       	rjmp	.+126    	; 0x1d3c <HLCD_ShiftCursorRight+0xea>
	else if (__tmp > 65535)
    1cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc0:	78 85       	ldd	r23, Y+8	; 0x08
    1cc2:	89 85       	ldd	r24, Y+9	; 0x09
    1cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	3f ef       	ldi	r19, 0xFF	; 255
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	57 e4       	ldi	r21, 0x47	; 71
    1cce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	4c f5       	brge	.+82     	; 0x1d28 <HLCD_ShiftCursorRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e2       	ldi	r20, 0x20	; 32
    1ce4:	51 e4       	ldi	r21, 0x41	; 65
    1ce6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	9e 83       	std	Y+6, r25	; 0x06
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
    1cfe:	0f c0       	rjmp	.+30     	; 0x1d1e <HLCD_ShiftCursorRight+0xcc>
    1d00:	88 ec       	ldi	r24, 0xC8	; 200
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	9c 83       	std	Y+4, r25	; 0x04
    1d06:	8b 83       	std	Y+3, r24	; 0x03
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <HLCD_ShiftCursorRight+0xba>
    1d10:	9c 83       	std	Y+4, r25	; 0x04
    1d12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d14:	8d 81       	ldd	r24, Y+5	; 0x05
    1d16:	9e 81       	ldd	r25, Y+6	; 0x06
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	9e 83       	std	Y+6, r25	; 0x06
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	69 f7       	brne	.-38     	; 0x1d00 <HLCD_ShiftCursorRight+0xae>
    1d26:	14 c0       	rjmp	.+40     	; 0x1d50 <HLCD_ShiftCursorRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d28:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2a:	78 85       	ldd	r23, Y+8	; 0x08
    1d2c:	89 85       	ldd	r24, Y+9	; 0x09
    1d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	9a 83       	std	Y+2, r25	; 0x02
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <HLCD_ShiftCursorRight+0xf6>
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1d50:	2e 96       	adiw	r28, 0x0e	; 14
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <HLCD_WriteHexNumber>:
 *
 * 		This function write a number on the LCD as hex
 *
 ***************************************************** */
void HLCD_WriteHexNumber(u8 Number)
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	c8 56       	subi	r28, 0x68	; 104
    1d6c:	d0 40       	sbci	r29, 0x00	; 0
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e8 59       	subi	r30, 0x98	; 152
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 83       	st	Z, r24
    /*				char array to store hexadecimal number				*/
    u8 Copy_u8HexaDeciNum[100];
    /*				counter for hexadecimal number array				*/
    u8 Copy_u8Counter = 0;
    1d80:	1b 82       	std	Y+3, r1	; 0x03
    1d82:	33 c0       	rjmp	.+102    	; 0x1dea <HLCD_WriteHexNumber+0x88>
    while (Number != 0)
    {
        /*			temporary variable to store remainder				*/
        u8 Copy_u8tempVariable = 0;
    1d84:	1a 82       	std	Y+2, r1	; 0x02

        /*			storing remainder in Copy_u8tempVariable 			*/
        Copy_u8tempVariable = Number % 16;
    1d86:	fe 01       	movw	r30, r28
    1d88:	e8 59       	subi	r30, 0x98	; 152
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8f 70       	andi	r24, 0x0F	; 15
    1d90:	8a 83       	std	Y+2, r24	; 0x02

        /*			check if Copy_u8tempVariable < 10					*/
        if (Copy_u8tempVariable < 10)
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	8a 30       	cpi	r24, 0x0A	; 10
    1d96:	80 f4       	brcc	.+32     	; 0x1db8 <HLCD_WriteHexNumber+0x56>
        {
            Copy_u8HexaDeciNum[Copy_u8Counter] = Copy_u8tempVariable + 48;
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	48 2f       	mov	r20, r24
    1da2:	40 5d       	subi	r20, 0xD0	; 208
    1da4:	ce 01       	movw	r24, r28
    1da6:	04 96       	adiw	r24, 0x04	; 4
    1da8:	fc 01       	movw	r30, r24
    1daa:	e2 0f       	add	r30, r18
    1dac:	f3 1f       	adc	r31, r19
    1dae:	40 83       	st	Z, r20
            Copy_u8Counter++;
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	8f 5f       	subi	r24, 0xFF	; 255
    1db4:	8b 83       	std	Y+3, r24	; 0x03
    1db6:	0f c0       	rjmp	.+30     	; 0x1dd6 <HLCD_WriteHexNumber+0x74>
        }
        else
        {
        	Copy_u8HexaDeciNum[Copy_u8Counter] = Copy_u8tempVariable + 55;
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	48 2f       	mov	r20, r24
    1dc2:	49 5c       	subi	r20, 0xC9	; 201
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	04 96       	adiw	r24, 0x04	; 4
    1dc8:	fc 01       	movw	r30, r24
    1dca:	e2 0f       	add	r30, r18
    1dcc:	f3 1f       	adc	r31, r19
    1dce:	40 83       	st	Z, r20
        	Copy_u8Counter++;
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	8b 83       	std	Y+3, r24	; 0x03
        }
        Number = Number / 16;
    1dd6:	de 01       	movw	r26, r28
    1dd8:	a8 59       	subi	r26, 0x98	; 152
    1dda:	bf 4f       	sbci	r27, 0xFF	; 255
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e8 59       	subi	r30, 0x98	; 152
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	80 81       	ld	r24, Z
    1de4:	82 95       	swap	r24
    1de6:	8f 70       	andi	r24, 0x0F	; 15
    1de8:	8c 93       	st	X, r24
{
    /*				char array to store hexadecimal number				*/
    u8 Copy_u8HexaDeciNum[100];
    /*				counter for hexadecimal number array				*/
    u8 Copy_u8Counter = 0;
    while (Number != 0)
    1dea:	fe 01       	movw	r30, r28
    1dec:	e8 59       	subi	r30, 0x98	; 152
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	80 81       	ld	r24, Z
    1df2:	88 23       	and	r24, r24
    1df4:	39 f6       	brne	.-114    	; 0x1d84 <HLCD_WriteHexNumber+0x22>
        	Copy_u8HexaDeciNum[Copy_u8Counter] = Copy_u8tempVariable + 55;
        	Copy_u8Counter++;
        }
        Number = Number / 16;
    }
    for (u8 Copy_u8Counterloop = Copy_u8Counter - 1; Copy_u8Counterloop >= 0; Copy_u8Counterloop--)
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	81 50       	subi	r24, 0x01	; 1
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    {
    	HLCD_VoidSendNumber(Copy_u8HexaDeciNum[Copy_u8Counterloop]);
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	ce 01       	movw	r24, r28
    1e04:	04 96       	adiw	r24, 0x04	; 4
    1e06:	fc 01       	movw	r30, r24
    1e08:	e2 0f       	add	r30, r18
    1e0a:	f3 1f       	adc	r31, r19
    1e0c:	80 81       	ld	r24, Z
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a0 e0       	ldi	r26, 0x00	; 0
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	bc 01       	movw	r22, r24
    1e18:	cd 01       	movw	r24, r26
    1e1a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <HLCD_VoidSendNumber>
        	Copy_u8HexaDeciNum[Copy_u8Counter] = Copy_u8tempVariable + 55;
        	Copy_u8Counter++;
        }
        Number = Number / 16;
    }
    for (u8 Copy_u8Counterloop = Copy_u8Counter - 1; Copy_u8Counterloop >= 0; Copy_u8Counterloop--)
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	81 50       	subi	r24, 0x01	; 1
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	eb cf       	rjmp	.-42     	; 0x1dfc <HLCD_WriteHexNumber+0x9a>

00001e26 <HLCD_WriteBinaryNumber>:
 *
 * 		This function Write a number in the LCD as a binary form
 *
 * ******************************************************************/
void HLCD_WriteBinaryNumber(u8 Number)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	c6 56       	subi	r28, 0x66	; 102
    1e30:	d0 40       	sbci	r29, 0x00	; 0
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	ea 59       	subi	r30, 0x9A	; 154
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	80 83       	st	Z, r24
    /*				char array to store Binary number					*/
    u8 Copy_u8BinaryDeciNum[100];

    for(u8 Copy_u8Counter = 0; Number > 0; Copy_u8Counter++)
    1e44:	19 82       	std	Y+1, r1	; 0x01
    1e46:	2c c0       	rjmp	.+88     	; 0x1ea0 <HLCD_WriteBinaryNumber+0x7a>
    {
    	/*			Getting the Mod of base 2 to convert into binary	*/
    	Copy_u8BinaryDeciNum[Copy_u8Counter] = Number % 2;
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	fe 01       	movw	r30, r28
    1e50:	ea 59       	subi	r30, 0x9A	; 154
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 81       	ld	r24, Z
    1e56:	48 2f       	mov	r20, r24
    1e58:	41 70       	andi	r20, 0x01	; 1
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	02 96       	adiw	r24, 0x02	; 2
    1e5e:	fc 01       	movw	r30, r24
    1e60:	e2 0f       	add	r30, r18
    1e62:	f3 1f       	adc	r31, r19
    1e64:	40 83       	st	Z, r20
    	Number = Number / 2;
    1e66:	de 01       	movw	r26, r28
    1e68:	aa 59       	subi	r26, 0x9A	; 154
    1e6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	ea 59       	subi	r30, 0x9A	; 154
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 81       	ld	r24, Z
    1e74:	86 95       	lsr	r24
    1e76:	8c 93       	st	X, r24
    	/*			Sending the number to the LCD						*/
    	HLCD_VoidSendNumber(Copy_u8BinaryDeciNum[Copy_u8Counter]);
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	ce 01       	movw	r24, r28
    1e80:	02 96       	adiw	r24, 0x02	; 2
    1e82:	fc 01       	movw	r30, r24
    1e84:	e2 0f       	add	r30, r18
    1e86:	f3 1f       	adc	r31, r19
    1e88:	80 81       	ld	r24, Z
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a0 e0       	ldi	r26, 0x00	; 0
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	0e 94 b0 0a 	call	0x1560	; 0x1560 <HLCD_VoidSendNumber>
void HLCD_WriteBinaryNumber(u8 Number)
{
    /*				char array to store Binary number					*/
    u8 Copy_u8BinaryDeciNum[100];

    for(u8 Copy_u8Counter = 0; Number > 0; Copy_u8Counter++)
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	8f 5f       	subi	r24, 0xFF	; 255
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	ea 59       	subi	r30, 0x9A	; 154
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	88 23       	and	r24, r24
    1eaa:	71 f6       	brne	.-100    	; 0x1e48 <HLCD_WriteBinaryNumber+0x22>
    	Copy_u8BinaryDeciNum[Copy_u8Counter] = Number % 2;
    	Number = Number / 2;
    	/*			Sending the number to the LCD						*/
    	HLCD_VoidSendNumber(Copy_u8BinaryDeciNum[Copy_u8Counter]);
    }
}
    1eac:	ca 59       	subi	r28, 0x9A	; 154
    1eae:	df 4f       	sbci	r29, 0xFF	; 255
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <HLCD_AnimateString>:
 * 			last character in the string start from the beginning
 * 			of the LCD
 *
 ***********************************************************************/
void HLCD_AnimateString(u8 * str)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	60 97       	sbiw	r28, 0x10	; 16
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	98 8b       	std	Y+16, r25	; 0x10
    1ed6:	8f 87       	std	Y+15, r24	; 0x0f
    1ed8:	93 c0       	rjmp	.+294    	; 0x2000 <HLCD_AnimateString+0x140>
	static s8 Copy_iCounter = -1;
	/*			Looping on the string to make the animation on it		*/
	for(; Copy_iCounter <= 15; Copy_iCounter++)
	{
		/*		Set the cursor to the beginning							*/
		HLCD_GoToXY(1,Copy_iCounter);
    1eda:	90 91 68 01 	lds	r25, 0x0168
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	69 2f       	mov	r22, r25
    1ee2:	0e 94 88 0a 	call	0x1510	; 0x1510 <HLCD_GoToXY>
		HLCD_VoidWriteStr(str);
    1ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee8:	98 89       	ldd	r25, Y+16	; 0x10
    1eea:	0e 94 5f 0a 	call	0x14be	; 0x14be <HLCD_VoidWriteStr>
		/*
		 * check if the counter bigger then the length of the
		 * 								character
		 *																*/
		if(Copy_iCounter > 10)
    1eee:	80 91 68 01 	lds	r24, 0x0168
    1ef2:	8b 30       	cpi	r24, 0x0B	; 11
    1ef4:	64 f0       	brlt	.+24     	; 0x1f0e <HLCD_AnimateString+0x4e>
		{
			/*		Set the string from the first row and last column	*/
			HLCD_GoToXY(1, Copy_iCounter - 15);
    1ef6:	80 91 68 01 	lds	r24, 0x0168
    1efa:	8f 50       	subi	r24, 0x0F	; 15
    1efc:	98 2f       	mov	r25, r24
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	69 2f       	mov	r22, r25
    1f02:	0e 94 88 0a 	call	0x1510	; 0x1510 <HLCD_GoToXY>
			/*		Send the String to the LCD							*/
			HLCD_VoidWriteStr(str);
    1f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f08:	98 89       	ldd	r25, Y+16	; 0x10
    1f0a:	0e 94 5f 0a 	call	0x14be	; 0x14be <HLCD_VoidWriteStr>
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a8 e4       	ldi	r26, 0x48	; 72
    1f14:	b3 e4       	ldi	r27, 0x43	; 67
    1f16:	8b 87       	std	Y+11, r24	; 0x0b
    1f18:	9c 87       	std	Y+12, r25	; 0x0c
    1f1a:	ad 87       	std	Y+13, r26	; 0x0d
    1f1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4a ef       	ldi	r20, 0xFA	; 250
    1f2c:	54 e4       	ldi	r21, 0x44	; 68
    1f2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	8f 83       	std	Y+7, r24	; 0x07
    1f38:	98 87       	std	Y+8, r25	; 0x08
    1f3a:	a9 87       	std	Y+9, r26	; 0x09
    1f3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f40:	78 85       	ldd	r23, Y+8	; 0x08
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e8       	ldi	r20, 0x80	; 128
    1f4c:	5f e3       	ldi	r21, 0x3F	; 63
    1f4e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f52:	88 23       	and	r24, r24
    1f54:	2c f4       	brge	.+10     	; 0x1f60 <HLCD_AnimateString+0xa0>
		__ticks = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
    1f5e:	3f c0       	rjmp	.+126    	; 0x1fde <HLCD_AnimateString+0x11e>
	else if (__tmp > 65535)
    1f60:	6f 81       	ldd	r22, Y+7	; 0x07
    1f62:	78 85       	ldd	r23, Y+8	; 0x08
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	3f ef       	ldi	r19, 0xFF	; 255
    1f6c:	4f e7       	ldi	r20, 0x7F	; 127
    1f6e:	57 e4       	ldi	r21, 0x47	; 71
    1f70:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f74:	18 16       	cp	r1, r24
    1f76:	4c f5       	brge	.+82     	; 0x1fca <HLCD_AnimateString+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e2       	ldi	r20, 0x20	; 32
    1f86:	51 e4       	ldi	r21, 0x41	; 65
    1f88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	9e 83       	std	Y+6, r25	; 0x06
    1f9e:	8d 83       	std	Y+5, r24	; 0x05
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <HLCD_AnimateString+0x100>
    1fa2:	88 ec       	ldi	r24, 0xC8	; 200
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	9c 83       	std	Y+4, r25	; 0x04
    1fa8:	8b 83       	std	Y+3, r24	; 0x03
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <HLCD_AnimateString+0xee>
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	69 f7       	brne	.-38     	; 0x1fa2 <HLCD_AnimateString+0xe2>
    1fc8:	14 c0       	rjmp	.+40     	; 0x1ff2 <HLCD_AnimateString+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <HLCD_AnimateString+0x12a>
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
		}
		/*						Wait for 200ms 							*/
		_delay_ms(200);
		/*				Clear all the display							*/
		HLCD_ClearDisplay();
    1ff2:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <HLCD_ClearDisplay>
void HLCD_AnimateString(u8 * str)
{

	static s8 Copy_iCounter = -1;
	/*			Looping on the string to make the animation on it		*/
	for(; Copy_iCounter <= 15; Copy_iCounter++)
    1ff6:	80 91 68 01 	lds	r24, 0x0168
    1ffa:	8f 5f       	subi	r24, 0xFF	; 255
    1ffc:	80 93 68 01 	sts	0x0168, r24
    2000:	80 91 68 01 	lds	r24, 0x0168
    2004:	80 31       	cpi	r24, 0x10	; 16
    2006:	0c f4       	brge	.+2      	; 0x200a <HLCD_AnimateString+0x14a>
    2008:	68 cf       	rjmp	.-304    	; 0x1eda <HLCD_AnimateString+0x1a>
		_delay_ms(200);
		/*				Clear all the display							*/
		HLCD_ClearDisplay();
	}
	/*				Start the counter from the beginning				*/
	Copy_iCounter = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	80 93 68 01 	sts	0x0168, r24
}
    2010:	60 96       	adiw	r28, 0x10	; 16
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <MDIO_VoidSetPinDirection>:
 *
 * 			Here we Set the Pin direction of the given port to 1 or 0
 *
 *************************************************************************/
void MDIO_VoidSetPinDirection(u8 Copy_u8Port ,u8 Copy_u8Pin, u8 Copy_u8Direc)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	27 97       	sbiw	r28, 0x07	; 7
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	6a 83       	std	Y+2, r22	; 0x02
    203a:	4b 83       	std	Y+3, r20	; 0x03
	/*					check for pins and ports					*/
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	84 30       	cpi	r24, 0x04	; 4
    2040:	08 f0       	brcs	.+2      	; 0x2044 <MDIO_VoidSetPinDirection+0x22>
    2042:	ee c0       	rjmp	.+476    	; 0x2220 <MDIO_VoidSetPinDirection+0x1fe>
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	88 30       	cpi	r24, 0x08	; 8
    2048:	08 f0       	brcs	.+2      	; 0x204c <MDIO_VoidSetPinDirection+0x2a>
    204a:	ea c0       	rjmp	.+468    	; 0x2220 <MDIO_VoidSetPinDirection+0x1fe>
	{
	/*					check the direction							*/
		if(DIO_PIN_HIGH == Copy_u8Direc)
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	09 f0       	breq	.+2      	; 0x2054 <MDIO_VoidSetPinDirection+0x32>
    2052:	6f c0       	rjmp	.+222    	; 0x2132 <MDIO_VoidSetPinDirection+0x110>
		{
			switch(Copy_u8Port)
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	3f 83       	std	Y+7, r19	; 0x07
    205c:	2e 83       	std	Y+6, r18	; 0x06
    205e:	8e 81       	ldd	r24, Y+6	; 0x06
    2060:	9f 81       	ldd	r25, Y+7	; 0x07
    2062:	81 30       	cpi	r24, 0x01	; 1
    2064:	91 05       	cpc	r25, r1
    2066:	49 f1       	breq	.+82     	; 0x20ba <MDIO_VoidSetPinDirection+0x98>
    2068:	2e 81       	ldd	r18, Y+6	; 0x06
    206a:	3f 81       	ldd	r19, Y+7	; 0x07
    206c:	22 30       	cpi	r18, 0x02	; 2
    206e:	31 05       	cpc	r19, r1
    2070:	2c f4       	brge	.+10     	; 0x207c <MDIO_VoidSetPinDirection+0x5a>
    2072:	8e 81       	ldd	r24, Y+6	; 0x06
    2074:	9f 81       	ldd	r25, Y+7	; 0x07
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	61 f0       	breq	.+24     	; 0x2092 <MDIO_VoidSetPinDirection+0x70>
    207a:	d2 c0       	rjmp	.+420    	; 0x2220 <MDIO_VoidSetPinDirection+0x1fe>
    207c:	2e 81       	ldd	r18, Y+6	; 0x06
    207e:	3f 81       	ldd	r19, Y+7	; 0x07
    2080:	22 30       	cpi	r18, 0x02	; 2
    2082:	31 05       	cpc	r19, r1
    2084:	71 f1       	breq	.+92     	; 0x20e2 <MDIO_VoidSetPinDirection+0xc0>
    2086:	8e 81       	ldd	r24, Y+6	; 0x06
    2088:	9f 81       	ldd	r25, Y+7	; 0x07
    208a:	83 30       	cpi	r24, 0x03	; 3
    208c:	91 05       	cpc	r25, r1
    208e:	e9 f1       	breq	.+122    	; 0x210a <MDIO_VoidSetPinDirection+0xe8>
    2090:	c7 c0       	rjmp	.+398    	; 0x2220 <MDIO_VoidSetPinDirection+0x1fe>
			{
				case DIO_PORTA:SET_BIT(DDRA_REG, Copy_u8Pin); break;
    2092:	aa e3       	ldi	r26, 0x3A	; 58
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	ea e3       	ldi	r30, 0x3A	; 58
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	48 2f       	mov	r20, r24
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	02 2e       	mov	r0, r18
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <MDIO_VoidSetPinDirection+0x8e>
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	0a 94       	dec	r0
    20b2:	e2 f7       	brpl	.-8      	; 0x20ac <MDIO_VoidSetPinDirection+0x8a>
    20b4:	84 2b       	or	r24, r20
    20b6:	8c 93       	st	X, r24
    20b8:	b3 c0       	rjmp	.+358    	; 0x2220 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTB:SET_BIT(DDRB_REG, Copy_u8Pin); break;
    20ba:	a7 e3       	ldi	r26, 0x37	; 55
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e7 e3       	ldi	r30, 0x37	; 55
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	48 2f       	mov	r20, r24
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	02 2e       	mov	r0, r18
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <MDIO_VoidSetPinDirection+0xb6>
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	0a 94       	dec	r0
    20da:	e2 f7       	brpl	.-8      	; 0x20d4 <MDIO_VoidSetPinDirection+0xb2>
    20dc:	84 2b       	or	r24, r20
    20de:	8c 93       	st	X, r24
    20e0:	9f c0       	rjmp	.+318    	; 0x2220 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTC:SET_BIT(DDRC_REG, Copy_u8Pin); break;
    20e2:	a4 e3       	ldi	r26, 0x34	; 52
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e4 e3       	ldi	r30, 0x34	; 52
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	48 2f       	mov	r20, r24
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	02 2e       	mov	r0, r18
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <MDIO_VoidSetPinDirection+0xde>
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	0a 94       	dec	r0
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <MDIO_VoidSetPinDirection+0xda>
    2104:	84 2b       	or	r24, r20
    2106:	8c 93       	st	X, r24
    2108:	8b c0       	rjmp	.+278    	; 0x2220 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTD:SET_BIT(DDRD_REG, Copy_u8Pin); break;
    210a:	a1 e3       	ldi	r26, 0x31	; 49
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e1 e3       	ldi	r30, 0x31	; 49
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	48 2f       	mov	r20, r24
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	02 2e       	mov	r0, r18
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <MDIO_VoidSetPinDirection+0x106>
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	0a 94       	dec	r0
    212a:	e2 f7       	brpl	.-8      	; 0x2124 <MDIO_VoidSetPinDirection+0x102>
    212c:	84 2b       	or	r24, r20
    212e:	8c 93       	st	X, r24
    2130:	77 c0       	rjmp	.+238    	; 0x2220 <MDIO_VoidSetPinDirection+0x1fe>
				default: /*		Wrong POrt ID		*/	      break;
			}
		}
	/**/
		else if(DIO_PIN_LOW == Copy_u8Direc)
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	88 23       	and	r24, r24
    2136:	09 f0       	breq	.+2      	; 0x213a <MDIO_VoidSetPinDirection+0x118>
    2138:	73 c0       	rjmp	.+230    	; 0x2220 <MDIO_VoidSetPinDirection+0x1fe>
		{
			switch(Copy_u8Port)
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	3d 83       	std	Y+5, r19	; 0x05
    2142:	2c 83       	std	Y+4, r18	; 0x04
    2144:	8c 81       	ldd	r24, Y+4	; 0x04
    2146:	9d 81       	ldd	r25, Y+5	; 0x05
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	91 05       	cpc	r25, r1
    214c:	59 f1       	breq	.+86     	; 0x21a4 <MDIO_VoidSetPinDirection+0x182>
    214e:	2c 81       	ldd	r18, Y+4	; 0x04
    2150:	3d 81       	ldd	r19, Y+5	; 0x05
    2152:	22 30       	cpi	r18, 0x02	; 2
    2154:	31 05       	cpc	r19, r1
    2156:	2c f4       	brge	.+10     	; 0x2162 <MDIO_VoidSetPinDirection+0x140>
    2158:	8c 81       	ldd	r24, Y+4	; 0x04
    215a:	9d 81       	ldd	r25, Y+5	; 0x05
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	69 f0       	breq	.+26     	; 0x217a <MDIO_VoidSetPinDirection+0x158>
    2160:	5f c0       	rjmp	.+190    	; 0x2220 <MDIO_VoidSetPinDirection+0x1fe>
    2162:	2c 81       	ldd	r18, Y+4	; 0x04
    2164:	3d 81       	ldd	r19, Y+5	; 0x05
    2166:	22 30       	cpi	r18, 0x02	; 2
    2168:	31 05       	cpc	r19, r1
    216a:	89 f1       	breq	.+98     	; 0x21ce <MDIO_VoidSetPinDirection+0x1ac>
    216c:	8c 81       	ldd	r24, Y+4	; 0x04
    216e:	9d 81       	ldd	r25, Y+5	; 0x05
    2170:	83 30       	cpi	r24, 0x03	; 3
    2172:	91 05       	cpc	r25, r1
    2174:	09 f4       	brne	.+2      	; 0x2178 <MDIO_VoidSetPinDirection+0x156>
    2176:	40 c0       	rjmp	.+128    	; 0x21f8 <MDIO_VoidSetPinDirection+0x1d6>
    2178:	53 c0       	rjmp	.+166    	; 0x2220 <MDIO_VoidSetPinDirection+0x1fe>
			{
				case DIO_PORTA:CLR_BIT(DDRA_REG, Copy_u8Pin); break;
    217a:	aa e3       	ldi	r26, 0x3A	; 58
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	ea e3       	ldi	r30, 0x3A	; 58
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	48 2f       	mov	r20, r24
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	02 2e       	mov	r0, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <MDIO_VoidSetPinDirection+0x176>
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	0a 94       	dec	r0
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <MDIO_VoidSetPinDirection+0x172>
    219c:	80 95       	com	r24
    219e:	84 23       	and	r24, r20
    21a0:	8c 93       	st	X, r24
    21a2:	3e c0       	rjmp	.+124    	; 0x2220 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTB:CLR_BIT(DDRB_REG, Copy_u8Pin); break;
    21a4:	a7 e3       	ldi	r26, 0x37	; 55
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e7 e3       	ldi	r30, 0x37	; 55
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	48 2f       	mov	r20, r24
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	02 2e       	mov	r0, r18
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <MDIO_VoidSetPinDirection+0x1a0>
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	0a 94       	dec	r0
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <MDIO_VoidSetPinDirection+0x19c>
    21c6:	80 95       	com	r24
    21c8:	84 23       	and	r24, r20
    21ca:	8c 93       	st	X, r24
    21cc:	29 c0       	rjmp	.+82     	; 0x2220 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTC:CLR_BIT(DDRC_REG, Copy_u8Pin); break;
    21ce:	a4 e3       	ldi	r26, 0x34	; 52
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e4 e3       	ldi	r30, 0x34	; 52
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	48 2f       	mov	r20, r24
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	02 2e       	mov	r0, r18
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <MDIO_VoidSetPinDirection+0x1ca>
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	0a 94       	dec	r0
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <MDIO_VoidSetPinDirection+0x1c6>
    21f0:	80 95       	com	r24
    21f2:	84 23       	and	r24, r20
    21f4:	8c 93       	st	X, r24
    21f6:	14 c0       	rjmp	.+40     	; 0x2220 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTD:CLR_BIT(DDRD_REG, Copy_u8Pin); break;
    21f8:	a1 e3       	ldi	r26, 0x31	; 49
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e1 e3       	ldi	r30, 0x31	; 49
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	48 2f       	mov	r20, r24
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	02 2e       	mov	r0, r18
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <MDIO_VoidSetPinDirection+0x1f4>
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	0a 94       	dec	r0
    2218:	e2 f7       	brpl	.-8      	; 0x2212 <MDIO_VoidSetPinDirection+0x1f0>
    221a:	80 95       	com	r24
    221c:	84 23       	and	r24, r20
    221e:	8c 93       	st	X, r24
	}
	else
	{
		/*					Wrong PIN ID or POrt ID						*/
	}
}
    2220:	27 96       	adiw	r28, 0x07	; 7
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	de bf       	out	0x3e, r29	; 62
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <MDIO_VoidSetPinValue>:
 *
 * 			Here we Set the Pin value of the given port to 1 or 0
 *
 *************************************************************************/
void MDIO_VoidSetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin, u8 Copy_u8Value)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	27 97       	sbiw	r28, 0x07	; 7
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	6a 83       	std	Y+2, r22	; 0x02
    224a:	4b 83       	std	Y+3, r20	; 0x03
	/*					check for pins and ports					*/
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	84 30       	cpi	r24, 0x04	; 4
    2250:	08 f0       	brcs	.+2      	; 0x2254 <MDIO_VoidSetPinValue+0x22>
    2252:	ee c0       	rjmp	.+476    	; 0x2430 <MDIO_VoidSetPinValue+0x1fe>
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	88 30       	cpi	r24, 0x08	; 8
    2258:	08 f0       	brcs	.+2      	; 0x225c <MDIO_VoidSetPinValue+0x2a>
    225a:	ea c0       	rjmp	.+468    	; 0x2430 <MDIO_VoidSetPinValue+0x1fe>
	{
	/*check the direction*/
		if(DIO_PIN_HIGH == Copy_u8Value)
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	81 30       	cpi	r24, 0x01	; 1
    2260:	09 f0       	breq	.+2      	; 0x2264 <MDIO_VoidSetPinValue+0x32>
    2262:	6f c0       	rjmp	.+222    	; 0x2342 <MDIO_VoidSetPinValue+0x110>
		{
			switch(Copy_u8Port)
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	3f 83       	std	Y+7, r19	; 0x07
    226c:	2e 83       	std	Y+6, r18	; 0x06
    226e:	8e 81       	ldd	r24, Y+6	; 0x06
    2270:	9f 81       	ldd	r25, Y+7	; 0x07
    2272:	81 30       	cpi	r24, 0x01	; 1
    2274:	91 05       	cpc	r25, r1
    2276:	49 f1       	breq	.+82     	; 0x22ca <MDIO_VoidSetPinValue+0x98>
    2278:	2e 81       	ldd	r18, Y+6	; 0x06
    227a:	3f 81       	ldd	r19, Y+7	; 0x07
    227c:	22 30       	cpi	r18, 0x02	; 2
    227e:	31 05       	cpc	r19, r1
    2280:	2c f4       	brge	.+10     	; 0x228c <MDIO_VoidSetPinValue+0x5a>
    2282:	8e 81       	ldd	r24, Y+6	; 0x06
    2284:	9f 81       	ldd	r25, Y+7	; 0x07
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	61 f0       	breq	.+24     	; 0x22a2 <MDIO_VoidSetPinValue+0x70>
    228a:	d2 c0       	rjmp	.+420    	; 0x2430 <MDIO_VoidSetPinValue+0x1fe>
    228c:	2e 81       	ldd	r18, Y+6	; 0x06
    228e:	3f 81       	ldd	r19, Y+7	; 0x07
    2290:	22 30       	cpi	r18, 0x02	; 2
    2292:	31 05       	cpc	r19, r1
    2294:	71 f1       	breq	.+92     	; 0x22f2 <MDIO_VoidSetPinValue+0xc0>
    2296:	8e 81       	ldd	r24, Y+6	; 0x06
    2298:	9f 81       	ldd	r25, Y+7	; 0x07
    229a:	83 30       	cpi	r24, 0x03	; 3
    229c:	91 05       	cpc	r25, r1
    229e:	e9 f1       	breq	.+122    	; 0x231a <MDIO_VoidSetPinValue+0xe8>
    22a0:	c7 c0       	rjmp	.+398    	; 0x2430 <MDIO_VoidSetPinValue+0x1fe>
			{
				case DIO_PORTA:SET_BIT(PORTA_REG, Copy_u8Pin); break;
    22a2:	ab e3       	ldi	r26, 0x3B	; 59
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	eb e3       	ldi	r30, 0x3B	; 59
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	48 2f       	mov	r20, r24
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	02 2e       	mov	r0, r18
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <MDIO_VoidSetPinValue+0x8e>
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	0a 94       	dec	r0
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <MDIO_VoidSetPinValue+0x8a>
    22c4:	84 2b       	or	r24, r20
    22c6:	8c 93       	st	X, r24
    22c8:	b3 c0       	rjmp	.+358    	; 0x2430 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTB:SET_BIT(PORTB_REG, Copy_u8Pin); break;
    22ca:	a8 e3       	ldi	r26, 0x38	; 56
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	e8 e3       	ldi	r30, 0x38	; 56
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	48 2f       	mov	r20, r24
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	02 2e       	mov	r0, r18
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <MDIO_VoidSetPinValue+0xb6>
    22e4:	88 0f       	add	r24, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	0a 94       	dec	r0
    22ea:	e2 f7       	brpl	.-8      	; 0x22e4 <MDIO_VoidSetPinValue+0xb2>
    22ec:	84 2b       	or	r24, r20
    22ee:	8c 93       	st	X, r24
    22f0:	9f c0       	rjmp	.+318    	; 0x2430 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTC:SET_BIT(PORTC_REG, Copy_u8Pin); break;
    22f2:	a5 e3       	ldi	r26, 0x35	; 53
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e5 e3       	ldi	r30, 0x35	; 53
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	48 2f       	mov	r20, r24
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	02 2e       	mov	r0, r18
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <MDIO_VoidSetPinValue+0xde>
    230c:	88 0f       	add	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	0a 94       	dec	r0
    2312:	e2 f7       	brpl	.-8      	; 0x230c <MDIO_VoidSetPinValue+0xda>
    2314:	84 2b       	or	r24, r20
    2316:	8c 93       	st	X, r24
    2318:	8b c0       	rjmp	.+278    	; 0x2430 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTD:SET_BIT(PORTD_REG, Copy_u8Pin); break;
    231a:	a2 e3       	ldi	r26, 0x32	; 50
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e2 e3       	ldi	r30, 0x32	; 50
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	48 2f       	mov	r20, r24
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	02 2e       	mov	r0, r18
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <MDIO_VoidSetPinValue+0x106>
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	0a 94       	dec	r0
    233a:	e2 f7       	brpl	.-8      	; 0x2334 <MDIO_VoidSetPinValue+0x102>
    233c:	84 2b       	or	r24, r20
    233e:	8c 93       	st	X, r24
    2340:	77 c0       	rjmp	.+238    	; 0x2430 <MDIO_VoidSetPinValue+0x1fe>
				default: /*		Wrong POrt ID		*/	   	   break;
			}
		}
	/**/
		else if(DIO_PIN_LOW == Copy_u8Value)
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	88 23       	and	r24, r24
    2346:	09 f0       	breq	.+2      	; 0x234a <MDIO_VoidSetPinValue+0x118>
    2348:	73 c0       	rjmp	.+230    	; 0x2430 <MDIO_VoidSetPinValue+0x1fe>
		{
			switch(Copy_u8Port)
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	3d 83       	std	Y+5, r19	; 0x05
    2352:	2c 83       	std	Y+4, r18	; 0x04
    2354:	8c 81       	ldd	r24, Y+4	; 0x04
    2356:	9d 81       	ldd	r25, Y+5	; 0x05
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	91 05       	cpc	r25, r1
    235c:	59 f1       	breq	.+86     	; 0x23b4 <MDIO_VoidSetPinValue+0x182>
    235e:	2c 81       	ldd	r18, Y+4	; 0x04
    2360:	3d 81       	ldd	r19, Y+5	; 0x05
    2362:	22 30       	cpi	r18, 0x02	; 2
    2364:	31 05       	cpc	r19, r1
    2366:	2c f4       	brge	.+10     	; 0x2372 <MDIO_VoidSetPinValue+0x140>
    2368:	8c 81       	ldd	r24, Y+4	; 0x04
    236a:	9d 81       	ldd	r25, Y+5	; 0x05
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	69 f0       	breq	.+26     	; 0x238a <MDIO_VoidSetPinValue+0x158>
    2370:	5f c0       	rjmp	.+190    	; 0x2430 <MDIO_VoidSetPinValue+0x1fe>
    2372:	2c 81       	ldd	r18, Y+4	; 0x04
    2374:	3d 81       	ldd	r19, Y+5	; 0x05
    2376:	22 30       	cpi	r18, 0x02	; 2
    2378:	31 05       	cpc	r19, r1
    237a:	89 f1       	breq	.+98     	; 0x23de <MDIO_VoidSetPinValue+0x1ac>
    237c:	8c 81       	ldd	r24, Y+4	; 0x04
    237e:	9d 81       	ldd	r25, Y+5	; 0x05
    2380:	83 30       	cpi	r24, 0x03	; 3
    2382:	91 05       	cpc	r25, r1
    2384:	09 f4       	brne	.+2      	; 0x2388 <MDIO_VoidSetPinValue+0x156>
    2386:	40 c0       	rjmp	.+128    	; 0x2408 <MDIO_VoidSetPinValue+0x1d6>
    2388:	53 c0       	rjmp	.+166    	; 0x2430 <MDIO_VoidSetPinValue+0x1fe>
			{
				case DIO_PORTA:CLR_BIT(PORTA_REG, Copy_u8Pin); break;
    238a:	ab e3       	ldi	r26, 0x3B	; 59
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	eb e3       	ldi	r30, 0x3B	; 59
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	48 2f       	mov	r20, r24
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	28 2f       	mov	r18, r24
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	02 2e       	mov	r0, r18
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <MDIO_VoidSetPinValue+0x176>
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	0a 94       	dec	r0
    23aa:	e2 f7       	brpl	.-8      	; 0x23a4 <MDIO_VoidSetPinValue+0x172>
    23ac:	80 95       	com	r24
    23ae:	84 23       	and	r24, r20
    23b0:	8c 93       	st	X, r24
    23b2:	3e c0       	rjmp	.+124    	; 0x2430 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTB:CLR_BIT(PORTB_REG, Copy_u8Pin); break;
    23b4:	a8 e3       	ldi	r26, 0x38	; 56
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	e8 e3       	ldi	r30, 0x38	; 56
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	48 2f       	mov	r20, r24
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	02 2e       	mov	r0, r18
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <MDIO_VoidSetPinValue+0x1a0>
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	0a 94       	dec	r0
    23d4:	e2 f7       	brpl	.-8      	; 0x23ce <MDIO_VoidSetPinValue+0x19c>
    23d6:	80 95       	com	r24
    23d8:	84 23       	and	r24, r20
    23da:	8c 93       	st	X, r24
    23dc:	29 c0       	rjmp	.+82     	; 0x2430 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTC:CLR_BIT(PORTC_REG, Copy_u8Pin); break;
    23de:	a5 e3       	ldi	r26, 0x35	; 53
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e5 e3       	ldi	r30, 0x35	; 53
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	48 2f       	mov	r20, r24
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	28 2f       	mov	r18, r24
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	02 2e       	mov	r0, r18
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <MDIO_VoidSetPinValue+0x1ca>
    23f8:	88 0f       	add	r24, r24
    23fa:	99 1f       	adc	r25, r25
    23fc:	0a 94       	dec	r0
    23fe:	e2 f7       	brpl	.-8      	; 0x23f8 <MDIO_VoidSetPinValue+0x1c6>
    2400:	80 95       	com	r24
    2402:	84 23       	and	r24, r20
    2404:	8c 93       	st	X, r24
    2406:	14 c0       	rjmp	.+40     	; 0x2430 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTD:CLR_BIT(PORTD_REG, Copy_u8Pin); break;
    2408:	a2 e3       	ldi	r26, 0x32	; 50
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e2 e3       	ldi	r30, 0x32	; 50
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	48 2f       	mov	r20, r24
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	02 2e       	mov	r0, r18
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <MDIO_VoidSetPinValue+0x1f4>
    2422:	88 0f       	add	r24, r24
    2424:	99 1f       	adc	r25, r25
    2426:	0a 94       	dec	r0
    2428:	e2 f7       	brpl	.-8      	; 0x2422 <MDIO_VoidSetPinValue+0x1f0>
    242a:	80 95       	com	r24
    242c:	84 23       	and	r24, r20
    242e:	8c 93       	st	X, r24
	else
	{
		/*Wrong PIN ID or POrt ID*/
	}

}
    2430:	27 96       	adiw	r28, 0x07	; 7
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <MDIO_u8GetPinValue>:
 *
 * 			Here we get the Pin value of the given port and pin
 *
 *************************************************************************/
u8 MDIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	00 d0       	rcall	.+0      	; 0x2448 <MDIO_u8GetPinValue+0x6>
    2448:	00 d0       	rcall	.+0      	; 0x244a <MDIO_u8GetPinValue+0x8>
    244a:	0f 92       	push	r0
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	8a 83       	std	Y+2, r24	; 0x02
    2452:	6b 83       	std	Y+3, r22	; 0x03
	/*					check for pins and ports					*/
	u8 LOC_u8RetValue_var1;
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	84 30       	cpi	r24, 0x04	; 4
    2458:	08 f0       	brcs	.+2      	; 0x245c <MDIO_u8GetPinValue+0x1a>
    245a:	6c c0       	rjmp	.+216    	; 0x2534 <MDIO_u8GetPinValue+0xf2>
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	88 30       	cpi	r24, 0x08	; 8
    2460:	08 f0       	brcs	.+2      	; 0x2464 <MDIO_u8GetPinValue+0x22>
    2462:	68 c0       	rjmp	.+208    	; 0x2534 <MDIO_u8GetPinValue+0xf2>
	{

		switch(Copy_u8Port)
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	3d 83       	std	Y+5, r19	; 0x05
    246c:	2c 83       	std	Y+4, r18	; 0x04
    246e:	4c 81       	ldd	r20, Y+4	; 0x04
    2470:	5d 81       	ldd	r21, Y+5	; 0x05
    2472:	41 30       	cpi	r20, 0x01	; 1
    2474:	51 05       	cpc	r21, r1
    2476:	41 f1       	breq	.+80     	; 0x24c8 <MDIO_u8GetPinValue+0x86>
    2478:	8c 81       	ldd	r24, Y+4	; 0x04
    247a:	9d 81       	ldd	r25, Y+5	; 0x05
    247c:	82 30       	cpi	r24, 0x02	; 2
    247e:	91 05       	cpc	r25, r1
    2480:	34 f4       	brge	.+12     	; 0x248e <MDIO_u8GetPinValue+0x4c>
    2482:	2c 81       	ldd	r18, Y+4	; 0x04
    2484:	3d 81       	ldd	r19, Y+5	; 0x05
    2486:	21 15       	cp	r18, r1
    2488:	31 05       	cpc	r19, r1
    248a:	61 f0       	breq	.+24     	; 0x24a4 <MDIO_u8GetPinValue+0x62>
    248c:	55 c0       	rjmp	.+170    	; 0x2538 <MDIO_u8GetPinValue+0xf6>
    248e:	4c 81       	ldd	r20, Y+4	; 0x04
    2490:	5d 81       	ldd	r21, Y+5	; 0x05
    2492:	42 30       	cpi	r20, 0x02	; 2
    2494:	51 05       	cpc	r21, r1
    2496:	51 f1       	breq	.+84     	; 0x24ec <MDIO_u8GetPinValue+0xaa>
    2498:	8c 81       	ldd	r24, Y+4	; 0x04
    249a:	9d 81       	ldd	r25, Y+5	; 0x05
    249c:	83 30       	cpi	r24, 0x03	; 3
    249e:	91 05       	cpc	r25, r1
    24a0:	b9 f1       	breq	.+110    	; 0x2510 <MDIO_u8GetPinValue+0xce>
    24a2:	4a c0       	rjmp	.+148    	; 0x2538 <MDIO_u8GetPinValue+0xf6>
		{
			case DIO_PORTA: LOC_u8RetValue_var1 = GET_BIT(PINA_REG, Copy_u8Pin);break;
    24a4:	e9 e3       	ldi	r30, 0x39	; 57
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	28 2f       	mov	r18, r24
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	88 2f       	mov	r24, r24
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a9 01       	movw	r20, r18
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <MDIO_u8GetPinValue+0x7a>
    24b8:	55 95       	asr	r21
    24ba:	47 95       	ror	r20
    24bc:	8a 95       	dec	r24
    24be:	e2 f7       	brpl	.-8      	; 0x24b8 <MDIO_u8GetPinValue+0x76>
    24c0:	ca 01       	movw	r24, r20
    24c2:	81 70       	andi	r24, 0x01	; 1
    24c4:	89 83       	std	Y+1, r24	; 0x01
    24c6:	38 c0       	rjmp	.+112    	; 0x2538 <MDIO_u8GetPinValue+0xf6>
			case DIO_PORTB: LOC_u8RetValue_var1 = GET_BIT(PINB_REG, Copy_u8Pin);break;
    24c8:	e6 e3       	ldi	r30, 0x36	; 54
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	88 2f       	mov	r24, r24
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	a9 01       	movw	r20, r18
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <MDIO_u8GetPinValue+0x9e>
    24dc:	55 95       	asr	r21
    24de:	47 95       	ror	r20
    24e0:	8a 95       	dec	r24
    24e2:	e2 f7       	brpl	.-8      	; 0x24dc <MDIO_u8GetPinValue+0x9a>
    24e4:	ca 01       	movw	r24, r20
    24e6:	81 70       	andi	r24, 0x01	; 1
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	26 c0       	rjmp	.+76     	; 0x2538 <MDIO_u8GetPinValue+0xf6>
			case DIO_PORTC: LOC_u8RetValue_var1 = GET_BIT(PINC_REG, Copy_u8Pin);break;
    24ec:	e3 e3       	ldi	r30, 0x33	; 51
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	88 2f       	mov	r24, r24
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a9 01       	movw	r20, r18
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <MDIO_u8GetPinValue+0xc2>
    2500:	55 95       	asr	r21
    2502:	47 95       	ror	r20
    2504:	8a 95       	dec	r24
    2506:	e2 f7       	brpl	.-8      	; 0x2500 <MDIO_u8GetPinValue+0xbe>
    2508:	ca 01       	movw	r24, r20
    250a:	81 70       	andi	r24, 0x01	; 1
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	14 c0       	rjmp	.+40     	; 0x2538 <MDIO_u8GetPinValue+0xf6>
			case DIO_PORTD: LOC_u8RetValue_var1 = GET_BIT(PIND_REG, Copy_u8Pin);break;
    2510:	e0 e3       	ldi	r30, 0x30	; 48
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	88 2f       	mov	r24, r24
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a9 01       	movw	r20, r18
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <MDIO_u8GetPinValue+0xe6>
    2524:	55 95       	asr	r21
    2526:	47 95       	ror	r20
    2528:	8a 95       	dec	r24
    252a:	e2 f7       	brpl	.-8      	; 0x2524 <MDIO_u8GetPinValue+0xe2>
    252c:	ca 01       	movw	r24, r20
    252e:	81 70       	andi	r24, 0x01	; 1
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <MDIO_u8GetPinValue+0xf6>
		}
	}
	else
	{
		/*Wrong PIN ID or POrt ID*/
		LOC_u8RetValue_var1 = DIO_UNDEFINED_VAL;
    2534:	8f ef       	ldi	r24, 0xFF	; 255
    2536:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_u8RetValue_var1;
    2538:	89 81       	ldd	r24, Y+1	; 0x01

}
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	08 95       	ret

0000254a <MDIO_VoidSetPortDirection>:
 *
 * 			Here we Set the port direction of the given port to 1 or 0
 *
 *************************************************************************/
void MDIO_VoidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direc)
{
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	00 d0       	rcall	.+0      	; 0x2550 <MDIO_VoidSetPortDirection+0x6>
    2550:	00 d0       	rcall	.+0      	; 0x2552 <MDIO_VoidSetPortDirection+0x8>
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	6a 83       	std	Y+2, r22	; 0x02
	/*							check for Port							*/
	switch(Copy_u8Port)
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	28 2f       	mov	r18, r24
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	3c 83       	std	Y+4, r19	; 0x04
    2562:	2b 83       	std	Y+3, r18	; 0x03
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	81 30       	cpi	r24, 0x01	; 1
    256a:	91 05       	cpc	r25, r1
    256c:	d1 f0       	breq	.+52     	; 0x25a2 <MDIO_VoidSetPortDirection+0x58>
    256e:	2b 81       	ldd	r18, Y+3	; 0x03
    2570:	3c 81       	ldd	r19, Y+4	; 0x04
    2572:	22 30       	cpi	r18, 0x02	; 2
    2574:	31 05       	cpc	r19, r1
    2576:	2c f4       	brge	.+10     	; 0x2582 <MDIO_VoidSetPortDirection+0x38>
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	9c 81       	ldd	r25, Y+4	; 0x04
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	61 f0       	breq	.+24     	; 0x2598 <MDIO_VoidSetPortDirection+0x4e>
    2580:	1e c0       	rjmp	.+60     	; 0x25be <MDIO_VoidSetPortDirection+0x74>
    2582:	2b 81       	ldd	r18, Y+3	; 0x03
    2584:	3c 81       	ldd	r19, Y+4	; 0x04
    2586:	22 30       	cpi	r18, 0x02	; 2
    2588:	31 05       	cpc	r19, r1
    258a:	81 f0       	breq	.+32     	; 0x25ac <MDIO_VoidSetPortDirection+0x62>
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	9c 81       	ldd	r25, Y+4	; 0x04
    2590:	83 30       	cpi	r24, 0x03	; 3
    2592:	91 05       	cpc	r25, r1
    2594:	81 f0       	breq	.+32     	; 0x25b6 <MDIO_VoidSetPortDirection+0x6c>
    2596:	13 c0       	rjmp	.+38     	; 0x25be <MDIO_VoidSetPortDirection+0x74>
	{
		case DIO_PORTA:  DDRA_REG =  Copy_u8Direc; break;
    2598:	ea e3       	ldi	r30, 0x3A	; 58
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	80 83       	st	Z, r24
    25a0:	0e c0       	rjmp	.+28     	; 0x25be <MDIO_VoidSetPortDirection+0x74>
		case DIO_PORTB:  DDRB_REG =  Copy_u8Direc; break;
    25a2:	e7 e3       	ldi	r30, 0x37	; 55
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	80 83       	st	Z, r24
    25aa:	09 c0       	rjmp	.+18     	; 0x25be <MDIO_VoidSetPortDirection+0x74>
		case DIO_PORTC:  DDRC_REG =  Copy_u8Direc; break;
    25ac:	e4 e3       	ldi	r30, 0x34	; 52
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	80 83       	st	Z, r24
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <MDIO_VoidSetPortDirection+0x74>
		case DIO_PORTD:  DDRD_REG =  Copy_u8Direc; break;
    25b6:	e1 e3       	ldi	r30, 0x31	; 49
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	80 83       	st	Z, r24
		default: /*		Wrong POrt ID		*/	   break;
	}
}
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <MDIO_VoidSetPortValue>:
 *
 * 			Here we Set the port value of the given port to 1 or 0
 *
 *************************************************************************/
void MDIO_VoidSetPortValue(u8 Copy_u8Port ,u8 Copy_u8Value)
{
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <MDIO_VoidSetPortValue+0x6>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <MDIO_VoidSetPortValue+0x8>
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	6a 83       	std	Y+2, r22	; 0x02
	/*						check for Port								*/
	switch(Copy_u8Port)
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	28 2f       	mov	r18, r24
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	3c 83       	std	Y+4, r19	; 0x04
    25e4:	2b 83       	std	Y+3, r18	; 0x03
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ea:	81 30       	cpi	r24, 0x01	; 1
    25ec:	91 05       	cpc	r25, r1
    25ee:	d1 f0       	breq	.+52     	; 0x2624 <MDIO_VoidSetPortValue+0x58>
    25f0:	2b 81       	ldd	r18, Y+3	; 0x03
    25f2:	3c 81       	ldd	r19, Y+4	; 0x04
    25f4:	22 30       	cpi	r18, 0x02	; 2
    25f6:	31 05       	cpc	r19, r1
    25f8:	2c f4       	brge	.+10     	; 0x2604 <MDIO_VoidSetPortValue+0x38>
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	61 f0       	breq	.+24     	; 0x261a <MDIO_VoidSetPortValue+0x4e>
    2602:	1e c0       	rjmp	.+60     	; 0x2640 <MDIO_VoidSetPortValue+0x74>
    2604:	2b 81       	ldd	r18, Y+3	; 0x03
    2606:	3c 81       	ldd	r19, Y+4	; 0x04
    2608:	22 30       	cpi	r18, 0x02	; 2
    260a:	31 05       	cpc	r19, r1
    260c:	81 f0       	breq	.+32     	; 0x262e <MDIO_VoidSetPortValue+0x62>
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	9c 81       	ldd	r25, Y+4	; 0x04
    2612:	83 30       	cpi	r24, 0x03	; 3
    2614:	91 05       	cpc	r25, r1
    2616:	81 f0       	breq	.+32     	; 0x2638 <MDIO_VoidSetPortValue+0x6c>
    2618:	13 c0       	rjmp	.+38     	; 0x2640 <MDIO_VoidSetPortValue+0x74>
	{
		case DIO_PORTA:  PORTA_REG =  Copy_u8Value; break;
    261a:	eb e3       	ldi	r30, 0x3B	; 59
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	80 83       	st	Z, r24
    2622:	0e c0       	rjmp	.+28     	; 0x2640 <MDIO_VoidSetPortValue+0x74>
		case DIO_PORTB:  PORTB_REG =  Copy_u8Value; break;
    2624:	e8 e3       	ldi	r30, 0x38	; 56
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	80 83       	st	Z, r24
    262c:	09 c0       	rjmp	.+18     	; 0x2640 <MDIO_VoidSetPortValue+0x74>
		case DIO_PORTC:  PORTC_REG =  Copy_u8Value; break;
    262e:	e5 e3       	ldi	r30, 0x35	; 53
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	80 83       	st	Z, r24
    2636:	04 c0       	rjmp	.+8      	; 0x2640 <MDIO_VoidSetPortValue+0x74>
		case DIO_PORTD:  PORTD_REG =  Copy_u8Value; break;
    2638:	e2 e3       	ldi	r30, 0x32	; 50
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	80 83       	st	Z, r24
		default: /*		Wrong POrt ID		*/		break;
	}
}
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <MDIO_VoidTogglePin>:
 *
 * 			Here we toggle the Pin
 *
 *************************************************************************/
void MDIO_VoidTogglePin(u8 Copy_u8Port ,u8 Copy_u8Pin)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <MDIO_VoidTogglePin+0x6>
    2654:	00 d0       	rcall	.+0      	; 0x2656 <MDIO_VoidTogglePin+0x8>
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	6a 83       	std	Y+2, r22	; 0x02
	/*					check for pins and ports					*/
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	84 30       	cpi	r24, 0x04	; 4
    2662:	08 f0       	brcs	.+2      	; 0x2666 <MDIO_VoidTogglePin+0x18>
    2664:	72 c0       	rjmp	.+228    	; 0x274a <MDIO_VoidTogglePin+0xfc>
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	88 30       	cpi	r24, 0x08	; 8
    266a:	08 f0       	brcs	.+2      	; 0x266e <MDIO_VoidTogglePin+0x20>
    266c:	6e c0       	rjmp	.+220    	; 0x274a <MDIO_VoidTogglePin+0xfc>
	{
		switch(Copy_u8Port)
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	28 2f       	mov	r18, r24
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	3c 83       	std	Y+4, r19	; 0x04
    2676:	2b 83       	std	Y+3, r18	; 0x03
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	9c 81       	ldd	r25, Y+4	; 0x04
    267c:	81 30       	cpi	r24, 0x01	; 1
    267e:	91 05       	cpc	r25, r1
    2680:	49 f1       	breq	.+82     	; 0x26d4 <MDIO_VoidTogglePin+0x86>
    2682:	2b 81       	ldd	r18, Y+3	; 0x03
    2684:	3c 81       	ldd	r19, Y+4	; 0x04
    2686:	22 30       	cpi	r18, 0x02	; 2
    2688:	31 05       	cpc	r19, r1
    268a:	2c f4       	brge	.+10     	; 0x2696 <MDIO_VoidTogglePin+0x48>
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	9c 81       	ldd	r25, Y+4	; 0x04
    2690:	00 97       	sbiw	r24, 0x00	; 0
    2692:	61 f0       	breq	.+24     	; 0x26ac <MDIO_VoidTogglePin+0x5e>
    2694:	5a c0       	rjmp	.+180    	; 0x274a <MDIO_VoidTogglePin+0xfc>
    2696:	2b 81       	ldd	r18, Y+3	; 0x03
    2698:	3c 81       	ldd	r19, Y+4	; 0x04
    269a:	22 30       	cpi	r18, 0x02	; 2
    269c:	31 05       	cpc	r19, r1
    269e:	71 f1       	breq	.+92     	; 0x26fc <MDIO_VoidTogglePin+0xae>
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	9c 81       	ldd	r25, Y+4	; 0x04
    26a4:	83 30       	cpi	r24, 0x03	; 3
    26a6:	91 05       	cpc	r25, r1
    26a8:	e9 f1       	breq	.+122    	; 0x2724 <MDIO_VoidTogglePin+0xd6>
    26aa:	4f c0       	rjmp	.+158    	; 0x274a <MDIO_VoidTogglePin+0xfc>
		{
			case DIO_PORTA:TOGGLE_BIT(PORTA_REG, Copy_u8Pin); break;
    26ac:	ab e3       	ldi	r26, 0x3B	; 59
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	eb e3       	ldi	r30, 0x3B	; 59
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	48 2f       	mov	r20, r24
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	28 2f       	mov	r18, r24
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	02 2e       	mov	r0, r18
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <MDIO_VoidTogglePin+0x7c>
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	0a 94       	dec	r0
    26cc:	e2 f7       	brpl	.-8      	; 0x26c6 <MDIO_VoidTogglePin+0x78>
    26ce:	84 27       	eor	r24, r20
    26d0:	8c 93       	st	X, r24
    26d2:	3b c0       	rjmp	.+118    	; 0x274a <MDIO_VoidTogglePin+0xfc>
			case DIO_PORTB:TOGGLE_BIT(PORTB_REG, Copy_u8Pin); break;
    26d4:	a8 e3       	ldi	r26, 0x38	; 56
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e8 e3       	ldi	r30, 0x38	; 56
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	48 2f       	mov	r20, r24
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	02 2e       	mov	r0, r18
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <MDIO_VoidTogglePin+0xa4>
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	0a 94       	dec	r0
    26f4:	e2 f7       	brpl	.-8      	; 0x26ee <MDIO_VoidTogglePin+0xa0>
    26f6:	84 27       	eor	r24, r20
    26f8:	8c 93       	st	X, r24
    26fa:	27 c0       	rjmp	.+78     	; 0x274a <MDIO_VoidTogglePin+0xfc>
			case DIO_PORTC:TOGGLE_BIT(PORTC_REG, Copy_u8Pin); break;
    26fc:	a5 e3       	ldi	r26, 0x35	; 53
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e5 e3       	ldi	r30, 0x35	; 53
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	48 2f       	mov	r20, r24
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	28 2f       	mov	r18, r24
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	02 2e       	mov	r0, r18
    2714:	02 c0       	rjmp	.+4      	; 0x271a <MDIO_VoidTogglePin+0xcc>
    2716:	88 0f       	add	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	0a 94       	dec	r0
    271c:	e2 f7       	brpl	.-8      	; 0x2716 <MDIO_VoidTogglePin+0xc8>
    271e:	84 27       	eor	r24, r20
    2720:	8c 93       	st	X, r24
    2722:	13 c0       	rjmp	.+38     	; 0x274a <MDIO_VoidTogglePin+0xfc>
			case DIO_PORTD:TOGGLE_BIT(PORTD_REG, Copy_u8Pin); break;
    2724:	a2 e3       	ldi	r26, 0x32	; 50
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e2 e3       	ldi	r30, 0x32	; 50
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	48 2f       	mov	r20, r24
    2730:	8a 81       	ldd	r24, Y+2	; 0x02
    2732:	28 2f       	mov	r18, r24
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	02 2e       	mov	r0, r18
    273c:	02 c0       	rjmp	.+4      	; 0x2742 <MDIO_VoidTogglePin+0xf4>
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	0a 94       	dec	r0
    2744:	e2 f7       	brpl	.-8      	; 0x273e <MDIO_VoidTogglePin+0xf0>
    2746:	84 27       	eor	r24, r20
    2748:	8c 93       	st	X, r24
	}
	else
	{
		/*Wrong PIN ID or POrt ID*/
	}
}
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	08 95       	ret

00002758 <MDIO_VoidEnablePullUpResistor>:
 *
 * 			Here we Enable the pull up resistor
 *
 *************************************************************************/
void MDIO_VoidEnablePullUpResistor(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    2758:	df 93       	push	r29
    275a:	cf 93       	push	r28
    275c:	00 d0       	rcall	.+0      	; 0x275e <MDIO_VoidEnablePullUpResistor+0x6>
    275e:	00 d0       	rcall	.+0      	; 0x2760 <MDIO_VoidEnablePullUpResistor+0x8>
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	89 83       	std	Y+1, r24	; 0x01
    2766:	6a 83       	std	Y+2, r22	; 0x02
	/*					check for pins and ports					*/
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	84 30       	cpi	r24, 0x04	; 4
    276c:	08 f0       	brcs	.+2      	; 0x2770 <MDIO_VoidEnablePullUpResistor+0x18>
    276e:	72 c0       	rjmp	.+228    	; 0x2854 <MDIO_VoidEnablePullUpResistor+0xfc>
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	88 30       	cpi	r24, 0x08	; 8
    2774:	08 f0       	brcs	.+2      	; 0x2778 <MDIO_VoidEnablePullUpResistor+0x20>
    2776:	6e c0       	rjmp	.+220    	; 0x2854 <MDIO_VoidEnablePullUpResistor+0xfc>
	{
		switch(Copy_u8Port)
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	28 2f       	mov	r18, r24
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	3c 83       	std	Y+4, r19	; 0x04
    2780:	2b 83       	std	Y+3, r18	; 0x03
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	9c 81       	ldd	r25, Y+4	; 0x04
    2786:	81 30       	cpi	r24, 0x01	; 1
    2788:	91 05       	cpc	r25, r1
    278a:	49 f1       	breq	.+82     	; 0x27de <MDIO_VoidEnablePullUpResistor+0x86>
    278c:	2b 81       	ldd	r18, Y+3	; 0x03
    278e:	3c 81       	ldd	r19, Y+4	; 0x04
    2790:	22 30       	cpi	r18, 0x02	; 2
    2792:	31 05       	cpc	r19, r1
    2794:	2c f4       	brge	.+10     	; 0x27a0 <MDIO_VoidEnablePullUpResistor+0x48>
    2796:	8b 81       	ldd	r24, Y+3	; 0x03
    2798:	9c 81       	ldd	r25, Y+4	; 0x04
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	61 f0       	breq	.+24     	; 0x27b6 <MDIO_VoidEnablePullUpResistor+0x5e>
    279e:	5a c0       	rjmp	.+180    	; 0x2854 <MDIO_VoidEnablePullUpResistor+0xfc>
    27a0:	2b 81       	ldd	r18, Y+3	; 0x03
    27a2:	3c 81       	ldd	r19, Y+4	; 0x04
    27a4:	22 30       	cpi	r18, 0x02	; 2
    27a6:	31 05       	cpc	r19, r1
    27a8:	71 f1       	breq	.+92     	; 0x2806 <MDIO_VoidEnablePullUpResistor+0xae>
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	9c 81       	ldd	r25, Y+4	; 0x04
    27ae:	83 30       	cpi	r24, 0x03	; 3
    27b0:	91 05       	cpc	r25, r1
    27b2:	e9 f1       	breq	.+122    	; 0x282e <MDIO_VoidEnablePullUpResistor+0xd6>
    27b4:	4f c0       	rjmp	.+158    	; 0x2854 <MDIO_VoidEnablePullUpResistor+0xfc>
		{
			case DIO_PORTA:SET_BIT(PORTA_REG, Copy_u8Pin); break;
    27b6:	ab e3       	ldi	r26, 0x3B	; 59
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	eb e3       	ldi	r30, 0x3B	; 59
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	48 2f       	mov	r20, r24
    27c2:	8a 81       	ldd	r24, Y+2	; 0x02
    27c4:	28 2f       	mov	r18, r24
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	02 2e       	mov	r0, r18
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <MDIO_VoidEnablePullUpResistor+0x7c>
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	0a 94       	dec	r0
    27d6:	e2 f7       	brpl	.-8      	; 0x27d0 <MDIO_VoidEnablePullUpResistor+0x78>
    27d8:	84 2b       	or	r24, r20
    27da:	8c 93       	st	X, r24
    27dc:	3b c0       	rjmp	.+118    	; 0x2854 <MDIO_VoidEnablePullUpResistor+0xfc>
			case DIO_PORTB:SET_BIT(PORTB_REG, Copy_u8Pin); break;
    27de:	a8 e3       	ldi	r26, 0x38	; 56
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e8 e3       	ldi	r30, 0x38	; 56
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	48 2f       	mov	r20, r24
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	28 2f       	mov	r18, r24
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	02 2e       	mov	r0, r18
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <MDIO_VoidEnablePullUpResistor+0xa4>
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	0a 94       	dec	r0
    27fe:	e2 f7       	brpl	.-8      	; 0x27f8 <MDIO_VoidEnablePullUpResistor+0xa0>
    2800:	84 2b       	or	r24, r20
    2802:	8c 93       	st	X, r24
    2804:	27 c0       	rjmp	.+78     	; 0x2854 <MDIO_VoidEnablePullUpResistor+0xfc>
			case DIO_PORTC:SET_BIT(PORTC_REG, Copy_u8Pin); break;
    2806:	a5 e3       	ldi	r26, 0x35	; 53
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	e5 e3       	ldi	r30, 0x35	; 53
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	48 2f       	mov	r20, r24
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	28 2f       	mov	r18, r24
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	02 2e       	mov	r0, r18
    281e:	02 c0       	rjmp	.+4      	; 0x2824 <MDIO_VoidEnablePullUpResistor+0xcc>
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	0a 94       	dec	r0
    2826:	e2 f7       	brpl	.-8      	; 0x2820 <MDIO_VoidEnablePullUpResistor+0xc8>
    2828:	84 2b       	or	r24, r20
    282a:	8c 93       	st	X, r24
    282c:	13 c0       	rjmp	.+38     	; 0x2854 <MDIO_VoidEnablePullUpResistor+0xfc>
			case DIO_PORTD:SET_BIT(PORTD_REG, Copy_u8Pin); break;
    282e:	a2 e3       	ldi	r26, 0x32	; 50
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	e2 e3       	ldi	r30, 0x32	; 50
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	48 2f       	mov	r20, r24
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	28 2f       	mov	r18, r24
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	02 2e       	mov	r0, r18
    2846:	02 c0       	rjmp	.+4      	; 0x284c <MDIO_VoidEnablePullUpResistor+0xf4>
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	0a 94       	dec	r0
    284e:	e2 f7       	brpl	.-8      	; 0x2848 <MDIO_VoidEnablePullUpResistor+0xf0>
    2850:	84 2b       	or	r24, r20
    2852:	8c 93       	st	X, r24
	}
	else
	{
		/*Wrong PIN ID or POrt ID*/
	}
}
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <SPI_VoidMasterInit>:
 *
 * 							Function to initialize the MASTER OF THE SPI
 *
 *******************************************************************************************/
void SPI_VoidMasterInit(void)
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
	/*						SET MOSI AND SCK PINS AS OUTPUTS ALL OTHER AS INPUT				*/
	SET_BIT(PORTB_REG,PORTB_PIN5_MOSI);
    286a:	a8 e3       	ldi	r26, 0x38	; 56
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e8 e3       	ldi	r30, 0x38	; 56
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	80 62       	ori	r24, 0x20	; 32
    2876:	8c 93       	st	X, r24
}
    2878:	cf 91       	pop	r28
    287a:	df 91       	pop	r29
    287c:	08 95       	ret

0000287e <SPI_VoidMasterTransmitter>:
 *
 * 							Function to transmit Data from the SPI
 *
 *******************************************************************************************/
void SPI_VoidMasterTransmitter(u8 Copy_u8DataByte)
{
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	0f 92       	push	r0
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	89 83       	std	Y+1, r24	; 0x01

}
    288a:	0f 90       	pop	r0
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <SPI_VoidSlaveInit>:
 *
 * 							Function to initialize the SLAVE OF THE SPI
 *
 *******************************************************************************************/
void SPI_VoidSlaveInit(void)
{
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62

}
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <SPI_VoidSlaveReceiver>:
 *
 * 							Function to Receive Data from the SPI
 *
 *******************************************************************************************/
u8 SPI_VoidSlaveReceiver(void)
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	0f 92       	push	r0
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62



}
    28aa:	0f 90       	pop	r0
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <main>:
#include"avr/delay.h"



int main(void)
{
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62


	return 0;
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	90 e0       	ldi	r25, 0x00	; 0
}
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <__mulsi3>:
    28c4:	62 9f       	mul	r22, r18
    28c6:	d0 01       	movw	r26, r0
    28c8:	73 9f       	mul	r23, r19
    28ca:	f0 01       	movw	r30, r0
    28cc:	82 9f       	mul	r24, r18
    28ce:	e0 0d       	add	r30, r0
    28d0:	f1 1d       	adc	r31, r1
    28d2:	64 9f       	mul	r22, r20
    28d4:	e0 0d       	add	r30, r0
    28d6:	f1 1d       	adc	r31, r1
    28d8:	92 9f       	mul	r25, r18
    28da:	f0 0d       	add	r31, r0
    28dc:	83 9f       	mul	r24, r19
    28de:	f0 0d       	add	r31, r0
    28e0:	74 9f       	mul	r23, r20
    28e2:	f0 0d       	add	r31, r0
    28e4:	65 9f       	mul	r22, r21
    28e6:	f0 0d       	add	r31, r0
    28e8:	99 27       	eor	r25, r25
    28ea:	72 9f       	mul	r23, r18
    28ec:	b0 0d       	add	r27, r0
    28ee:	e1 1d       	adc	r30, r1
    28f0:	f9 1f       	adc	r31, r25
    28f2:	63 9f       	mul	r22, r19
    28f4:	b0 0d       	add	r27, r0
    28f6:	e1 1d       	adc	r30, r1
    28f8:	f9 1f       	adc	r31, r25
    28fa:	bd 01       	movw	r22, r26
    28fc:	cf 01       	movw	r24, r30
    28fe:	11 24       	eor	r1, r1
    2900:	08 95       	ret

00002902 <__udivmodsi4>:
    2902:	a1 e2       	ldi	r26, 0x21	; 33
    2904:	1a 2e       	mov	r1, r26
    2906:	aa 1b       	sub	r26, r26
    2908:	bb 1b       	sub	r27, r27
    290a:	fd 01       	movw	r30, r26
    290c:	0d c0       	rjmp	.+26     	; 0x2928 <__udivmodsi4_ep>

0000290e <__udivmodsi4_loop>:
    290e:	aa 1f       	adc	r26, r26
    2910:	bb 1f       	adc	r27, r27
    2912:	ee 1f       	adc	r30, r30
    2914:	ff 1f       	adc	r31, r31
    2916:	a2 17       	cp	r26, r18
    2918:	b3 07       	cpc	r27, r19
    291a:	e4 07       	cpc	r30, r20
    291c:	f5 07       	cpc	r31, r21
    291e:	20 f0       	brcs	.+8      	; 0x2928 <__udivmodsi4_ep>
    2920:	a2 1b       	sub	r26, r18
    2922:	b3 0b       	sbc	r27, r19
    2924:	e4 0b       	sbc	r30, r20
    2926:	f5 0b       	sbc	r31, r21

00002928 <__udivmodsi4_ep>:
    2928:	66 1f       	adc	r22, r22
    292a:	77 1f       	adc	r23, r23
    292c:	88 1f       	adc	r24, r24
    292e:	99 1f       	adc	r25, r25
    2930:	1a 94       	dec	r1
    2932:	69 f7       	brne	.-38     	; 0x290e <__udivmodsi4_loop>
    2934:	60 95       	com	r22
    2936:	70 95       	com	r23
    2938:	80 95       	com	r24
    293a:	90 95       	com	r25
    293c:	9b 01       	movw	r18, r22
    293e:	ac 01       	movw	r20, r24
    2940:	bd 01       	movw	r22, r26
    2942:	cf 01       	movw	r24, r30
    2944:	08 95       	ret

00002946 <__prologue_saves__>:
    2946:	2f 92       	push	r2
    2948:	3f 92       	push	r3
    294a:	4f 92       	push	r4
    294c:	5f 92       	push	r5
    294e:	6f 92       	push	r6
    2950:	7f 92       	push	r7
    2952:	8f 92       	push	r8
    2954:	9f 92       	push	r9
    2956:	af 92       	push	r10
    2958:	bf 92       	push	r11
    295a:	cf 92       	push	r12
    295c:	df 92       	push	r13
    295e:	ef 92       	push	r14
    2960:	ff 92       	push	r15
    2962:	0f 93       	push	r16
    2964:	1f 93       	push	r17
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	ca 1b       	sub	r28, r26
    2970:	db 0b       	sbc	r29, r27
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	f8 94       	cli
    2976:	de bf       	out	0x3e, r29	; 62
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	cd bf       	out	0x3d, r28	; 61
    297c:	09 94       	ijmp

0000297e <__epilogue_restores__>:
    297e:	2a 88       	ldd	r2, Y+18	; 0x12
    2980:	39 88       	ldd	r3, Y+17	; 0x11
    2982:	48 88       	ldd	r4, Y+16	; 0x10
    2984:	5f 84       	ldd	r5, Y+15	; 0x0f
    2986:	6e 84       	ldd	r6, Y+14	; 0x0e
    2988:	7d 84       	ldd	r7, Y+13	; 0x0d
    298a:	8c 84       	ldd	r8, Y+12	; 0x0c
    298c:	9b 84       	ldd	r9, Y+11	; 0x0b
    298e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2990:	b9 84       	ldd	r11, Y+9	; 0x09
    2992:	c8 84       	ldd	r12, Y+8	; 0x08
    2994:	df 80       	ldd	r13, Y+7	; 0x07
    2996:	ee 80       	ldd	r14, Y+6	; 0x06
    2998:	fd 80       	ldd	r15, Y+5	; 0x05
    299a:	0c 81       	ldd	r16, Y+4	; 0x04
    299c:	1b 81       	ldd	r17, Y+3	; 0x03
    299e:	aa 81       	ldd	r26, Y+2	; 0x02
    29a0:	b9 81       	ldd	r27, Y+1	; 0x01
    29a2:	ce 0f       	add	r28, r30
    29a4:	d1 1d       	adc	r29, r1
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61
    29b0:	ed 01       	movw	r28, r26
    29b2:	08 95       	ret

000029b4 <_exit>:
    29b4:	f8 94       	cli

000029b6 <__stop_program>:
    29b6:	ff cf       	rjmp	.-2      	; 0x29b6 <__stop_program>
