
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000024e  2**0
                  ALLOC
  2 .stab         00000468  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000408  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  74:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_VoidInit>:
 *
 * 						Initialize the ADC to be able to convert
 *
 *******************************************************************************************/
void ADC_VoidInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	ADC_ADMUX = (ADC_VREF << REFS0) | (ADC_RESULT_ADJUST << ADLAR);
  84:	e7 e2       	ldi	r30, 0x27	; 39
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 e4       	ldi	r24, 0x40	; 64
  8a:	80 83       	st	Z, r24

	ADC_ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1<< ADPS0);
  8c:	e6 e2       	ldi	r30, 0x26	; 38
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	87 e8       	ldi	r24, 0x87	; 135
  92:	80 83       	st	Z, r24

}
  94:	cf 91       	pop	r28
  96:	df 91       	pop	r29
  98:	08 95       	ret

0000009a <ADC_u16SetADCReading>:
 *
 * 						Setting the ADC  reading
 *
 *******************************************************************************************/
u16 ADC_u16SetADCReading(u8 Copy_u8ChannelIndex)
{
  9a:	df 93       	push	r29
  9c:	cf 93       	push	r28
  9e:	0f 92       	push	r0
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	89 83       	std	Y+1, r24	; 0x01
	/*			Make sure that channel index doesn't exceeds the 7 ADC channels				*/
	Copy_u8ChannelIndex = Copy_u8ChannelIndex & 0b00000111;
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	87 70       	andi	r24, 0x07	; 7
  aa:	89 83       	std	Y+1, r24	; 0x01
	/*			Clear the 3 bottom bits before selecting the channel						*/
	ADC_ADMUX = (ADC_ADMUX & 0xf8) | Copy_u8ChannelIndex;
  ac:	a7 e2       	ldi	r26, 0x27	; 39
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e7 e2       	ldi	r30, 0x27	; 39
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	98 2f       	mov	r25, r24
  b8:	98 7f       	andi	r25, 0xF8	; 248
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	89 2b       	or	r24, r25
  be:	8c 93       	st	X, r24
	/*			Start of the conversion after making sure that all is ok					*/
	ADC_ADCSRA |= (1 << ADC_ADCSRA);
  c0:	a6 e2       	ldi	r26, 0x26	; 38
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	e6 e2       	ldi	r30, 0x26	; 38
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	48 2f       	mov	r20, r24
  cc:	e6 e2       	ldi	r30, 0x26	; 38
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	28 2f       	mov	r18, r24
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 2e       	mov	r0, r18
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <ADC_u16SetADCReading+0x48>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <ADC_u16SetADCReading+0x44>
  e6:	84 2b       	or	r24, r20
  e8:	8c 93       	st	X, r24
	/*			This line making sure that enable flag set to 1								*/
	while(!(ADC_ADCSRA & (1 << ADIF)));
  ea:	e6 e2       	ldi	r30, 0x26	; 38
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 2f       	mov	r24, r24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	80 71       	andi	r24, 0x10	; 16
  f6:	90 70       	andi	r25, 0x00	; 0
  f8:	00 97       	sbiw	r24, 0x00	; 0
  fa:	b9 f3       	breq	.-18     	; 0xea <ADC_u16SetADCReading+0x50>
	/*			Return the value at the end of conversion									*/
	return ADC_ADCRES;
  fc:	e4 e2       	ldi	r30, 0x24	; 36
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	91 81       	ldd	r25, Z+1	; 0x01
}
 104:	0f 90       	pop	r0
 106:	cf 91       	pop	r28
 108:	df 91       	pop	r29
 10a:	08 95       	ret

0000010c <ADC_VoidEnable>:
 *
 * 						Enabling the ADC
 *
 *******************************************************************************************/
void ADC_VoidEnable(void)
{
 10c:	df 93       	push	r29
 10e:	cf 93       	push	r28
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62

}
 114:	cf 91       	pop	r28
 116:	df 91       	pop	r29
 118:	08 95       	ret

0000011a <ADC_VoidDisable>:
 *
 * 						Disabling the ADC
 *
 *******************************************************************************************/
void ADC_VoidDisable(void)
{
 11a:	df 93       	push	r29
 11c:	cf 93       	push	r28
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62

}
 122:	cf 91       	pop	r28
 124:	df 91       	pop	r29
 126:	08 95       	ret

00000128 <ADC_VoidStartOfConversion>:
 *
 * 						Send the start of conversion bit to start the conversion
 *
 *******************************************************************************************/
void ADC_VoidStartOfConversion(u8 Copy_u8ChannelIndex)
{
 128:	df 93       	push	r29
 12a:	cf 93       	push	r28
 12c:	0f 92       	push	r0
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	89 83       	std	Y+1, r24	; 0x01

	/*			Make sure that channel index doesn't exceeds the 7 ADC channels				*/
	Copy_u8ChannelIndex = Copy_u8ChannelIndex & 0b00000111;
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	87 70       	andi	r24, 0x07	; 7
 138:	89 83       	std	Y+1, r24	; 0x01
	/*			Clear the 3 bottom bits before selecting the channel						*/
	ADC_ADMUX = (ADC_ADMUX & 0xf8) | Copy_u8ChannelIndex;
 13a:	a7 e2       	ldi	r26, 0x27	; 39
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e7 e2       	ldi	r30, 0x27	; 39
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	98 2f       	mov	r25, r24
 146:	98 7f       	andi	r25, 0xF8	; 248
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	89 2b       	or	r24, r25
 14c:	8c 93       	st	X, r24
	/*			Start of the conversion after making sure that all is ok					*/
	ADC_ADCSRA |= (1 << ADC_ADCSRA);
 14e:	a6 e2       	ldi	r26, 0x26	; 38
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	e6 e2       	ldi	r30, 0x26	; 38
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	48 2f       	mov	r20, r24
 15a:	e6 e2       	ldi	r30, 0x26	; 38
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	28 2f       	mov	r18, r24
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 2e       	mov	r0, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <ADC_VoidStartOfConversion+0x48>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <ADC_VoidStartOfConversion+0x44>
 174:	84 2b       	or	r24, r20
 176:	8c 93       	st	X, r24

}
 178:	0f 90       	pop	r0
 17a:	cf 91       	pop	r28
 17c:	df 91       	pop	r29
 17e:	08 95       	ret

00000180 <ADC_GetDigital>:

u16 ADC_GetDigital(void)
{
 180:	df 93       	push	r29
 182:	cf 93       	push	r28
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62

	return Result;
 188:	80 91 60 00 	lds	r24, 0x0060
 18c:	90 91 61 00 	lds	r25, 0x0061
}
 190:	cf 91       	pop	r28
 192:	df 91       	pop	r29
 194:	08 95       	ret

00000196 <ISR>:



ISR(ADC_vect)
{
 196:	df 93       	push	r29
 198:	cf 93       	push	r28
 19a:	00 d0       	rcall	.+0      	; 0x19c <ISR+0x6>
 19c:	00 d0       	rcall	.+0      	; 0x19e <ISR+0x8>
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	9a 83       	std	Y+2, r25	; 0x02
 1a4:	89 83       	std	Y+1, r24	; 0x01
	Result = ADC_ADCRES;
 1a6:	e4 e2       	ldi	r30, 0x24	; 36
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	91 81       	ldd	r25, Z+1	; 0x01
 1ae:	90 93 61 00 	sts	0x0061, r25
 1b2:	80 93 60 00 	sts	0x0060, r24

}
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	cf 91       	pop	r28
 1c0:	df 91       	pop	r29
 1c2:	08 95       	ret

000001c4 <main>:

#include"ADC_Interface.h"
#include"ADC_CNF.h"

int main(void)
{
 1c4:	df 93       	push	r29
 1c6:	cf 93       	push	r28
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62

	return 0;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
}
 1d0:	cf 91       	pop	r28
 1d2:	df 91       	pop	r29
 1d4:	08 95       	ret

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
