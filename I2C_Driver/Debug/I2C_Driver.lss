
I2C_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000294  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000630  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000578  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3a 01 	call	0x274	; 0x274 <main>
  64:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Master_VoidInit>:
 *
 * 						Initialization function for the I2C
 *
 *******************************************************************************************/
void I2C_Master_VoidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/*					*/
	TWBR = 0x02;
  74:	e0 e2       	ldi	r30, 0x20	; 32
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	82 e0       	ldi	r24, 0x02	; 2
  7a:	80 83       	st	Z, r24
	/*	*/
	SET_BIT(TWCR,TWINT);
  7c:	a6 e5       	ldi	r26, 0x56	; 86
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	e6 e5       	ldi	r30, 0x56	; 86
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 68       	ori	r24, 0x80	; 128
  88:	8c 93       	st	X, r24
	/**/
	CLR_BIT(TWCR,TWEA);
  8a:	a6 e5       	ldi	r26, 0x56	; 86
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e6 e5       	ldi	r30, 0x56	; 86
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	8f 7b       	andi	r24, 0xBF	; 191
  96:	8c 93       	st	X, r24
	/**/
	SET_BIT(TWCR,TWEN);
  98:	a6 e5       	ldi	r26, 0x56	; 86
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	e6 e5       	ldi	r30, 0x56	; 86
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	8c 93       	st	X, r24
}
  a6:	cf 91       	pop	r28
  a8:	df 91       	pop	r29
  aa:	08 95       	ret

000000ac <I2C_Slave_VoidInit>:
 *
 * 						Initialization function for the I2C
 *
 *******************************************************************************************/
void I2C_Slave_VoidInit(void)
{
  ac:	df 93       	push	r29
  ae:	cf 93       	push	r28
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
	/**/
	SET_BIT(TWCR,TWEN);
  b4:	a6 e5       	ldi	r26, 0x56	; 86
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e6 e5       	ldi	r30, 0x56	; 86
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	8c 93       	st	X, r24
	/**/

}
  c2:	cf 91       	pop	r28
  c4:	df 91       	pop	r29
  c6:	08 95       	ret

000000c8 <I2C_VoidStartCondition>:
 *
 * 						Function to send the start condition and start the transmit
 *
 *******************************************************************************************/
void I2C_VoidStartCondition(void)
{
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	/**/
	SET_BIT(TWCR,TWINT);
  d0:	a6 e5       	ldi	r26, 0x56	; 86
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	e6 e5       	ldi	r30, 0x56	; 86
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	8c 93       	st	X, r24
	/**/
	SET_BIT(TWCR,TWSTA);
  de:	a6 e5       	ldi	r26, 0x56	; 86
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	e6 e5       	ldi	r30, 0x56	; 86
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 62       	ori	r24, 0x20	; 32
  ea:	8c 93       	st	X, r24
	/**/
	SET_BIT(TWCR,TWEN);
  ec:	a6 e5       	ldi	r26, 0x56	; 86
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	e6 e5       	ldi	r30, 0x56	; 86
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	84 60       	ori	r24, 0x04	; 4
  f8:	8c 93       	st	X, r24
	/**/
	while (!(TWCR & (1<<TWINT)));
  fa:	e6 e5       	ldi	r30, 0x56	; 86
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	88 23       	and	r24, r24
 102:	dc f7       	brge	.-10     	; 0xfa <I2C_VoidStartCondition+0x32>
}
 104:	cf 91       	pop	r28
 106:	df 91       	pop	r29
 108:	08 95       	ret

0000010a <I2C_VoidStopCondition>:
 *
 * 						Function to send the stop condition and start the transmit
 *
 *******************************************************************************************/
void I2C_VoidStopCondition(void)
{
 10a:	df 93       	push	r29
 10c:	cf 93       	push	r28
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	/**/
	SET_BIT(TWCR,TWINT);
 112:	a6 e5       	ldi	r26, 0x56	; 86
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e6 e5       	ldi	r30, 0x56	; 86
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 68       	ori	r24, 0x80	; 128
 11e:	8c 93       	st	X, r24
	/**/
	SET_BIT(TWCR,TWSTO);
 120:	a6 e5       	ldi	r26, 0x56	; 86
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e6 e5       	ldi	r30, 0x56	; 86
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	8c 93       	st	X, r24
	/**/
	SET_BIT(TWCR,TWEN);
 12e:	a6 e5       	ldi	r26, 0x56	; 86
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e6 e5       	ldi	r30, 0x56	; 86
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	84 60       	ori	r24, 0x04	; 4
 13a:	8c 93       	st	X, r24
	/**/
	while (!(TWCR & (1<<TWINT)));
 13c:	e6 e5       	ldi	r30, 0x56	; 86
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	88 23       	and	r24, r24
 144:	dc f7       	brge	.-10     	; 0x13c <I2C_VoidStopCondition+0x32>
}
 146:	cf 91       	pop	r28
 148:	df 91       	pop	r29
 14a:	08 95       	ret

0000014c <I2C_VoidSendSlaveAddress_Read>:
 *
 * 						Refresh function for the watch dog timer
 *
 *******************************************************************************************/
void I2C_VoidSendSlaveAddress_Read(u8 Copy_u8SlaveAddress)
{
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	0f 92       	push	r0
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	89 83       	std	Y+1, r24	; 0x01
	/*					Shift the address to make sure that it is the MSB	*/
	TWDR = (Copy_u8SlaveAddress << 1) | 0x01;
 158:	e3 e2       	ldi	r30, 0x23	; 35
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	88 2f       	mov	r24, r24
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	81 60       	ori	r24, 0x01	; 1
 168:	80 83       	st	Z, r24
	/**/
	TWCR = (1<<TWINT) | (1<<TWEN);
 16a:	e6 e5       	ldi	r30, 0x56	; 86
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	84 e8       	ldi	r24, 0x84	; 132
 170:	80 83       	st	Z, r24
	/*					Polling till the flag is up 						*/
	while (!(TWCR & (1<<TWINT)));
 172:	e6 e5       	ldi	r30, 0x56	; 86
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	88 23       	and	r24, r24
 17a:	dc f7       	brge	.-10     	; 0x172 <I2C_VoidSendSlaveAddress_Read+0x26>
}
 17c:	0f 90       	pop	r0
 17e:	cf 91       	pop	r28
 180:	df 91       	pop	r29
 182:	08 95       	ret

00000184 <I2C_VoidSendSlaveAddress_Write>:
 *
 * 						Refresh function for the watch dog timer
 *
 *******************************************************************************************/
void I2C_VoidSendSlaveAddress_Write(u8 Copy_u8SlaveAddress)
{
 184:	df 93       	push	r29
 186:	cf 93       	push	r28
 188:	0f 92       	push	r0
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	89 83       	std	Y+1, r24	; 0x01
	/*					Shift the address to make sure that it is the MSB	*/
	TWDR = Copy_u8SlaveAddress << 1;
 190:	e3 e2       	ldi	r30, 0x23	; 35
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	88 0f       	add	r24, r24
 198:	80 83       	st	Z, r24
	/**/
	TWCR = (1<<TWINT) | (1<<TWEN);
 19a:	e6 e5       	ldi	r30, 0x56	; 86
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	84 e8       	ldi	r24, 0x84	; 132
 1a0:	80 83       	st	Z, r24
	/*					Polling till the flag is up 						*/
	while (!(TWCR & (1<<TWINT)));
 1a2:	e6 e5       	ldi	r30, 0x56	; 86
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	88 23       	and	r24, r24
 1aa:	dc f7       	brge	.-10     	; 0x1a2 <I2C_VoidSendSlaveAddress_Write+0x1e>
}
 1ac:	0f 90       	pop	r0
 1ae:	cf 91       	pop	r28
 1b0:	df 91       	pop	r29
 1b2:	08 95       	ret

000001b4 <I2C_VoidReadData>:
 *
 * 						Refresh function for the watch dog timer "Receive"
 *
 *******************************************************************************************/
u8 I2C_VoidReadData(void)
{
 1b4:	df 93       	push	r29
 1b6:	cf 93       	push	r28
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
	/**/
	TWCR = (1 << TWINT) | (1 << TWEN);
 1bc:	e6 e5       	ldi	r30, 0x56	; 86
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	84 e8       	ldi	r24, 0x84	; 132
 1c2:	80 83       	st	Z, r24
	/**/
	/*					Polling till the flag is up 						*/
	while (!(TWCR & (1<<TWINT)));
 1c4:	e6 e5       	ldi	r30, 0x56	; 86
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	88 23       	and	r24, r24
 1cc:	dc f7       	brge	.-10     	; 0x1c4 <I2C_VoidReadData+0x10>

	/*					Return the value in the data register				*/
	return TWDR;
 1ce:	e3 e2       	ldi	r30, 0x23	; 35
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
}
 1d4:	cf 91       	pop	r28
 1d6:	df 91       	pop	r29
 1d8:	08 95       	ret

000001da <I2C_VoidWriteData>:
 *
 * 						Function to write the data in the I2C
 *
 *******************************************************************************************/
void I2C_VoidWriteData(u8 Copy_Data)
{
 1da:	df 93       	push	r29
 1dc:	cf 93       	push	r28
 1de:	0f 92       	push	r0
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	89 83       	std	Y+1, r24	; 0x01
	/**/
	TWDR = Copy_Data;
 1e6:	e3 e2       	ldi	r30, 0x23	; 35
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	80 83       	st	Z, r24
	/**/
	TWCR = (1<<TWINT) | (1<<TWEN);
 1ee:	e6 e5       	ldi	r30, 0x56	; 86
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	84 e8       	ldi	r24, 0x84	; 132
 1f4:	80 83       	st	Z, r24
	/**/
	while (!(TWCR & (1<<TWINT)));
 1f6:	e6 e5       	ldi	r30, 0x56	; 86
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	88 23       	and	r24, r24
 1fe:	dc f7       	brge	.-10     	; 0x1f6 <I2C_VoidWriteData+0x1c>
}
 200:	0f 90       	pop	r0
 202:	cf 91       	pop	r28
 204:	df 91       	pop	r29
 206:	08 95       	ret

00000208 <I2C_VoidMasterReadData>:
 *
 * 						Refresh function for the watch dog timer
 *
 *******************************************************************************************/
void I2C_VoidMasterReadData(void)
{
 208:	df 93       	push	r29
 20a:	cf 93       	push	r28
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62

	/*					S send ACK 												*/

	/*					M send stop 											*/

}
 210:	cf 91       	pop	r28
 212:	df 91       	pop	r29
 214:	08 95       	ret

00000216 <I2C_u8CheckStatus>:
 *
 * 						Function to check the status of the register and I2C
 *
 *******************************************************************************************/
u8 I2C_u8CheckStatus(u8 Copy_u8Status)
{
 216:	df 93       	push	r29
 218:	cf 93       	push	r28
 21a:	00 d0       	rcall	.+0      	; 0x21c <I2C_u8CheckStatus+0x6>
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	89 83       	std	Y+1, r24	; 0x01
	/**/
	if((TWSR & 0xF8) == Copy_u8Status)
 222:	e1 e2       	ldi	r30, 0x21	; 33
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	88 2f       	mov	r24, r24
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	9c 01       	movw	r18, r24
 22e:	28 7f       	andi	r18, 0xF8	; 248
 230:	30 70       	andi	r19, 0x00	; 0
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	88 2f       	mov	r24, r24
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	28 17       	cp	r18, r24
 23a:	39 07       	cpc	r19, r25
 23c:	19 f4       	brne	.+6      	; 0x244 <I2C_u8CheckStatus+0x2e>
	{
		return 1;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	8a 83       	std	Y+2, r24	; 0x02
 242:	01 c0       	rjmp	.+2      	; 0x246 <I2C_u8CheckStatus+0x30>

	}
	else
		return 0;
 244:	1a 82       	std	Y+2, r1	; 0x02
 246:	8a 81       	ldd	r24, Y+2	; 0x02
}
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	cf 91       	pop	r28
 24e:	df 91       	pop	r29
 250:	08 95       	ret

00000252 <I2C_VoidRepeatedStart>:
 *
 * 						Function to send the repeated start condition and start the transmit
 *
 *******************************************************************************************/
void I2C_VoidRepeatedStart(void)
{
 252:	df 93       	push	r29
 254:	cf 93       	push	r28
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62


}
 25a:	cf 91       	pop	r28
 25c:	df 91       	pop	r29
 25e:	08 95       	ret

00000260 <I2C_VoidSlaveSendData>:
 *
 * 						Refresh function for the watch dog timer
 *
 *******************************************************************************************/
void I2C_VoidSlaveSendData(u8 Copy_u8Data)
{
 260:	df 93       	push	r29
 262:	cf 93       	push	r28
 264:	0f 92       	push	r0
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	89 83       	std	Y+1, r24	; 0x01

}
 26c:	0f 90       	pop	r0
 26e:	cf 91       	pop	r28
 270:	df 91       	pop	r29
 272:	08 95       	ret

00000274 <main>:
#include"I2C_Interface.h"



int main(void)
{
 274:	df 93       	push	r29
 276:	cf 93       	push	r28
 278:	0f 92       	push	r0
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
	I2C_Master_VoidInit();
 27e:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Master_VoidInit>
	/**/
	while(1)
	{
		I2C_VoidStartCondition();
 282:	0e 94 64 00 	call	0xc8	; 0xc8 <I2C_VoidStartCondition>
		u8 Copy_Status = I2C_u8CheckStatus(0x08);
 286:	88 e0       	ldi	r24, 0x08	; 8
 288:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_u8CheckStatus>
 28c:	89 83       	std	Y+1, r24	; 0x01
 28e:	f9 cf       	rjmp	.-14     	; 0x282 <main+0xe>

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
