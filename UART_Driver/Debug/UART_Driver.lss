
UART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003054  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00003054  000030e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800182  00800182  0000320a  2**0
                  ALLOC
  3 .stab         000026b8  00000000  00000000  0000320c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fe7  00000000  00000000  000058c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000068ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00006a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00006bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00008c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00009d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000ad70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000af10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000b1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000badc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <main>
      8a:	0c 94 28 18 	jmp	0x3050	; 0x3050 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e7       	ldi	r26, 0x79	; 121
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0d 18 	jmp	0x301a	; 0x301a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e7       	ldi	r24, 0x79	; 121
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0d 18 	jmp	0x301a	; 0x301a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 16 18 	jmp	0x302c	; 0x302c <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	ef 57       	subi	r30, 0x7F	; 127
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <HLCD_VoidSendChar>:
 *
 *					This Function send a character to the LCD
 *
 **********************************************************************/
void HLCD_VoidSendChar(u8 Copy_u8Data)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	6d 97       	sbiw	r28, 0x1d	; 29
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	8d 8f       	std	Y+29, r24	; 0x1d
	/*								set RS pin							*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RS_PIN,DIO_PIN_HIGH);
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_VoidSetPinValue>
	/*								clear RW pin						*/
	/*				here we set the pin value to port B pin 1 to 0v		*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RW_PIN,DIO_PIN_LOW);
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_VoidSetPinValue>

	/*				here we set the port C to the given data			*/
	MDIO_VoidSetPortValue(HLCD_DATA_PORT, Copy_u8Data);
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	6d 8d       	ldd	r22, Y+29	; 0x1d
     cce:	0e 94 ee 12 	call	0x25dc	; 0x25dc <MDIO_VoidSetPortValue>
	/*				set E pin to HIGH									*/
	/*				here we set the pin value to port B pin 0 to 5v		*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_E_PIN,DIO_PIN_HIGH);
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	62 e0       	ldi	r22, 0x02	; 2
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_VoidSetPinValue>
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e8       	ldi	r26, 0x80	; 128
     ce2:	bf e3       	ldi	r27, 0x3F	; 63
     ce4:	89 8f       	std	Y+25, r24	; 0x19
     ce6:	9a 8f       	std	Y+26, r25	; 0x1a
     ce8:	ab 8f       	std	Y+27, r26	; 0x1b
     cea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cec:	69 8d       	ldd	r22, Y+25	; 0x19
     cee:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	4a ef       	ldi	r20, 0xFA	; 250
     cfa:	54 e4       	ldi	r21, 0x44	; 68
     cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	8d 8b       	std	Y+21, r24	; 0x15
     d06:	9e 8b       	std	Y+22, r25	; 0x16
     d08:	af 8b       	std	Y+23, r26	; 0x17
     d0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d0c:	6d 89       	ldd	r22, Y+21	; 0x15
     d0e:	7e 89       	ldd	r23, Y+22	; 0x16
     d10:	8f 89       	ldd	r24, Y+23	; 0x17
     d12:	98 8d       	ldd	r25, Y+24	; 0x18
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e8       	ldi	r20, 0x80	; 128
     d1a:	5f e3       	ldi	r21, 0x3F	; 63
     d1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d20:	88 23       	and	r24, r24
     d22:	2c f4       	brge	.+10     	; 0xd2e <HLCD_VoidSendChar+0x8e>
		__ticks = 1;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9c 8b       	std	Y+20, r25	; 0x14
     d2a:	8b 8b       	std	Y+19, r24	; 0x13
     d2c:	3f c0       	rjmp	.+126    	; 0xdac <HLCD_VoidSendChar+0x10c>
	else if (__tmp > 65535)
     d2e:	6d 89       	ldd	r22, Y+21	; 0x15
     d30:	7e 89       	ldd	r23, Y+22	; 0x16
     d32:	8f 89       	ldd	r24, Y+23	; 0x17
     d34:	98 8d       	ldd	r25, Y+24	; 0x18
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	3f ef       	ldi	r19, 0xFF	; 255
     d3a:	4f e7       	ldi	r20, 0x7F	; 127
     d3c:	57 e4       	ldi	r21, 0x47	; 71
     d3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d42:	18 16       	cp	r1, r24
     d44:	4c f5       	brge	.+82     	; 0xd98 <HLCD_VoidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d46:	69 8d       	ldd	r22, Y+25	; 0x19
     d48:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e2       	ldi	r20, 0x20	; 32
     d54:	51 e4       	ldi	r21, 0x41	; 65
     d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	bc 01       	movw	r22, r24
     d60:	cd 01       	movw	r24, r26
     d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	9c 8b       	std	Y+20, r25	; 0x14
     d6c:	8b 8b       	std	Y+19, r24	; 0x13
     d6e:	0f c0       	rjmp	.+30     	; 0xd8e <HLCD_VoidSendChar+0xee>
     d70:	88 ec       	ldi	r24, 0xC8	; 200
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	9a 8b       	std	Y+18, r25	; 0x12
     d76:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d78:	89 89       	ldd	r24, Y+17	; 0x11
     d7a:	9a 89       	ldd	r25, Y+18	; 0x12
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	f1 f7       	brne	.-4      	; 0xd7c <HLCD_VoidSendChar+0xdc>
     d80:	9a 8b       	std	Y+18, r25	; 0x12
     d82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d84:	8b 89       	ldd	r24, Y+19	; 0x13
     d86:	9c 89       	ldd	r25, Y+20	; 0x14
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	9c 8b       	std	Y+20, r25	; 0x14
     d8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8e:	8b 89       	ldd	r24, Y+19	; 0x13
     d90:	9c 89       	ldd	r25, Y+20	; 0x14
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	69 f7       	brne	.-38     	; 0xd70 <HLCD_VoidSendChar+0xd0>
     d96:	14 c0       	rjmp	.+40     	; 0xdc0 <HLCD_VoidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d98:	6d 89       	ldd	r22, Y+21	; 0x15
     d9a:	7e 89       	ldd	r23, Y+22	; 0x16
     d9c:	8f 89       	ldd	r24, Y+23	; 0x17
     d9e:	98 8d       	ldd	r25, Y+24	; 0x18
     da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	9c 8b       	std	Y+20, r25	; 0x14
     daa:	8b 8b       	std	Y+19, r24	; 0x13
     dac:	8b 89       	ldd	r24, Y+19	; 0x13
     dae:	9c 89       	ldd	r25, Y+20	; 0x14
     db0:	98 8b       	std	Y+16, r25	; 0x10
     db2:	8f 87       	std	Y+15, r24	; 0x0f
     db4:	8f 85       	ldd	r24, Y+15	; 0x0f
     db6:	98 89       	ldd	r25, Y+16	; 0x10
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <HLCD_VoidSendChar+0x118>
     dbc:	98 8b       	std	Y+16, r25	; 0x10
     dbe:	8f 87       	std	Y+15, r24	; 0x0f
	/*				Delay Function for 10 microsecond					*/
	_delay_ms(1);
	/*							clear E pin								*/
	/*		here we set the pin value to port B pin 2 to 5v				*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_E_PIN,DIO_PIN_LOW);
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	62 e0       	ldi	r22, 0x02	; 2
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_VoidSetPinValue>
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	a0 e8       	ldi	r26, 0x80	; 128
     dd0:	b0 e4       	ldi	r27, 0x40	; 64
     dd2:	8b 87       	std	Y+11, r24	; 0x0b
     dd4:	9c 87       	std	Y+12, r25	; 0x0c
     dd6:	ad 87       	std	Y+13, r26	; 0x0d
     dd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dda:	6b 85       	ldd	r22, Y+11	; 0x0b
     ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dde:	8d 85       	ldd	r24, Y+13	; 0x0d
     de0:	9e 85       	ldd	r25, Y+14	; 0x0e
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	4a ef       	ldi	r20, 0xFA	; 250
     de8:	54 e4       	ldi	r21, 0x44	; 68
     dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	8f 83       	std	Y+7, r24	; 0x07
     df4:	98 87       	std	Y+8, r25	; 0x08
     df6:	a9 87       	std	Y+9, r26	; 0x09
     df8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dfa:	6f 81       	ldd	r22, Y+7	; 0x07
     dfc:	78 85       	ldd	r23, Y+8	; 0x08
     dfe:	89 85       	ldd	r24, Y+9	; 0x09
     e00:	9a 85       	ldd	r25, Y+10	; 0x0a
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e8       	ldi	r20, 0x80	; 128
     e08:	5f e3       	ldi	r21, 0x3F	; 63
     e0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e0e:	88 23       	and	r24, r24
     e10:	2c f4       	brge	.+10     	; 0xe1c <HLCD_VoidSendChar+0x17c>
		__ticks = 1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	9e 83       	std	Y+6, r25	; 0x06
     e18:	8d 83       	std	Y+5, r24	; 0x05
     e1a:	3f c0       	rjmp	.+126    	; 0xe9a <HLCD_VoidSendChar+0x1fa>
	else if (__tmp > 65535)
     e1c:	6f 81       	ldd	r22, Y+7	; 0x07
     e1e:	78 85       	ldd	r23, Y+8	; 0x08
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	3f ef       	ldi	r19, 0xFF	; 255
     e28:	4f e7       	ldi	r20, 0x7F	; 127
     e2a:	57 e4       	ldi	r21, 0x47	; 71
     e2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e30:	18 16       	cp	r1, r24
     e32:	4c f5       	brge	.+82     	; 0xe86 <HLCD_VoidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e34:	6b 85       	ldd	r22, Y+11	; 0x0b
     e36:	7c 85       	ldd	r23, Y+12	; 0x0c
     e38:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e2       	ldi	r20, 0x20	; 32
     e42:	51 e4       	ldi	r21, 0x41	; 65
     e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	bc 01       	movw	r22, r24
     e4e:	cd 01       	movw	r24, r26
     e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	9e 83       	std	Y+6, r25	; 0x06
     e5a:	8d 83       	std	Y+5, r24	; 0x05
     e5c:	0f c0       	rjmp	.+30     	; 0xe7c <HLCD_VoidSendChar+0x1dc>
     e5e:	88 ec       	ldi	r24, 0xC8	; 200
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	8b 83       	std	Y+3, r24	; 0x03
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <HLCD_VoidSendChar+0x1ca>
     e6e:	9c 83       	std	Y+4, r25	; 0x04
     e70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e72:	8d 81       	ldd	r24, Y+5	; 0x05
     e74:	9e 81       	ldd	r25, Y+6	; 0x06
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	69 f7       	brne	.-38     	; 0xe5e <HLCD_VoidSendChar+0x1be>
     e84:	14 c0       	rjmp	.+40     	; 0xeae <HLCD_VoidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e86:	6f 81       	ldd	r22, Y+7	; 0x07
     e88:	78 85       	ldd	r23, Y+8	; 0x08
     e8a:	89 85       	ldd	r24, Y+9	; 0x09
     e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	9e 83       	std	Y+6, r25	; 0x06
     e98:	8d 83       	std	Y+5, r24	; 0x05
     e9a:	8d 81       	ldd	r24, Y+5	; 0x05
     e9c:	9e 81       	ldd	r25, Y+6	; 0x06
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	9a 81       	ldd	r25, Y+2	; 0x02
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <HLCD_VoidSendChar+0x206>
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01
	/*Delay Function for 1ms to make sure that the LCD complete the task*/
	_delay_ms(4);

}
     eae:	6d 96       	adiw	r28, 0x1d	; 29
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <HLCD_VoidSendCommand>:
 *
 *		This Function send a command to the LCD
 *
 ************************************************************************/
void HLCD_VoidSendCommand(u8 Copy_u8Command)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	6d 97       	sbiw	r28, 0x1d	; 29
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	8d 8f       	std	Y+29, r24	; 0x1d
	/*					clear Rs pin									*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RS_PIN,DIO_PIN_LOW);
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_VoidSetPinValue>
	/*					clear RW pin									*/
	/*			here we set the pin value to port B pin 1 to 0v			*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_RW_PIN,DIO_PIN_LOW);
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_VoidSetPinValue>

	/*			Delay Function for 10 microsecond						*/
	/*			here we set the port C to the given data				*/
	MDIO_VoidSetPortValue(HLCD_DATA_PORT, Copy_u8Command);
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	6d 8d       	ldd	r22, Y+29	; 0x1d
     eee:	0e 94 ee 12 	call	0x25dc	; 0x25dc <MDIO_VoidSetPortValue>
	/*				set E pin to HIGH									*/
	/*			here we set the pin value to port B pin 0 to 5v			*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_E_PIN,DIO_PIN_HIGH);
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	62 e0       	ldi	r22, 0x02	; 2
     ef6:	41 e0       	ldi	r20, 0x01	; 1
     ef8:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_VoidSetPinValue>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a0 e8       	ldi	r26, 0x80	; 128
     f02:	bf e3       	ldi	r27, 0x3F	; 63
     f04:	89 8f       	std	Y+25, r24	; 0x19
     f06:	9a 8f       	std	Y+26, r25	; 0x1a
     f08:	ab 8f       	std	Y+27, r26	; 0x1b
     f0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f0c:	69 8d       	ldd	r22, Y+25	; 0x19
     f0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	4a ef       	ldi	r20, 0xFA	; 250
     f1a:	54 e4       	ldi	r21, 0x44	; 68
     f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	8d 8b       	std	Y+21, r24	; 0x15
     f26:	9e 8b       	std	Y+22, r25	; 0x16
     f28:	af 8b       	std	Y+23, r26	; 0x17
     f2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f2c:	6d 89       	ldd	r22, Y+21	; 0x15
     f2e:	7e 89       	ldd	r23, Y+22	; 0x16
     f30:	8f 89       	ldd	r24, Y+23	; 0x17
     f32:	98 8d       	ldd	r25, Y+24	; 0x18
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e8       	ldi	r20, 0x80	; 128
     f3a:	5f e3       	ldi	r21, 0x3F	; 63
     f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f40:	88 23       	and	r24, r24
     f42:	2c f4       	brge	.+10     	; 0xf4e <HLCD_VoidSendCommand+0x8e>
		__ticks = 1;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	9c 8b       	std	Y+20, r25	; 0x14
     f4a:	8b 8b       	std	Y+19, r24	; 0x13
     f4c:	3f c0       	rjmp	.+126    	; 0xfcc <HLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
     f4e:	6d 89       	ldd	r22, Y+21	; 0x15
     f50:	7e 89       	ldd	r23, Y+22	; 0x16
     f52:	8f 89       	ldd	r24, Y+23	; 0x17
     f54:	98 8d       	ldd	r25, Y+24	; 0x18
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	3f ef       	ldi	r19, 0xFF	; 255
     f5a:	4f e7       	ldi	r20, 0x7F	; 127
     f5c:	57 e4       	ldi	r21, 0x47	; 71
     f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f62:	18 16       	cp	r1, r24
     f64:	4c f5       	brge	.+82     	; 0xfb8 <HLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f66:	69 8d       	ldd	r22, Y+25	; 0x19
     f68:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e2       	ldi	r20, 0x20	; 32
     f74:	51 e4       	ldi	r21, 0x41	; 65
     f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	bc 01       	movw	r22, r24
     f80:	cd 01       	movw	r24, r26
     f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	9c 8b       	std	Y+20, r25	; 0x14
     f8c:	8b 8b       	std	Y+19, r24	; 0x13
     f8e:	0f c0       	rjmp	.+30     	; 0xfae <HLCD_VoidSendCommand+0xee>
     f90:	88 ec       	ldi	r24, 0xC8	; 200
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9a 8b       	std	Y+18, r25	; 0x12
     f96:	89 8b       	std	Y+17, r24	; 0x11
     f98:	89 89       	ldd	r24, Y+17	; 0x11
     f9a:	9a 89       	ldd	r25, Y+18	; 0x12
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <HLCD_VoidSendCommand+0xdc>
     fa0:	9a 8b       	std	Y+18, r25	; 0x12
     fa2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa4:	8b 89       	ldd	r24, Y+19	; 0x13
     fa6:	9c 89       	ldd	r25, Y+20	; 0x14
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	9c 8b       	std	Y+20, r25	; 0x14
     fac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fae:	8b 89       	ldd	r24, Y+19	; 0x13
     fb0:	9c 89       	ldd	r25, Y+20	; 0x14
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	69 f7       	brne	.-38     	; 0xf90 <HLCD_VoidSendCommand+0xd0>
     fb6:	14 c0       	rjmp	.+40     	; 0xfe0 <HLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb8:	6d 89       	ldd	r22, Y+21	; 0x15
     fba:	7e 89       	ldd	r23, Y+22	; 0x16
     fbc:	8f 89       	ldd	r24, Y+23	; 0x17
     fbe:	98 8d       	ldd	r25, Y+24	; 0x18
     fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	9c 8b       	std	Y+20, r25	; 0x14
     fca:	8b 8b       	std	Y+19, r24	; 0x13
     fcc:	8b 89       	ldd	r24, Y+19	; 0x13
     fce:	9c 89       	ldd	r25, Y+20	; 0x14
     fd0:	98 8b       	std	Y+16, r25	; 0x10
     fd2:	8f 87       	std	Y+15, r24	; 0x0f
     fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd6:	98 89       	ldd	r25, Y+16	; 0x10
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <HLCD_VoidSendCommand+0x118>
     fdc:	98 8b       	std	Y+16, r25	; 0x10
     fde:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*					clear E pin										*/
	/*			here we set the pin value to port B pin 2 to 5v			*/
	MDIO_VoidSetPinValue(HLCD_CONTROL_PORT,HLCD_E_PIN,DIO_PIN_LOW);
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	62 e0       	ldi	r22, 0x02	; 2
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_VoidSetPinValue>
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	a0 e8       	ldi	r26, 0x80	; 128
     ff0:	b0 e4       	ldi	r27, 0x40	; 64
     ff2:	8b 87       	std	Y+11, r24	; 0x0b
     ff4:	9c 87       	std	Y+12, r25	; 0x0c
     ff6:	ad 87       	std	Y+13, r26	; 0x0d
     ff8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
     ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1000:	9e 85       	ldd	r25, Y+14	; 0x0e
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	4a ef       	ldi	r20, 0xFA	; 250
    1008:	54 e4       	ldi	r21, 0x44	; 68
    100a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	8f 83       	std	Y+7, r24	; 0x07
    1014:	98 87       	std	Y+8, r25	; 0x08
    1016:	a9 87       	std	Y+9, r26	; 0x09
    1018:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    101a:	6f 81       	ldd	r22, Y+7	; 0x07
    101c:	78 85       	ldd	r23, Y+8	; 0x08
    101e:	89 85       	ldd	r24, Y+9	; 0x09
    1020:	9a 85       	ldd	r25, Y+10	; 0x0a
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e8       	ldi	r20, 0x80	; 128
    1028:	5f e3       	ldi	r21, 0x3F	; 63
    102a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    102e:	88 23       	and	r24, r24
    1030:	2c f4       	brge	.+10     	; 0x103c <HLCD_VoidSendCommand+0x17c>
		__ticks = 1;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	9e 83       	std	Y+6, r25	; 0x06
    1038:	8d 83       	std	Y+5, r24	; 0x05
    103a:	3f c0       	rjmp	.+126    	; 0x10ba <HLCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    103c:	6f 81       	ldd	r22, Y+7	; 0x07
    103e:	78 85       	ldd	r23, Y+8	; 0x08
    1040:	89 85       	ldd	r24, Y+9	; 0x09
    1042:	9a 85       	ldd	r25, Y+10	; 0x0a
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	3f ef       	ldi	r19, 0xFF	; 255
    1048:	4f e7       	ldi	r20, 0x7F	; 127
    104a:	57 e4       	ldi	r21, 0x47	; 71
    104c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1050:	18 16       	cp	r1, r24
    1052:	4c f5       	brge	.+82     	; 0x10a6 <HLCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1054:	6b 85       	ldd	r22, Y+11	; 0x0b
    1056:	7c 85       	ldd	r23, Y+12	; 0x0c
    1058:	8d 85       	ldd	r24, Y+13	; 0x0d
    105a:	9e 85       	ldd	r25, Y+14	; 0x0e
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e2       	ldi	r20, 0x20	; 32
    1062:	51 e4       	ldi	r21, 0x41	; 65
    1064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	bc 01       	movw	r22, r24
    106e:	cd 01       	movw	r24, r26
    1070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	9e 83       	std	Y+6, r25	; 0x06
    107a:	8d 83       	std	Y+5, r24	; 0x05
    107c:	0f c0       	rjmp	.+30     	; 0x109c <HLCD_VoidSendCommand+0x1dc>
    107e:	88 ec       	ldi	r24, 0xC8	; 200
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	9c 83       	std	Y+4, r25	; 0x04
    1084:	8b 83       	std	Y+3, r24	; 0x03
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <HLCD_VoidSendCommand+0x1ca>
    108e:	9c 83       	std	Y+4, r25	; 0x04
    1090:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	9e 83       	std	Y+6, r25	; 0x06
    109a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	69 f7       	brne	.-38     	; 0x107e <HLCD_VoidSendCommand+0x1be>
    10a4:	14 c0       	rjmp	.+40     	; 0x10ce <HLCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a6:	6f 81       	ldd	r22, Y+7	; 0x07
    10a8:	78 85       	ldd	r23, Y+8	; 0x08
    10aa:	89 85       	ldd	r24, Y+9	; 0x09
    10ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	9e 83       	std	Y+6, r25	; 0x06
    10b8:	8d 83       	std	Y+5, r24	; 0x05
    10ba:	8d 81       	ldd	r24, Y+5	; 0x05
    10bc:	9e 81       	ldd	r25, Y+6	; 0x06
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <HLCD_VoidSendCommand+0x206>
    10ca:	9a 83       	std	Y+2, r25	; 0x02
    10cc:	89 83       	std	Y+1, r24	; 0x01
	/*Delay Function for 1ms to make sure that the LCD complete the task*/
	_delay_ms(4);
}
    10ce:	6d 96       	adiw	r28, 0x1d	; 29
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <HLCD_enuInit>:
 *
 * 		Here we initialize each port direction and every pin we need
 *
 **********************************************************************/
void HLCD_enuInit(void)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	e8 97       	sbiw	r28, 0x38	; 56
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
	MDIO_VoidSetPortDirection(DIO_PORTC,DIO_PORT_HIGH);
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	6f ef       	ldi	r22, 0xFF	; 255
    10f8:	0e 94 ad 12 	call	0x255a	; 0x255a <MDIO_VoidSetPortDirection>
	/**/
	MDIO_VoidSetPinDirection(DIO_PORTB,DIO_PIN0,DIO_PIN_HIGH);
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	41 e0       	ldi	r20, 0x01	; 1
    1102:	0e 94 19 10 	call	0x2032	; 0x2032 <MDIO_VoidSetPinDirection>
	/**/
	MDIO_VoidSetPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_HIGH);
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	41 e0       	ldi	r20, 0x01	; 1
    110c:	0e 94 19 10 	call	0x2032	; 0x2032 <MDIO_VoidSetPinDirection>
	/**/
	MDIO_VoidSetPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_HIGH);
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	62 e0       	ldi	r22, 0x02	; 2
    1114:	41 e0       	ldi	r20, 0x01	; 1
    1116:	0e 94 19 10 	call	0x2032	; 0x2032 <MDIO_VoidSetPinDirection>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a8 e4       	ldi	r26, 0x48	; 72
    1120:	b2 e4       	ldi	r27, 0x42	; 66
    1122:	8d ab       	std	Y+53, r24	; 0x35
    1124:	9e ab       	std	Y+54, r25	; 0x36
    1126:	af ab       	std	Y+55, r26	; 0x37
    1128:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112a:	6d a9       	ldd	r22, Y+53	; 0x35
    112c:	7e a9       	ldd	r23, Y+54	; 0x36
    112e:	8f a9       	ldd	r24, Y+55	; 0x37
    1130:	98 ad       	ldd	r25, Y+56	; 0x38
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	4a ef       	ldi	r20, 0xFA	; 250
    1138:	54 e4       	ldi	r21, 0x44	; 68
    113a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	89 ab       	std	Y+49, r24	; 0x31
    1144:	9a ab       	std	Y+50, r25	; 0x32
    1146:	ab ab       	std	Y+51, r26	; 0x33
    1148:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    114a:	69 a9       	ldd	r22, Y+49	; 0x31
    114c:	7a a9       	ldd	r23, Y+50	; 0x32
    114e:	8b a9       	ldd	r24, Y+51	; 0x33
    1150:	9c a9       	ldd	r25, Y+52	; 0x34
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e8       	ldi	r20, 0x80	; 128
    1158:	5f e3       	ldi	r21, 0x3F	; 63
    115a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    115e:	88 23       	and	r24, r24
    1160:	2c f4       	brge	.+10     	; 0x116c <HLCD_enuInit+0x8c>
		__ticks = 1;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	98 ab       	std	Y+48, r25	; 0x30
    1168:	8f a7       	std	Y+47, r24	; 0x2f
    116a:	3f c0       	rjmp	.+126    	; 0x11ea <HLCD_enuInit+0x10a>
	else if (__tmp > 65535)
    116c:	69 a9       	ldd	r22, Y+49	; 0x31
    116e:	7a a9       	ldd	r23, Y+50	; 0x32
    1170:	8b a9       	ldd	r24, Y+51	; 0x33
    1172:	9c a9       	ldd	r25, Y+52	; 0x34
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	4f e7       	ldi	r20, 0x7F	; 127
    117a:	57 e4       	ldi	r21, 0x47	; 71
    117c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1180:	18 16       	cp	r1, r24
    1182:	4c f5       	brge	.+82     	; 0x11d6 <HLCD_enuInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1184:	6d a9       	ldd	r22, Y+53	; 0x35
    1186:	7e a9       	ldd	r23, Y+54	; 0x36
    1188:	8f a9       	ldd	r24, Y+55	; 0x37
    118a:	98 ad       	ldd	r25, Y+56	; 0x38
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e2       	ldi	r20, 0x20	; 32
    1192:	51 e4       	ldi	r21, 0x41	; 65
    1194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	bc 01       	movw	r22, r24
    119e:	cd 01       	movw	r24, r26
    11a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	98 ab       	std	Y+48, r25	; 0x30
    11aa:	8f a7       	std	Y+47, r24	; 0x2f
    11ac:	0f c0       	rjmp	.+30     	; 0x11cc <HLCD_enuInit+0xec>
    11ae:	88 ec       	ldi	r24, 0xC8	; 200
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	9e a7       	std	Y+46, r25	; 0x2e
    11b4:	8d a7       	std	Y+45, r24	; 0x2d
    11b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    11b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <HLCD_enuInit+0xda>
    11be:	9e a7       	std	Y+46, r25	; 0x2e
    11c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11c4:	98 a9       	ldd	r25, Y+48	; 0x30
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	98 ab       	std	Y+48, r25	; 0x30
    11ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ce:	98 a9       	ldd	r25, Y+48	; 0x30
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	69 f7       	brne	.-38     	; 0x11ae <HLCD_enuInit+0xce>
    11d4:	14 c0       	rjmp	.+40     	; 0x11fe <HLCD_enuInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d6:	69 a9       	ldd	r22, Y+49	; 0x31
    11d8:	7a a9       	ldd	r23, Y+50	; 0x32
    11da:	8b a9       	ldd	r24, Y+51	; 0x33
    11dc:	9c a9       	ldd	r25, Y+52	; 0x34
    11de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	98 ab       	std	Y+48, r25	; 0x30
    11e8:	8f a7       	std	Y+47, r24	; 0x2f
    11ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ec:	98 a9       	ldd	r25, Y+48	; 0x30
    11ee:	9c a7       	std	Y+44, r25	; 0x2c
    11f0:	8b a7       	std	Y+43, r24	; 0x2b
    11f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <HLCD_enuInit+0x116>
    11fa:	9c a7       	std	Y+44, r25	; 0x2c
    11fc:	8b a7       	std	Y+43, r24	; 0x2b
#if HLCD_INIT_MODE == HLCD_8_BIT_MODE

		/*					Delay for 30ms									*/
		_delay_ms(50);
		/*					set Port c to output							*/
		HLCD_VoidSendCommand(0b00111000);
    11fe:	88 e3       	ldi	r24, 0x38	; 56
    1200:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a0 e8       	ldi	r26, 0x80	; 128
    120a:	bf e3       	ldi	r27, 0x3F	; 63
    120c:	8f a3       	std	Y+39, r24	; 0x27
    120e:	98 a7       	std	Y+40, r25	; 0x28
    1210:	a9 a7       	std	Y+41, r26	; 0x29
    1212:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1214:	6f a1       	ldd	r22, Y+39	; 0x27
    1216:	78 a5       	ldd	r23, Y+40	; 0x28
    1218:	89 a5       	ldd	r24, Y+41	; 0x29
    121a:	9a a5       	ldd	r25, Y+42	; 0x2a
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	4a ef       	ldi	r20, 0xFA	; 250
    1222:	54 e4       	ldi	r21, 0x44	; 68
    1224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	8b a3       	std	Y+35, r24	; 0x23
    122e:	9c a3       	std	Y+36, r25	; 0x24
    1230:	ad a3       	std	Y+37, r26	; 0x25
    1232:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1234:	6b a1       	ldd	r22, Y+35	; 0x23
    1236:	7c a1       	ldd	r23, Y+36	; 0x24
    1238:	8d a1       	ldd	r24, Y+37	; 0x25
    123a:	9e a1       	ldd	r25, Y+38	; 0x26
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e8       	ldi	r20, 0x80	; 128
    1242:	5f e3       	ldi	r21, 0x3F	; 63
    1244:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1248:	88 23       	and	r24, r24
    124a:	2c f4       	brge	.+10     	; 0x1256 <HLCD_enuInit+0x176>
		__ticks = 1;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	9a a3       	std	Y+34, r25	; 0x22
    1252:	89 a3       	std	Y+33, r24	; 0x21
    1254:	3f c0       	rjmp	.+126    	; 0x12d4 <HLCD_enuInit+0x1f4>
	else if (__tmp > 65535)
    1256:	6b a1       	ldd	r22, Y+35	; 0x23
    1258:	7c a1       	ldd	r23, Y+36	; 0x24
    125a:	8d a1       	ldd	r24, Y+37	; 0x25
    125c:	9e a1       	ldd	r25, Y+38	; 0x26
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	3f ef       	ldi	r19, 0xFF	; 255
    1262:	4f e7       	ldi	r20, 0x7F	; 127
    1264:	57 e4       	ldi	r21, 0x47	; 71
    1266:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    126a:	18 16       	cp	r1, r24
    126c:	4c f5       	brge	.+82     	; 0x12c0 <HLCD_enuInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126e:	6f a1       	ldd	r22, Y+39	; 0x27
    1270:	78 a5       	ldd	r23, Y+40	; 0x28
    1272:	89 a5       	ldd	r24, Y+41	; 0x29
    1274:	9a a5       	ldd	r25, Y+42	; 0x2a
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e2       	ldi	r20, 0x20	; 32
    127c:	51 e4       	ldi	r21, 0x41	; 65
    127e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9a a3       	std	Y+34, r25	; 0x22
    1294:	89 a3       	std	Y+33, r24	; 0x21
    1296:	0f c0       	rjmp	.+30     	; 0x12b6 <HLCD_enuInit+0x1d6>
    1298:	88 ec       	ldi	r24, 0xC8	; 200
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	98 a3       	std	Y+32, r25	; 0x20
    129e:	8f 8f       	std	Y+31, r24	; 0x1f
    12a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12a2:	98 a1       	ldd	r25, Y+32	; 0x20
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <HLCD_enuInit+0x1c4>
    12a8:	98 a3       	std	Y+32, r25	; 0x20
    12aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ac:	89 a1       	ldd	r24, Y+33	; 0x21
    12ae:	9a a1       	ldd	r25, Y+34	; 0x22
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	9a a3       	std	Y+34, r25	; 0x22
    12b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b6:	89 a1       	ldd	r24, Y+33	; 0x21
    12b8:	9a a1       	ldd	r25, Y+34	; 0x22
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	69 f7       	brne	.-38     	; 0x1298 <HLCD_enuInit+0x1b8>
    12be:	14 c0       	rjmp	.+40     	; 0x12e8 <HLCD_enuInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c0:	6b a1       	ldd	r22, Y+35	; 0x23
    12c2:	7c a1       	ldd	r23, Y+36	; 0x24
    12c4:	8d a1       	ldd	r24, Y+37	; 0x25
    12c6:	9e a1       	ldd	r25, Y+38	; 0x26
    12c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	9a a3       	std	Y+34, r25	; 0x22
    12d2:	89 a3       	std	Y+33, r24	; 0x21
    12d4:	89 a1       	ldd	r24, Y+33	; 0x21
    12d6:	9a a1       	ldd	r25, Y+34	; 0x22
    12d8:	9e 8f       	std	Y+30, r25	; 0x1e
    12da:	8d 8f       	std	Y+29, r24	; 0x1d
    12dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <HLCD_enuInit+0x200>
    12e4:	9e 8f       	std	Y+30, r25	; 0x1e
    12e6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		/*					set port b pin number 0 to high					*/
		HLCD_VoidSendCommand(0b00001111);
    12e8:	8f e0       	ldi	r24, 0x0F	; 15
    12ea:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	a0 e8       	ldi	r26, 0x80	; 128
    12f4:	bf e3       	ldi	r27, 0x3F	; 63
    12f6:	89 8f       	std	Y+25, r24	; 0x19
    12f8:	9a 8f       	std	Y+26, r25	; 0x1a
    12fa:	ab 8f       	std	Y+27, r26	; 0x1b
    12fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1300:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1302:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1304:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	4a ef       	ldi	r20, 0xFA	; 250
    130c:	54 e4       	ldi	r21, 0x44	; 68
    130e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	8d 8b       	std	Y+21, r24	; 0x15
    1318:	9e 8b       	std	Y+22, r25	; 0x16
    131a:	af 8b       	std	Y+23, r26	; 0x17
    131c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    131e:	6d 89       	ldd	r22, Y+21	; 0x15
    1320:	7e 89       	ldd	r23, Y+22	; 0x16
    1322:	8f 89       	ldd	r24, Y+23	; 0x17
    1324:	98 8d       	ldd	r25, Y+24	; 0x18
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e8       	ldi	r20, 0x80	; 128
    132c:	5f e3       	ldi	r21, 0x3F	; 63
    132e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1332:	88 23       	and	r24, r24
    1334:	2c f4       	brge	.+10     	; 0x1340 <HLCD_enuInit+0x260>
		__ticks = 1;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9c 8b       	std	Y+20, r25	; 0x14
    133c:	8b 8b       	std	Y+19, r24	; 0x13
    133e:	3f c0       	rjmp	.+126    	; 0x13be <HLCD_enuInit+0x2de>
	else if (__tmp > 65535)
    1340:	6d 89       	ldd	r22, Y+21	; 0x15
    1342:	7e 89       	ldd	r23, Y+22	; 0x16
    1344:	8f 89       	ldd	r24, Y+23	; 0x17
    1346:	98 8d       	ldd	r25, Y+24	; 0x18
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	3f ef       	ldi	r19, 0xFF	; 255
    134c:	4f e7       	ldi	r20, 0x7F	; 127
    134e:	57 e4       	ldi	r21, 0x47	; 71
    1350:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1354:	18 16       	cp	r1, r24
    1356:	4c f5       	brge	.+82     	; 0x13aa <HLCD_enuInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1358:	69 8d       	ldd	r22, Y+25	; 0x19
    135a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    135c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    135e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e2       	ldi	r20, 0x20	; 32
    1366:	51 e4       	ldi	r21, 0x41	; 65
    1368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	9c 8b       	std	Y+20, r25	; 0x14
    137e:	8b 8b       	std	Y+19, r24	; 0x13
    1380:	0f c0       	rjmp	.+30     	; 0x13a0 <HLCD_enuInit+0x2c0>
    1382:	88 ec       	ldi	r24, 0xC8	; 200
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9a 8b       	std	Y+18, r25	; 0x12
    1388:	89 8b       	std	Y+17, r24	; 0x11
    138a:	89 89       	ldd	r24, Y+17	; 0x11
    138c:	9a 89       	ldd	r25, Y+18	; 0x12
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <HLCD_enuInit+0x2ae>
    1392:	9a 8b       	std	Y+18, r25	; 0x12
    1394:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1396:	8b 89       	ldd	r24, Y+19	; 0x13
    1398:	9c 89       	ldd	r25, Y+20	; 0x14
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	9c 8b       	std	Y+20, r25	; 0x14
    139e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a0:	8b 89       	ldd	r24, Y+19	; 0x13
    13a2:	9c 89       	ldd	r25, Y+20	; 0x14
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	69 f7       	brne	.-38     	; 0x1382 <HLCD_enuInit+0x2a2>
    13a8:	14 c0       	rjmp	.+40     	; 0x13d2 <HLCD_enuInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13aa:	6d 89       	ldd	r22, Y+21	; 0x15
    13ac:	7e 89       	ldd	r23, Y+22	; 0x16
    13ae:	8f 89       	ldd	r24, Y+23	; 0x17
    13b0:	98 8d       	ldd	r25, Y+24	; 0x18
    13b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	9c 8b       	std	Y+20, r25	; 0x14
    13bc:	8b 8b       	std	Y+19, r24	; 0x13
    13be:	8b 89       	ldd	r24, Y+19	; 0x13
    13c0:	9c 89       	ldd	r25, Y+20	; 0x14
    13c2:	98 8b       	std	Y+16, r25	; 0x10
    13c4:	8f 87       	std	Y+15, r24	; 0x0f
    13c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c8:	98 89       	ldd	r25, Y+16	; 0x10
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <HLCD_enuInit+0x2ea>
    13ce:	98 8b       	std	Y+16, r25	; 0x10
    13d0:	8f 87       	std	Y+15, r24	; 0x0f
		/*					Delay for 1ms									*/
		_delay_ms(1);
		HLCD_VoidSendCommand(0b00000000);
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a0 e0       	ldi	r26, 0x00	; 0
    13de:	b0 e4       	ldi	r27, 0x40	; 64
    13e0:	8b 87       	std	Y+11, r24	; 0x0b
    13e2:	9c 87       	std	Y+12, r25	; 0x0c
    13e4:	ad 87       	std	Y+13, r26	; 0x0d
    13e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	4a ef       	ldi	r20, 0xFA	; 250
    13f6:	54 e4       	ldi	r21, 0x44	; 68
    13f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	8f 83       	std	Y+7, r24	; 0x07
    1402:	98 87       	std	Y+8, r25	; 0x08
    1404:	a9 87       	std	Y+9, r26	; 0x09
    1406:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1408:	6f 81       	ldd	r22, Y+7	; 0x07
    140a:	78 85       	ldd	r23, Y+8	; 0x08
    140c:	89 85       	ldd	r24, Y+9	; 0x09
    140e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e8       	ldi	r20, 0x80	; 128
    1416:	5f e3       	ldi	r21, 0x3F	; 63
    1418:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    141c:	88 23       	and	r24, r24
    141e:	2c f4       	brge	.+10     	; 0x142a <HLCD_enuInit+0x34a>
		__ticks = 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9e 83       	std	Y+6, r25	; 0x06
    1426:	8d 83       	std	Y+5, r24	; 0x05
    1428:	3f c0       	rjmp	.+126    	; 0x14a8 <HLCD_enuInit+0x3c8>
	else if (__tmp > 65535)
    142a:	6f 81       	ldd	r22, Y+7	; 0x07
    142c:	78 85       	ldd	r23, Y+8	; 0x08
    142e:	89 85       	ldd	r24, Y+9	; 0x09
    1430:	9a 85       	ldd	r25, Y+10	; 0x0a
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	3f ef       	ldi	r19, 0xFF	; 255
    1436:	4f e7       	ldi	r20, 0x7F	; 127
    1438:	57 e4       	ldi	r21, 0x47	; 71
    143a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    143e:	18 16       	cp	r1, r24
    1440:	4c f5       	brge	.+82     	; 0x1494 <HLCD_enuInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1442:	6b 85       	ldd	r22, Y+11	; 0x0b
    1444:	7c 85       	ldd	r23, Y+12	; 0x0c
    1446:	8d 85       	ldd	r24, Y+13	; 0x0d
    1448:	9e 85       	ldd	r25, Y+14	; 0x0e
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e2       	ldi	r20, 0x20	; 32
    1450:	51 e4       	ldi	r21, 0x41	; 65
    1452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 83       	std	Y+5, r24	; 0x05
    146a:	0f c0       	rjmp	.+30     	; 0x148a <HLCD_enuInit+0x3aa>
    146c:	88 ec       	ldi	r24, 0xC8	; 200
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9c 83       	std	Y+4, r25	; 0x04
    1472:	8b 83       	std	Y+3, r24	; 0x03
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <HLCD_enuInit+0x398>
    147c:	9c 83       	std	Y+4, r25	; 0x04
    147e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	69 f7       	brne	.-38     	; 0x146c <HLCD_enuInit+0x38c>
    1492:	14 c0       	rjmp	.+40     	; 0x14bc <HLCD_enuInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1494:	6f 81       	ldd	r22, Y+7	; 0x07
    1496:	78 85       	ldd	r23, Y+8	; 0x08
    1498:	89 85       	ldd	r24, Y+9	; 0x09
    149a:	9a 85       	ldd	r25, Y+10	; 0x0a
    149c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	9e 83       	std	Y+6, r25	; 0x06
    14a6:	8d 83       	std	Y+5, r24	; 0x05
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	9a 81       	ldd	r25, Y+2	; 0x02
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <HLCD_enuInit+0x3d4>
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
		/*							*/
		HLCD_VoidSendCommand(0b00000110);

#endif

}
    14bc:	e8 96       	adiw	r28, 0x38	; 56
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <HLCD_VoidWriteStr>:
 *
 *		This function write the whole string in the LCD
 *
 **********************************************************************/
void HLCD_VoidWriteStr(u8 * pu8str)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <HLCD_VoidWriteStr+0x6>
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9b 83       	std	Y+3, r25	; 0x03
    14dc:	8a 83       	std	Y+2, r24	; 0x02
	/*Null terminator is very important that helps me a lot*/
	u8 i = 0;
    14de:	19 82       	std	Y+1, r1	; 0x01
    14e0:	0e c0       	rjmp	.+28     	; 0x14fe <HLCD_VoidWriteStr+0x30>
	/*			Here we loop till the null terminator				*/
	while(pu8str[i] != 0)
	{
		/*Send the character to the LCD in each iteration till the end*/
		HLCD_VoidSendChar(pu8str[i]);
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	9b 81       	ldd	r25, Y+3	; 0x03
    14ec:	fc 01       	movw	r30, r24
    14ee:	e2 0f       	add	r30, r18
    14f0:	f3 1f       	adc	r31, r19
    14f2:	80 81       	ld	r24, Z
    14f4:	0e 94 50 06 	call	0xca0	; 0xca0 <HLCD_VoidSendChar>
		i++;
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
    14fc:	89 83       	std	Y+1, r24	; 0x01
void HLCD_VoidWriteStr(u8 * pu8str)
{
	/*Null terminator is very important that helps me a lot*/
	u8 i = 0;
	/*			Here we loop till the null terminator				*/
	while(pu8str[i] != 0)
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	9b 81       	ldd	r25, Y+3	; 0x03
    1508:	fc 01       	movw	r30, r24
    150a:	e2 0f       	add	r30, r18
    150c:	f3 1f       	adc	r31, r19
    150e:	80 81       	ld	r24, Z
    1510:	88 23       	and	r24, r24
    1512:	39 f7       	brne	.-50     	; 0x14e2 <HLCD_VoidWriteStr+0x14>
		/*Send the character to the LCD in each iteration till the end*/
		HLCD_VoidSendChar(pu8str[i]);
		i++;
	}

}
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <HLCD_GoToXY>:
 *
 * Function to go to special position of the col
 *
 *********************************************************************/
void HLCD_GoToXY(u8 x,s8 y)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <HLCD_GoToXY+0x6>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <HLCD_GoToXY+0x8>
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	6a 83       	std	Y+2, r22	; 0x02
	/*			here we check the x if it's 1 or 2					*/
	switch(x)
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3c 83       	std	Y+4, r19	; 0x04
    1538:	2b 83       	std	Y+3, r18	; 0x03
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	91 05       	cpc	r25, r1
    1542:	31 f0       	breq	.+12     	; 0x1550 <HLCD_GoToXY+0x30>
    1544:	2b 81       	ldd	r18, Y+3	; 0x03
    1546:	3c 81       	ldd	r19, Y+4	; 0x04
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	31 f0       	breq	.+12     	; 0x155a <HLCD_GoToXY+0x3a>
    154e:	09 c0       	rjmp	.+18     	; 0x1562 <HLCD_GoToXY+0x42>
	{
		/* 		0x80 === 127 decimal		*/
		case 1: HLCD_VoidSendCommand(y + 127); break;
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	81 58       	subi	r24, 0x81	; 129
    1554:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <HLCD_GoToXY+0x42>
		/* 		0xBF === 191 decimal		*/
		case 2: HLCD_VoidSendCommand(y + 191); break;
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	81 54       	subi	r24, 0x41	; 65
    155e:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	}
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <HLCD_VoidSendNumber>:
 *
 * This function send an int number to the LCD
 *
 ********************************************************************/
void HLCD_VoidSendNumber(u32 Number)
{
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	2c 97       	sbiw	r28, 0x0c	; 12
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	69 87       	std	Y+9, r22	; 0x09
    158e:	7a 87       	std	Y+10, r23	; 0x0a
    1590:	8b 87       	std	Y+11, r24	; 0x0b
    1592:	9c 87       	std	Y+12, r25	; 0x0c
	if(Number == 0)
    1594:	89 85       	ldd	r24, Y+9	; 0x09
    1596:	9a 85       	ldd	r25, Y+10	; 0x0a
    1598:	ab 85       	ldd	r26, Y+11	; 0x0b
    159a:	bc 85       	ldd	r27, Y+12	; 0x0c
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	a1 05       	cpc	r26, r1
    15a0:	b1 05       	cpc	r27, r1
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <HLCD_VoidSendNumber+0x36>
    15a4:	79 c0       	rjmp	.+242    	; 0x1698 <HLCD_VoidSendNumber+0x128>
		/*					Here Print the zero						*/
	}
	else
	{
		/*			Looping if the number is positive only 			*/
		u32 reverse = 1;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	a0 e0       	ldi	r26, 0x00	; 0
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	8d 83       	std	Y+5, r24	; 0x05
    15b0:	9e 83       	std	Y+6, r25	; 0x06
    15b2:	af 83       	std	Y+7, r26	; 0x07
    15b4:	b8 87       	std	Y+8, r27	; 0x08
    15b6:	36 c0       	rjmp	.+108    	; 0x1624 <HLCD_VoidSendNumber+0xb4>
		while(Number > 0)
		{
			/*	Here we reverse the number to display it on screen	*/
			reverse = (reverse * 10) + (Number  % 10);
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	af 81       	ldd	r26, Y+7	; 0x07
    15be:	b8 85       	ldd	r27, Y+8	; 0x08
    15c0:	2a e0       	ldi	r18, 0x0A	; 10
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e0       	ldi	r20, 0x00	; 0
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	bc 01       	movw	r22, r24
    15ca:	cd 01       	movw	r24, r26
    15cc:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__mulsi3>
    15d0:	7b 01       	movw	r14, r22
    15d2:	8c 01       	movw	r16, r24
    15d4:	89 85       	ldd	r24, Y+9	; 0x09
    15d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d8:	ab 85       	ldd	r26, Y+11	; 0x0b
    15da:	bc 85       	ldd	r27, Y+12	; 0x0c
    15dc:	2a e0       	ldi	r18, 0x0A	; 10
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodsi4>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	8e 0d       	add	r24, r14
    15f2:	9f 1d       	adc	r25, r15
    15f4:	a0 1f       	adc	r26, r16
    15f6:	b1 1f       	adc	r27, r17
    15f8:	8d 83       	std	Y+5, r24	; 0x05
    15fa:	9e 83       	std	Y+6, r25	; 0x06
    15fc:	af 83       	std	Y+7, r26	; 0x07
    15fe:	b8 87       	std	Y+8, r27	; 0x08
			Number = Number / 10;
    1600:	89 85       	ldd	r24, Y+9	; 0x09
    1602:	9a 85       	ldd	r25, Y+10	; 0x0a
    1604:	ab 85       	ldd	r26, Y+11	; 0x0b
    1606:	bc 85       	ldd	r27, Y+12	; 0x0c
    1608:	2a e0       	ldi	r18, 0x0A	; 10
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e0       	ldi	r20, 0x00	; 0
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	bc 01       	movw	r22, r24
    1612:	cd 01       	movw	r24, r26
    1614:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodsi4>
    1618:	da 01       	movw	r26, r20
    161a:	c9 01       	movw	r24, r18
    161c:	89 87       	std	Y+9, r24	; 0x09
    161e:	9a 87       	std	Y+10, r25	; 0x0a
    1620:	ab 87       	std	Y+11, r26	; 0x0b
    1622:	bc 87       	std	Y+12, r27	; 0x0c
	}
	else
	{
		/*			Looping if the number is positive only 			*/
		u32 reverse = 1;
		while(Number > 0)
    1624:	89 85       	ldd	r24, Y+9	; 0x09
    1626:	9a 85       	ldd	r25, Y+10	; 0x0a
    1628:	ab 85       	ldd	r26, Y+11	; 0x0b
    162a:	bc 85       	ldd	r27, Y+12	; 0x0c
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	a1 05       	cpc	r26, r1
    1630:	b1 05       	cpc	r27, r1
    1632:	11 f6       	brne	.-124    	; 0x15b8 <HLCD_VoidSendNumber+0x48>
    1634:	28 c0       	rjmp	.+80     	; 0x1686 <HLCD_VoidSendNumber+0x116>
		}
		/*		Check if the reverse number is bigger than 1 or not */
		while(reverse > 1)
		{
			u32 remainder;
			remainder = reverse % 10;
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	9e 81       	ldd	r25, Y+6	; 0x06
    163a:	af 81       	ldd	r26, Y+7	; 0x07
    163c:	b8 85       	ldd	r27, Y+8	; 0x08
    163e:	2a e0       	ldi	r18, 0x0A	; 10
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodsi4>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	ab 83       	std	Y+3, r26	; 0x03
    1658:	bc 83       	std	Y+4, r27	; 0x04
			/*		Send the number to the LCD as a character		*/
			HLCD_VoidSendChar(remainder + 48);
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	80 5d       	subi	r24, 0xD0	; 208
    165e:	0e 94 50 06 	call	0xca0	; 0xca0 <HLCD_VoidSendChar>
			reverse = reverse / 10;
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	af 81       	ldd	r26, Y+7	; 0x07
    1668:	b8 85       	ldd	r27, Y+8	; 0x08
    166a:	2a e0       	ldi	r18, 0x0A	; 10
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodsi4>
    167a:	da 01       	movw	r26, r20
    167c:	c9 01       	movw	r24, r18
    167e:	8d 83       	std	Y+5, r24	; 0x05
    1680:	9e 83       	std	Y+6, r25	; 0x06
    1682:	af 83       	std	Y+7, r26	; 0x07
    1684:	b8 87       	std	Y+8, r27	; 0x08
			/*	Here we reverse the number to display it on screen	*/
			reverse = (reverse * 10) + (Number  % 10);
			Number = Number / 10;
		}
		/*		Check if the reverse number is bigger than 1 or not */
		while(reverse > 1)
    1686:	8d 81       	ldd	r24, Y+5	; 0x05
    1688:	9e 81       	ldd	r25, Y+6	; 0x06
    168a:	af 81       	ldd	r26, Y+7	; 0x07
    168c:	b8 85       	ldd	r27, Y+8	; 0x08
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	91 05       	cpc	r25, r1
    1692:	a1 05       	cpc	r26, r1
    1694:	b1 05       	cpc	r27, r1
    1696:	78 f6       	brcc	.-98     	; 0x1636 <HLCD_VoidSendNumber+0xc6>
			/*		Send the number to the LCD as a character		*/
			HLCD_VoidSendChar(remainder + 48);
			reverse = reverse / 10;
		}
	}
}
    1698:	2c 96       	adiw	r28, 0x0c	; 12
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	ff 90       	pop	r15
    16ae:	ef 90       	pop	r14
    16b0:	08 95       	ret

000016b2 <HLCD_SendFloatNumber>:
 *
 * 		This function send an float number to the LCD
 *
 *************************************************************/
void HLCD_SendFloatNumber(f32 Copy_f32Number)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	2c 97       	sbiw	r28, 0x0c	; 12
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	69 87       	std	Y+9, r22	; 0x09
    16c8:	7a 87       	std	Y+10, r23	; 0x0a
    16ca:	8b 87       	std	Y+11, r24	; 0x0b
    16cc:	9c 87       	std	Y+12, r25	; 0x0c
	f32 Local_f32FloatR;
	s32 Local_s32CopyNumber = (u32) Copy_f32Number;
    16ce:	69 85       	ldd	r22, Y+9	; 0x09
    16d0:	7a 85       	ldd	r23, Y+10	; 0x0a
    16d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    16d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	ab 83       	std	Y+3, r26	; 0x03
    16e4:	bc 83       	std	Y+4, r27	; 0x04
	HLCD_VoidSendNumber(Local_s32CopyNumber);
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	ab 81       	ldd	r26, Y+3	; 0x03
    16ec:	bc 81       	ldd	r27, Y+4	; 0x04
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 b8 0a 	call	0x1570	; 0x1570 <HLCD_VoidSendNumber>
	HLCD_VoidSendChar('.');
    16f6:	8e e2       	ldi	r24, 0x2E	; 46
    16f8:	0e 94 50 06 	call	0xca0	; 0xca0 <HLCD_VoidSendChar>

	Local_f32FloatR = (f32) Copy_f32Number - Local_s32CopyNumber;
    16fc:	69 81       	ldd	r22, Y+1	; 0x01
    16fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1708:	9b 01       	movw	r18, r22
    170a:	ac 01       	movw	r20, r24
    170c:	69 85       	ldd	r22, Y+9	; 0x09
    170e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1710:	8b 85       	ldd	r24, Y+11	; 0x0b
    1712:	9c 85       	ldd	r25, Y+12	; 0x0c
    1714:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	8d 83       	std	Y+5, r24	; 0x05
    171e:	9e 83       	std	Y+6, r25	; 0x06
    1720:	af 83       	std	Y+7, r26	; 0x07
    1722:	b8 87       	std	Y+8, r27	; 0x08
	/*				Check if the number is negative we need to get off the sign						*/
	if(Copy_f32Number < 0)
    1724:	69 85       	ldd	r22, Y+9	; 0x09
    1726:	7a 85       	ldd	r23, Y+10	; 0x0a
    1728:	8b 85       	ldd	r24, Y+11	; 0x0b
    172a:	9c 85       	ldd	r25, Y+12	; 0x0c
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1738:	88 23       	and	r24, r24
    173a:	4c f4       	brge	.+18     	; 0x174e <HLCD_SendFloatNumber+0x9c>
	{
		Local_f32FloatR = (f32) (-1) * (Local_f32FloatR);
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	af 81       	ldd	r26, Y+7	; 0x07
    1742:	b8 85       	ldd	r27, Y+8	; 0x08
    1744:	b0 58       	subi	r27, 0x80	; 128
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	af 83       	std	Y+7, r26	; 0x07
    174c:	b8 87       	std	Y+8, r27	; 0x08
	}
	HLCD_VoidSendNumber((u32) Local_f32FloatR);
    174e:	6d 81       	ldd	r22, Y+5	; 0x05
    1750:	7e 81       	ldd	r23, Y+6	; 0x06
    1752:	8f 81       	ldd	r24, Y+7	; 0x07
    1754:	98 85       	ldd	r25, Y+8	; 0x08
    1756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	0e 94 b8 0a 	call	0x1570	; 0x1570 <HLCD_VoidSendNumber>
}
    1766:	2c 96       	adiw	r28, 0x0c	; 12
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <HLCD_DrawCharacterE>:
 *
 * This function Draw shape E without the left
 *
 *************************************************************/
void HLCD_DrawCharacterE(void)
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
	HLCD_GoToXY(0,0);
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	0e 94 90 0a 	call	0x1520	; 0x1520 <HLCD_GoToXY>
	HLCD_VoidSendCommand(0b01000000);
    1788:	80 e4       	ldi	r24, 0x40	; 64
    178a:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    178e:	8e e0       	ldi	r24, 0x0E	; 14
    1790:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01010);
    1794:	8a e0       	ldi	r24, 0x0A	; 10
    1796:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    179a:	8e e0       	ldi	r24, 0x0E	; 14
    179c:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00010);
    17a0:	82 e0       	ldi	r24, 0x02	; 2
    17a2:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00010);
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    17ac:	8e e0       	ldi	r24, 0x0E	; 14
    17ae:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00000);
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00000);
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0);
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	0e 94 50 06 	call	0xca0	; 0xca0 <HLCD_VoidSendChar>

}
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <HLCD_ClearDisplay>:
 *
 * 		This function clear all the characters on the screen
 *
 * ***********************************************************/
void HLCD_ClearDisplay(void)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
	HLCD_VoidSendCommand(1);
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
}
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <HLCD_DrawCharacterF>:
 *
 * This function print F character on the screen
 *
 ************************************************************/
void HLCD_DrawCharacterF(void)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
	HLCD_GoToXY(0,3);
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	63 e0       	ldi	r22, 0x03	; 3
    17ea:	0e 94 90 0a 	call	0x1520	; 0x1520 <HLCD_GoToXY>
	HLCD_VoidSendCommand(0b01000011);
    17ee:	83 e4       	ldi	r24, 0x43	; 67
    17f0:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00110);
    17f4:	86 e0       	ldi	r24, 0x06	; 6
    17f6:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    17fa:	84 e0       	ldi	r24, 0x04	; 4
    17fc:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    1800:	8e e0       	ldi	r24, 0x0E	; 14
    1802:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    1806:	84 e0       	ldi	r24, 0x04	; 4
    1808:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    180c:	84 e0       	ldi	r24, 0x04	; 4
    180e:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    1812:	84 e0       	ldi	r24, 0x04	; 4
    1814:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    1818:	84 e0       	ldi	r24, 0x04	; 4
    181a:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    181e:	84 e0       	ldi	r24, 0x04	; 4
    1820:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0);
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	0e 94 50 06 	call	0xca0	; 0xca0 <HLCD_VoidSendChar>
}
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <HLCD_DrawHuman>:
 *
 * This function draw a human
 *
 ***********************************************************/
void HLCD_DrawHuman(void)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
	HLCD_VoidSendCommand(0b01000010);
    1838:	82 e4       	ldi	r24, 0x42	; 66
    183a:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_GoToXY(1,5);
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	65 e0       	ldi	r22, 0x05	; 5
    1842:	0e 94 90 0a 	call	0x1520	; 0x1520 <HLCD_GoToXY>
	HLCD_VoidSendCommand(0b00100);
    1846:	84 e0       	ldi	r24, 0x04	; 4
    1848:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01010);
    184c:	8a e0       	ldi	r24, 0x0A	; 10
    184e:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    1852:	8e e0       	ldi	r24, 0x0E	; 14
    1854:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    1858:	84 e0       	ldi	r24, 0x04	; 4
    185a:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b01110);
    185e:	8e e0       	ldi	r24, 0x0E	; 14
    1860:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b10101);
    1864:	85 e1       	ldi	r24, 0x15	; 21
    1866:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    186a:	84 e0       	ldi	r24, 0x04	; 4
    186c:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00100);
    1870:	84 e0       	ldi	r24, 0x04	; 4
    1872:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0);
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	0e 94 50 06 	call	0xca0	; 0xca0 <HLCD_VoidSendChar>
}
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <HLCD_S32Private_GetPower>:
 *
 * 		This is a private function that get the power of a number
 *
 ****************************************************************************/
s32 HLCD_S32Private_GetPower(u8 Copy_u8BaseNumber, u8 Copy_PowerNumber)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	28 97       	sbiw	r28, 0x08	; 8
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	8b 83       	std	Y+3, r24	; 0x03
    1898:	6c 83       	std	Y+4, r22	; 0x04
	u8 Copy_u8Counter = Copy_PowerNumber;
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Copy_u8NumberAfterPower = 0;
    189e:	19 82       	std	Y+1, r1	; 0x01
    18a0:	09 c0       	rjmp	.+18     	; 0x18b4 <HLCD_S32Private_GetPower+0x32>
	while(Copy_u8Counter != 0)
	{
		Copy_u8NumberAfterPower = Copy_u8BaseNumber * Copy_u8BaseNumber;
    18a2:	9b 81       	ldd	r25, Y+3	; 0x03
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	98 9f       	mul	r25, r24
    18a8:	80 2d       	mov	r24, r0
    18aa:	11 24       	eor	r1, r1
    18ac:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8Counter--;
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	81 50       	subi	r24, 0x01	; 1
    18b2:	8a 83       	std	Y+2, r24	; 0x02
 ****************************************************************************/
s32 HLCD_S32Private_GetPower(u8 Copy_u8BaseNumber, u8 Copy_PowerNumber)
{
	u8 Copy_u8Counter = Copy_PowerNumber;
	u8 Copy_u8NumberAfterPower = 0;
	while(Copy_u8Counter != 0)
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	88 23       	and	r24, r24
    18b8:	a1 f7       	brne	.-24     	; 0x18a2 <HLCD_S32Private_GetPower+0x20>
	{
		Copy_u8NumberAfterPower = Copy_u8BaseNumber * Copy_u8BaseNumber;
		Copy_u8Counter--;
	}
}
    18ba:	28 96       	adiw	r28, 0x08	; 8
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <HLCD_StoreCustomCharacter>:
 *
 * 		This function stores a custom pattern passed by an array
 *
 ***************************************************************************/
void HLCD_StoreCustomCharacter(u8 Copy_char_Index, u8 * Copy_Pattern)
{
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <HLCD_StoreCustomCharacter+0x6>
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <HLCD_StoreCustomCharacter+0x8>
    18d4:	0f 92       	push	r0
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	8b 83       	std	Y+3, r24	; 0x03
    18dc:	7d 83       	std	Y+5, r23	; 0x05
    18de:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_CGRAMAdd = Copy_char_Index * 8;
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	8a 83       	std	Y+2, r24	; 0x02
	/*			Set CGRAM address										*/
	HLCD_VoidSendCommand(0b01000000 + Local_CGRAMAdd);
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	80 5c       	subi	r24, 0xC0	; 192
    18f8:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
	/*			put the pattern in CGRAM								*/
	for(u8 Local_Counter = 0; Local_Counter < 8; Local_Counter++)
    18fc:	19 82       	std	Y+1, r1	; 0x01
    18fe:	0e c0       	rjmp	.+28     	; 0x191c <HLCD_StoreCustomCharacter+0x50>
	{
		HLCD_VoidSendChar(Copy_Pattern[Local_Counter]);
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	9d 81       	ldd	r25, Y+5	; 0x05
    190a:	fc 01       	movw	r30, r24
    190c:	e2 0f       	add	r30, r18
    190e:	f3 1f       	adc	r31, r19
    1910:	80 81       	ld	r24, Z
    1912:	0e 94 50 06 	call	0xca0	; 0xca0 <HLCD_VoidSendChar>
{
	u8 Local_CGRAMAdd = Copy_char_Index * 8;
	/*			Set CGRAM address										*/
	HLCD_VoidSendCommand(0b01000000 + Local_CGRAMAdd);
	/*			put the pattern in CGRAM								*/
	for(u8 Local_Counter = 0; Local_Counter < 8; Local_Counter++)
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	8f 5f       	subi	r24, 0xFF	; 255
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	88 30       	cpi	r24, 0x08	; 8
    1920:	78 f3       	brcs	.-34     	; 0x1900 <HLCD_StoreCustomCharacter+0x34>
	{
		HLCD_VoidSendChar(Copy_Pattern[Local_Counter]);
	}
}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <HLCD_ShiftDisplayLeft>:
 *
 * 		This Function Shift the display to the left
 *
 ***************************************************************************/
void HLCD_ShiftDisplayLeft()
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	2e 97       	sbiw	r28, 0x0e	; 14
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
	HLCD_VoidSendCommand(0b000110);
    1946:	86 e0       	ldi	r24, 0x06	; 6
    1948:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e0       	ldi	r26, 0x00	; 0
    1952:	b0 e4       	ldi	r27, 0x40	; 64
    1954:	8b 87       	std	Y+11, r24	; 0x0b
    1956:	9c 87       	std	Y+12, r25	; 0x0c
    1958:	ad 87       	std	Y+13, r26	; 0x0d
    195a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195c:	6b 85       	ldd	r22, Y+11	; 0x0b
    195e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1960:	8d 85       	ldd	r24, Y+13	; 0x0d
    1962:	9e 85       	ldd	r25, Y+14	; 0x0e
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	4a ef       	ldi	r20, 0xFA	; 250
    196a:	54 e4       	ldi	r21, 0x44	; 68
    196c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	8f 83       	std	Y+7, r24	; 0x07
    1976:	98 87       	std	Y+8, r25	; 0x08
    1978:	a9 87       	std	Y+9, r26	; 0x09
    197a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    197c:	6f 81       	ldd	r22, Y+7	; 0x07
    197e:	78 85       	ldd	r23, Y+8	; 0x08
    1980:	89 85       	ldd	r24, Y+9	; 0x09
    1982:	9a 85       	ldd	r25, Y+10	; 0x0a
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e8       	ldi	r20, 0x80	; 128
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1990:	88 23       	and	r24, r24
    1992:	2c f4       	brge	.+10     	; 0x199e <HLCD_ShiftDisplayLeft+0x6c>
		__ticks = 1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9e 83       	std	Y+6, r25	; 0x06
    199a:	8d 83       	std	Y+5, r24	; 0x05
    199c:	3f c0       	rjmp	.+126    	; 0x1a1c <HLCD_ShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    199e:	6f 81       	ldd	r22, Y+7	; 0x07
    19a0:	78 85       	ldd	r23, Y+8	; 0x08
    19a2:	89 85       	ldd	r24, Y+9	; 0x09
    19a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	3f ef       	ldi	r19, 0xFF	; 255
    19aa:	4f e7       	ldi	r20, 0x7F	; 127
    19ac:	57 e4       	ldi	r21, 0x47	; 71
    19ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b2:	18 16       	cp	r1, r24
    19b4:	4c f5       	brge	.+82     	; 0x1a08 <HLCD_ShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    19bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e2       	ldi	r20, 0x20	; 32
    19c4:	51 e4       	ldi	r21, 0x41	; 65
    19c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	9e 83       	std	Y+6, r25	; 0x06
    19dc:	8d 83       	std	Y+5, r24	; 0x05
    19de:	0f c0       	rjmp	.+30     	; 0x19fe <HLCD_ShiftDisplayLeft+0xcc>
    19e0:	88 ec       	ldi	r24, 0xC8	; 200
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	9c 83       	std	Y+4, r25	; 0x04
    19e6:	8b 83       	std	Y+3, r24	; 0x03
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <HLCD_ShiftDisplayLeft+0xba>
    19f0:	9c 83       	std	Y+4, r25	; 0x04
    19f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	9e 83       	std	Y+6, r25	; 0x06
    19fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	69 f7       	brne	.-38     	; 0x19e0 <HLCD_ShiftDisplayLeft+0xae>
    1a06:	14 c0       	rjmp	.+40     	; 0x1a30 <HLCD_ShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a08:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0a:	78 85       	ldd	r23, Y+8	; 0x08
    1a0c:	89 85       	ldd	r24, Y+9	; 0x09
    1a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	9e 83       	std	Y+6, r25	; 0x06
    1a1a:	8d 83       	std	Y+5, r24	; 0x05
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a20:	9a 83       	std	Y+2, r25	; 0x02
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <HLCD_ShiftDisplayLeft+0xf6>
    1a2c:	9a 83       	std	Y+2, r25	; 0x02
    1a2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1a30:	2e 96       	adiw	r28, 0x0e	; 14
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <HLCD_ShiftDisplayRight>:
 *
 * 		This Function Shift the display to the right
 *
 **************************************************************************/
void HLCD_ShiftDisplayRight()
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	2e 97       	sbiw	r28, 0x0e	; 14
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
	HLCD_VoidSendCommand(0b000111);
    1a56:	87 e0       	ldi	r24, 0x07	; 7
    1a58:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 e0       	ldi	r26, 0x00	; 0
    1a62:	b0 e4       	ldi	r27, 0x40	; 64
    1a64:	8b 87       	std	Y+11, r24	; 0x0b
    1a66:	9c 87       	std	Y+12, r25	; 0x0c
    1a68:	ad 87       	std	Y+13, r26	; 0x0d
    1a6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	4a ef       	ldi	r20, 0xFA	; 250
    1a7a:	54 e4       	ldi	r21, 0x44	; 68
    1a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	8f 83       	std	Y+7, r24	; 0x07
    1a86:	98 87       	std	Y+8, r25	; 0x08
    1a88:	a9 87       	std	Y+9, r26	; 0x09
    1a8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8e:	78 85       	ldd	r23, Y+8	; 0x08
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e8       	ldi	r20, 0x80	; 128
    1a9a:	5f e3       	ldi	r21, 0x3F	; 63
    1a9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa0:	88 23       	and	r24, r24
    1aa2:	2c f4       	brge	.+10     	; 0x1aae <HLCD_ShiftDisplayRight+0x6c>
		__ticks = 1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
    1aac:	3f c0       	rjmp	.+126    	; 0x1b2c <HLCD_ShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    1aae:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab0:	78 85       	ldd	r23, Y+8	; 0x08
    1ab2:	89 85       	ldd	r24, Y+9	; 0x09
    1ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	3f ef       	ldi	r19, 0xFF	; 255
    1aba:	4f e7       	ldi	r20, 0x7F	; 127
    1abc:	57 e4       	ldi	r21, 0x47	; 71
    1abe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac2:	18 16       	cp	r1, r24
    1ac4:	4c f5       	brge	.+82     	; 0x1b18 <HLCD_ShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1acc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e2       	ldi	r20, 0x20	; 32
    1ad4:	51 e4       	ldi	r21, 0x41	; 65
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	bc 01       	movw	r22, r24
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9e 83       	std	Y+6, r25	; 0x06
    1aec:	8d 83       	std	Y+5, r24	; 0x05
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <HLCD_ShiftDisplayRight+0xcc>
    1af0:	88 ec       	ldi	r24, 0xC8	; 200
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	9c 83       	std	Y+4, r25	; 0x04
    1af6:	8b 83       	std	Y+3, r24	; 0x03
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <HLCD_ShiftDisplayRight+0xba>
    1b00:	9c 83       	std	Y+4, r25	; 0x04
    1b02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	9e 81       	ldd	r25, Y+6	; 0x06
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	9e 83       	std	Y+6, r25	; 0x06
    1b0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b10:	9e 81       	ldd	r25, Y+6	; 0x06
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	69 f7       	brne	.-38     	; 0x1af0 <HLCD_ShiftDisplayRight+0xae>
    1b16:	14 c0       	rjmp	.+40     	; 0x1b40 <HLCD_ShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b18:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1a:	78 85       	ldd	r23, Y+8	; 0x08
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09
    1b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	9e 83       	std	Y+6, r25	; 0x06
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
    1b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <HLCD_ShiftDisplayRight+0xf6>
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1b40:	2e 96       	adiw	r28, 0x0e	; 14
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <HLCD_ShiftCursorLeft>:
 *
 * 		This function shift the cursor to the left
 *
 * **************************************************/
void HLCD_ShiftCursorLeft(void)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	2e 97       	sbiw	r28, 0x0e	; 14
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
	HLCD_VoidSendCommand(0b000100);
    1b66:	84 e0       	ldi	r24, 0x04	; 4
    1b68:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	a0 e0       	ldi	r26, 0x00	; 0
    1b72:	b0 e4       	ldi	r27, 0x40	; 64
    1b74:	8b 87       	std	Y+11, r24	; 0x0b
    1b76:	9c 87       	std	Y+12, r25	; 0x0c
    1b78:	ad 87       	std	Y+13, r26	; 0x0d
    1b7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	4a ef       	ldi	r20, 0xFA	; 250
    1b8a:	54 e4       	ldi	r21, 0x44	; 68
    1b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	8f 83       	std	Y+7, r24	; 0x07
    1b96:	98 87       	std	Y+8, r25	; 0x08
    1b98:	a9 87       	std	Y+9, r26	; 0x09
    1b9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ba0:	89 85       	ldd	r24, Y+9	; 0x09
    1ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e8       	ldi	r20, 0x80	; 128
    1baa:	5f e3       	ldi	r21, 0x3F	; 63
    1bac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb0:	88 23       	and	r24, r24
    1bb2:	2c f4       	brge	.+10     	; 0x1bbe <HLCD_ShiftCursorLeft+0x6c>
		__ticks = 1;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	9e 83       	std	Y+6, r25	; 0x06
    1bba:	8d 83       	std	Y+5, r24	; 0x05
    1bbc:	3f c0       	rjmp	.+126    	; 0x1c3c <HLCD_ShiftCursorLeft+0xea>
	else if (__tmp > 65535)
    1bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc0:	78 85       	ldd	r23, Y+8	; 0x08
    1bc2:	89 85       	ldd	r24, Y+9	; 0x09
    1bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	3f ef       	ldi	r19, 0xFF	; 255
    1bca:	4f e7       	ldi	r20, 0x7F	; 127
    1bcc:	57 e4       	ldi	r21, 0x47	; 71
    1bce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd2:	18 16       	cp	r1, r24
    1bd4:	4c f5       	brge	.+82     	; 0x1c28 <HLCD_ShiftCursorLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e2       	ldi	r20, 0x20	; 32
    1be4:	51 e4       	ldi	r21, 0x41	; 65
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
    1bfe:	0f c0       	rjmp	.+30     	; 0x1c1e <HLCD_ShiftCursorLeft+0xcc>
    1c00:	88 ec       	ldi	r24, 0xC8	; 200
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9c 83       	std	Y+4, r25	; 0x04
    1c06:	8b 83       	std	Y+3, r24	; 0x03
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <HLCD_ShiftCursorLeft+0xba>
    1c10:	9c 83       	std	Y+4, r25	; 0x04
    1c12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c14:	8d 81       	ldd	r24, Y+5	; 0x05
    1c16:	9e 81       	ldd	r25, Y+6	; 0x06
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	9e 83       	std	Y+6, r25	; 0x06
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	9e 81       	ldd	r25, Y+6	; 0x06
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	69 f7       	brne	.-38     	; 0x1c00 <HLCD_ShiftCursorLeft+0xae>
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <HLCD_ShiftCursorLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c28:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2a:	78 85       	ldd	r23, Y+8	; 0x08
    1c2c:	89 85       	ldd	r24, Y+9	; 0x09
    1c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	9e 83       	std	Y+6, r25	; 0x06
    1c3a:	8d 83       	std	Y+5, r24	; 0x05
    1c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	9a 81       	ldd	r25, Y+2	; 0x02
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <HLCD_ShiftCursorLeft+0xf6>
    1c4c:	9a 83       	std	Y+2, r25	; 0x02
    1c4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c50:	2e 96       	adiw	r28, 0x0e	; 14
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <HLCD_ShiftCursorRight>:
 *
 * 		This function shift the cursor to the right
 *
 * **************************************************/
void HLCD_ShiftCursorRight(void)
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
	HLCD_VoidSendCommand(0b000101);
    1c76:	85 e0       	ldi	r24, 0x05	; 5
    1c78:	0e 94 60 07 	call	0xec0	; 0xec0 <HLCD_VoidSendCommand>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e0       	ldi	r26, 0x00	; 0
    1c82:	b0 e4       	ldi	r27, 0x40	; 64
    1c84:	8b 87       	std	Y+11, r24	; 0x0b
    1c86:	9c 87       	std	Y+12, r25	; 0x0c
    1c88:	ad 87       	std	Y+13, r26	; 0x0d
    1c8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4a ef       	ldi	r20, 0xFA	; 250
    1c9a:	54 e4       	ldi	r21, 0x44	; 68
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8f 83       	std	Y+7, r24	; 0x07
    1ca6:	98 87       	std	Y+8, r25	; 0x08
    1ca8:	a9 87       	std	Y+9, r26	; 0x09
    1caa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cac:	6f 81       	ldd	r22, Y+7	; 0x07
    1cae:	78 85       	ldd	r23, Y+8	; 0x08
    1cb0:	89 85       	ldd	r24, Y+9	; 0x09
    1cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <HLCD_ShiftCursorRight+0x6c>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <HLCD_ShiftCursorRight+0xea>
	else if (__tmp > 65535)
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <HLCD_ShiftCursorRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <HLCD_ShiftCursorRight+0xcc>
    1d10:	88 ec       	ldi	r24, 0xC8	; 200
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9c 83       	std	Y+4, r25	; 0x04
    1d16:	8b 83       	std	Y+3, r24	; 0x03
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <HLCD_ShiftCursorRight+0xba>
    1d20:	9c 83       	std	Y+4, r25	; 0x04
    1d22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	8d 81       	ldd	r24, Y+5	; 0x05
    1d26:	9e 81       	ldd	r25, Y+6	; 0x06
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d30:	9e 81       	ldd	r25, Y+6	; 0x06
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <HLCD_ShiftCursorRight+0xae>
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <HLCD_ShiftCursorRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3a:	78 85       	ldd	r23, Y+8	; 0x08
    1d3c:	89 85       	ldd	r24, Y+9	; 0x09
    1d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	9a 83       	std	Y+2, r25	; 0x02
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	9a 81       	ldd	r25, Y+2	; 0x02
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <HLCD_ShiftCursorRight+0xf6>
    1d5c:	9a 83       	std	Y+2, r25	; 0x02
    1d5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1d60:	2e 96       	adiw	r28, 0x0e	; 14
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <HLCD_WriteHexNumber>:
 *
 * 		This function write a number on the LCD as hex
 *
 ***************************************************** */
void HLCD_WriteHexNumber(u8 Number)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	c8 56       	subi	r28, 0x68	; 104
    1d7c:	d0 40       	sbci	r29, 0x00	; 0
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e8 59       	subi	r30, 0x98	; 152
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 83       	st	Z, r24
    /*				char array to store hexadecimal number				*/
    u8 Copy_u8HexaDeciNum[100];
    /*				counter for hexadecimal number array				*/
    u8 Copy_u8Counter = 0;
    1d90:	1b 82       	std	Y+3, r1	; 0x03
    1d92:	33 c0       	rjmp	.+102    	; 0x1dfa <HLCD_WriteHexNumber+0x88>
    while (Number != 0)
    {
        /*			temporary variable to store remainder				*/
        u8 Copy_u8tempVariable = 0;
    1d94:	1a 82       	std	Y+2, r1	; 0x02

        /*			storing remainder in Copy_u8tempVariable 			*/
        Copy_u8tempVariable = Number % 16;
    1d96:	fe 01       	movw	r30, r28
    1d98:	e8 59       	subi	r30, 0x98	; 152
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8f 70       	andi	r24, 0x0F	; 15
    1da0:	8a 83       	std	Y+2, r24	; 0x02

        /*			check if Copy_u8tempVariable < 10					*/
        if (Copy_u8tempVariable < 10)
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	8a 30       	cpi	r24, 0x0A	; 10
    1da6:	80 f4       	brcc	.+32     	; 0x1dc8 <HLCD_WriteHexNumber+0x56>
        {
            Copy_u8HexaDeciNum[Copy_u8Counter] = Copy_u8tempVariable + 48;
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	48 2f       	mov	r20, r24
    1db2:	40 5d       	subi	r20, 0xD0	; 208
    1db4:	ce 01       	movw	r24, r28
    1db6:	04 96       	adiw	r24, 0x04	; 4
    1db8:	fc 01       	movw	r30, r24
    1dba:	e2 0f       	add	r30, r18
    1dbc:	f3 1f       	adc	r31, r19
    1dbe:	40 83       	st	Z, r20
            Copy_u8Counter++;
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	8f 5f       	subi	r24, 0xFF	; 255
    1dc4:	8b 83       	std	Y+3, r24	; 0x03
    1dc6:	0f c0       	rjmp	.+30     	; 0x1de6 <HLCD_WriteHexNumber+0x74>
        }
        else
        {
        	Copy_u8HexaDeciNum[Copy_u8Counter] = Copy_u8tempVariable + 55;
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	49 5c       	subi	r20, 0xC9	; 201
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	04 96       	adiw	r24, 0x04	; 4
    1dd8:	fc 01       	movw	r30, r24
    1dda:	e2 0f       	add	r30, r18
    1ddc:	f3 1f       	adc	r31, r19
    1dde:	40 83       	st	Z, r20
        	Copy_u8Counter++;
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	8f 5f       	subi	r24, 0xFF	; 255
    1de4:	8b 83       	std	Y+3, r24	; 0x03
        }
        Number = Number / 16;
    1de6:	de 01       	movw	r26, r28
    1de8:	a8 59       	subi	r26, 0x98	; 152
    1dea:	bf 4f       	sbci	r27, 0xFF	; 255
    1dec:	fe 01       	movw	r30, r28
    1dee:	e8 59       	subi	r30, 0x98	; 152
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	80 81       	ld	r24, Z
    1df4:	82 95       	swap	r24
    1df6:	8f 70       	andi	r24, 0x0F	; 15
    1df8:	8c 93       	st	X, r24
{
    /*				char array to store hexadecimal number				*/
    u8 Copy_u8HexaDeciNum[100];
    /*				counter for hexadecimal number array				*/
    u8 Copy_u8Counter = 0;
    while (Number != 0)
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e8 59       	subi	r30, 0x98	; 152
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 81       	ld	r24, Z
    1e02:	88 23       	and	r24, r24
    1e04:	39 f6       	brne	.-114    	; 0x1d94 <HLCD_WriteHexNumber+0x22>
        	Copy_u8HexaDeciNum[Copy_u8Counter] = Copy_u8tempVariable + 55;
        	Copy_u8Counter++;
        }
        Number = Number / 16;
    }
    for (u8 Copy_u8Counterloop = Copy_u8Counter - 1; Copy_u8Counterloop >= 0; Copy_u8Counterloop--)
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	81 50       	subi	r24, 0x01	; 1
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    {
    	HLCD_VoidSendNumber(Copy_u8HexaDeciNum[Copy_u8Counterloop]);
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	ce 01       	movw	r24, r28
    1e14:	04 96       	adiw	r24, 0x04	; 4
    1e16:	fc 01       	movw	r30, r24
    1e18:	e2 0f       	add	r30, r18
    1e1a:	f3 1f       	adc	r31, r19
    1e1c:	80 81       	ld	r24, Z
    1e1e:	88 2f       	mov	r24, r24
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	a0 e0       	ldi	r26, 0x00	; 0
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <HLCD_VoidSendNumber>
        	Copy_u8HexaDeciNum[Copy_u8Counter] = Copy_u8tempVariable + 55;
        	Copy_u8Counter++;
        }
        Number = Number / 16;
    }
    for (u8 Copy_u8Counterloop = Copy_u8Counter - 1; Copy_u8Counterloop >= 0; Copy_u8Counterloop--)
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	81 50       	subi	r24, 0x01	; 1
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	eb cf       	rjmp	.-42     	; 0x1e0c <HLCD_WriteHexNumber+0x9a>

00001e36 <HLCD_WriteBinaryNumber>:
 *
 * 		This function Write a number in the LCD as a binary form
 *
 * ******************************************************************/
void HLCD_WriteBinaryNumber(u8 Number)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	c6 56       	subi	r28, 0x66	; 102
    1e40:	d0 40       	sbci	r29, 0x00	; 0
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ea 59       	subi	r30, 0x9A	; 154
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 83       	st	Z, r24
    /*				char array to store Binary number					*/
    u8 Copy_u8BinaryDeciNum[100];

    for(u8 Copy_u8Counter = 0; Number > 0; Copy_u8Counter++)
    1e54:	19 82       	std	Y+1, r1	; 0x01
    1e56:	2c c0       	rjmp	.+88     	; 0x1eb0 <HLCD_WriteBinaryNumber+0x7a>
    {
    	/*			Getting the Mod of base 2 to convert into binary	*/
    	Copy_u8BinaryDeciNum[Copy_u8Counter] = Number % 2;
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	fe 01       	movw	r30, r28
    1e60:	ea 59       	subi	r30, 0x9A	; 154
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	80 81       	ld	r24, Z
    1e66:	48 2f       	mov	r20, r24
    1e68:	41 70       	andi	r20, 0x01	; 1
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	02 96       	adiw	r24, 0x02	; 2
    1e6e:	fc 01       	movw	r30, r24
    1e70:	e2 0f       	add	r30, r18
    1e72:	f3 1f       	adc	r31, r19
    1e74:	40 83       	st	Z, r20
    	Number = Number / 2;
    1e76:	de 01       	movw	r26, r28
    1e78:	aa 59       	subi	r26, 0x9A	; 154
    1e7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ea 59       	subi	r30, 0x9A	; 154
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	80 81       	ld	r24, Z
    1e84:	86 95       	lsr	r24
    1e86:	8c 93       	st	X, r24
    	/*			Sending the number to the LCD						*/
    	HLCD_VoidSendNumber(Copy_u8BinaryDeciNum[Copy_u8Counter]);
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	ce 01       	movw	r24, r28
    1e90:	02 96       	adiw	r24, 0x02	; 2
    1e92:	fc 01       	movw	r30, r24
    1e94:	e2 0f       	add	r30, r18
    1e96:	f3 1f       	adc	r31, r19
    1e98:	80 81       	ld	r24, Z
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 b8 0a 	call	0x1570	; 0x1570 <HLCD_VoidSendNumber>
void HLCD_WriteBinaryNumber(u8 Number)
{
    /*				char array to store Binary number					*/
    u8 Copy_u8BinaryDeciNum[100];

    for(u8 Copy_u8Counter = 0; Number > 0; Copy_u8Counter++)
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	8f 5f       	subi	r24, 0xFF	; 255
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	ea 59       	subi	r30, 0x9A	; 154
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	80 81       	ld	r24, Z
    1eb8:	88 23       	and	r24, r24
    1eba:	71 f6       	brne	.-100    	; 0x1e58 <HLCD_WriteBinaryNumber+0x22>
    	Copy_u8BinaryDeciNum[Copy_u8Counter] = Number % 2;
    	Number = Number / 2;
    	/*			Sending the number to the LCD						*/
    	HLCD_VoidSendNumber(Copy_u8BinaryDeciNum[Copy_u8Counter]);
    }
}
    1ebc:	ca 59       	subi	r28, 0x9A	; 154
    1ebe:	df 4f       	sbci	r29, 0xFF	; 255
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <HLCD_AnimateString>:
 * 			last character in the string start from the beginning
 * 			of the LCD
 *
 ***********************************************************************/
void HLCD_AnimateString(u8 * str)
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	60 97       	sbiw	r28, 0x10	; 16
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	98 8b       	std	Y+16, r25	; 0x10
    1ee6:	8f 87       	std	Y+15, r24	; 0x0f
    1ee8:	93 c0       	rjmp	.+294    	; 0x2010 <HLCD_AnimateString+0x140>
	static s8 Copy_iCounter = -1;
	/*			Looping on the string to make the animation on it		*/
	for(; Copy_iCounter <= 15; Copy_iCounter++)
	{
		/*		Set the cursor to the beginning							*/
		HLCD_GoToXY(1,Copy_iCounter);
    1eea:	90 91 81 01 	lds	r25, 0x0181
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	69 2f       	mov	r22, r25
    1ef2:	0e 94 90 0a 	call	0x1520	; 0x1520 <HLCD_GoToXY>
		HLCD_VoidWriteStr(str);
    1ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef8:	98 89       	ldd	r25, Y+16	; 0x10
    1efa:	0e 94 67 0a 	call	0x14ce	; 0x14ce <HLCD_VoidWriteStr>
		/*
		 * check if the counter bigger then the length of the
		 * 								character
		 *																*/
		if(Copy_iCounter > 10)
    1efe:	80 91 81 01 	lds	r24, 0x0181
    1f02:	8b 30       	cpi	r24, 0x0B	; 11
    1f04:	64 f0       	brlt	.+24     	; 0x1f1e <HLCD_AnimateString+0x4e>
		{
			/*		Set the string from the first row and last column	*/
			HLCD_GoToXY(1, Copy_iCounter - 15);
    1f06:	80 91 81 01 	lds	r24, 0x0181
    1f0a:	8f 50       	subi	r24, 0x0F	; 15
    1f0c:	98 2f       	mov	r25, r24
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	69 2f       	mov	r22, r25
    1f12:	0e 94 90 0a 	call	0x1520	; 0x1520 <HLCD_GoToXY>
			/*		Send the String to the LCD							*/
			HLCD_VoidWriteStr(str);
    1f16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f18:	98 89       	ldd	r25, Y+16	; 0x10
    1f1a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <HLCD_VoidWriteStr>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a8 e4       	ldi	r26, 0x48	; 72
    1f24:	b3 e4       	ldi	r27, 0x43	; 67
    1f26:	8b 87       	std	Y+11, r24	; 0x0b
    1f28:	9c 87       	std	Y+12, r25	; 0x0c
    1f2a:	ad 87       	std	Y+13, r26	; 0x0d
    1f2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	4a ef       	ldi	r20, 0xFA	; 250
    1f3c:	54 e4       	ldi	r21, 0x44	; 68
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	8f 83       	std	Y+7, r24	; 0x07
    1f48:	98 87       	std	Y+8, r25	; 0x08
    1f4a:	a9 87       	std	Y+9, r26	; 0x09
    1f4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f50:	78 85       	ldd	r23, Y+8	; 0x08
    1f52:	89 85       	ldd	r24, Y+9	; 0x09
    1f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e8       	ldi	r20, 0x80	; 128
    1f5c:	5f e3       	ldi	r21, 0x3F	; 63
    1f5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f62:	88 23       	and	r24, r24
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <HLCD_AnimateString+0xa0>
		__ticks = 1;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	9e 83       	std	Y+6, r25	; 0x06
    1f6c:	8d 83       	std	Y+5, r24	; 0x05
    1f6e:	3f c0       	rjmp	.+126    	; 0x1fee <HLCD_AnimateString+0x11e>
	else if (__tmp > 65535)
    1f70:	6f 81       	ldd	r22, Y+7	; 0x07
    1f72:	78 85       	ldd	r23, Y+8	; 0x08
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	3f ef       	ldi	r19, 0xFF	; 255
    1f7c:	4f e7       	ldi	r20, 0x7F	; 127
    1f7e:	57 e4       	ldi	r21, 0x47	; 71
    1f80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f84:	18 16       	cp	r1, r24
    1f86:	4c f5       	brge	.+82     	; 0x1fda <HLCD_AnimateString+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e2       	ldi	r20, 0x20	; 32
    1f96:	51 e4       	ldi	r21, 0x41	; 65
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
    1fb0:	0f c0       	rjmp	.+30     	; 0x1fd0 <HLCD_AnimateString+0x100>
    1fb2:	88 ec       	ldi	r24, 0xC8	; 200
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9c 83       	std	Y+4, r25	; 0x04
    1fb8:	8b 83       	std	Y+3, r24	; 0x03
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <HLCD_AnimateString+0xee>
    1fc2:	9c 83       	std	Y+4, r25	; 0x04
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	9e 83       	std	Y+6, r25	; 0x06
    1fce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	69 f7       	brne	.-38     	; 0x1fb2 <HLCD_AnimateString+0xe2>
    1fd8:	14 c0       	rjmp	.+40     	; 0x2002 <HLCD_AnimateString+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fda:	6f 81       	ldd	r22, Y+7	; 0x07
    1fdc:	78 85       	ldd	r23, Y+8	; 0x08
    1fde:	89 85       	ldd	r24, Y+9	; 0x09
    1fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff2:	9a 83       	std	Y+2, r25	; 0x02
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <HLCD_AnimateString+0x12a>
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	89 83       	std	Y+1, r24	; 0x01
		}
		/*						Wait for 200ms 							*/
		_delay_ms(200);
		/*				Clear all the display							*/
		HLCD_ClearDisplay();
    2002:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <HLCD_ClearDisplay>
void HLCD_AnimateString(u8 * str)
{

	static s8 Copy_iCounter = -1;
	/*			Looping on the string to make the animation on it		*/
	for(; Copy_iCounter <= 15; Copy_iCounter++)
    2006:	80 91 81 01 	lds	r24, 0x0181
    200a:	8f 5f       	subi	r24, 0xFF	; 255
    200c:	80 93 81 01 	sts	0x0181, r24
    2010:	80 91 81 01 	lds	r24, 0x0181
    2014:	80 31       	cpi	r24, 0x10	; 16
    2016:	0c f4       	brge	.+2      	; 0x201a <HLCD_AnimateString+0x14a>
    2018:	68 cf       	rjmp	.-304    	; 0x1eea <HLCD_AnimateString+0x1a>
		_delay_ms(200);
		/*				Clear all the display							*/
		HLCD_ClearDisplay();
	}
	/*				Start the counter from the beginning				*/
	Copy_iCounter = 1;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	80 93 81 01 	sts	0x0181, r24
}
    2020:	60 96       	adiw	r28, 0x10	; 16
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <MDIO_VoidSetPinDirection>:
 *
 * 			Here we Set the Pin direction of the given port to 1 or 0
 *
 *************************************************************************/
void MDIO_VoidSetPinDirection(u8 Copy_u8Port ,u8 Copy_u8Pin, u8 Copy_u8Direc)
{
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	27 97       	sbiw	r28, 0x07	; 7
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	6a 83       	std	Y+2, r22	; 0x02
    204a:	4b 83       	std	Y+3, r20	; 0x03
	/*					check for pins and ports					*/
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	84 30       	cpi	r24, 0x04	; 4
    2050:	08 f0       	brcs	.+2      	; 0x2054 <MDIO_VoidSetPinDirection+0x22>
    2052:	ee c0       	rjmp	.+476    	; 0x2230 <MDIO_VoidSetPinDirection+0x1fe>
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	88 30       	cpi	r24, 0x08	; 8
    2058:	08 f0       	brcs	.+2      	; 0x205c <MDIO_VoidSetPinDirection+0x2a>
    205a:	ea c0       	rjmp	.+468    	; 0x2230 <MDIO_VoidSetPinDirection+0x1fe>
	{
	/*					check the direction							*/
		if(DIO_PIN_HIGH == Copy_u8Direc)
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	81 30       	cpi	r24, 0x01	; 1
    2060:	09 f0       	breq	.+2      	; 0x2064 <MDIO_VoidSetPinDirection+0x32>
    2062:	6f c0       	rjmp	.+222    	; 0x2142 <MDIO_VoidSetPinDirection+0x110>
		{
			switch(Copy_u8Port)
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	3f 83       	std	Y+7, r19	; 0x07
    206c:	2e 83       	std	Y+6, r18	; 0x06
    206e:	8e 81       	ldd	r24, Y+6	; 0x06
    2070:	9f 81       	ldd	r25, Y+7	; 0x07
    2072:	81 30       	cpi	r24, 0x01	; 1
    2074:	91 05       	cpc	r25, r1
    2076:	49 f1       	breq	.+82     	; 0x20ca <MDIO_VoidSetPinDirection+0x98>
    2078:	2e 81       	ldd	r18, Y+6	; 0x06
    207a:	3f 81       	ldd	r19, Y+7	; 0x07
    207c:	22 30       	cpi	r18, 0x02	; 2
    207e:	31 05       	cpc	r19, r1
    2080:	2c f4       	brge	.+10     	; 0x208c <MDIO_VoidSetPinDirection+0x5a>
    2082:	8e 81       	ldd	r24, Y+6	; 0x06
    2084:	9f 81       	ldd	r25, Y+7	; 0x07
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	61 f0       	breq	.+24     	; 0x20a2 <MDIO_VoidSetPinDirection+0x70>
    208a:	d2 c0       	rjmp	.+420    	; 0x2230 <MDIO_VoidSetPinDirection+0x1fe>
    208c:	2e 81       	ldd	r18, Y+6	; 0x06
    208e:	3f 81       	ldd	r19, Y+7	; 0x07
    2090:	22 30       	cpi	r18, 0x02	; 2
    2092:	31 05       	cpc	r19, r1
    2094:	71 f1       	breq	.+92     	; 0x20f2 <MDIO_VoidSetPinDirection+0xc0>
    2096:	8e 81       	ldd	r24, Y+6	; 0x06
    2098:	9f 81       	ldd	r25, Y+7	; 0x07
    209a:	83 30       	cpi	r24, 0x03	; 3
    209c:	91 05       	cpc	r25, r1
    209e:	e9 f1       	breq	.+122    	; 0x211a <MDIO_VoidSetPinDirection+0xe8>
    20a0:	c7 c0       	rjmp	.+398    	; 0x2230 <MDIO_VoidSetPinDirection+0x1fe>
			{
				case DIO_PORTA:SET_BIT(DDRA_REG, Copy_u8Pin); break;
    20a2:	aa e3       	ldi	r26, 0x3A	; 58
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	ea e3       	ldi	r30, 0x3A	; 58
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	48 2f       	mov	r20, r24
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	02 2e       	mov	r0, r18
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <MDIO_VoidSetPinDirection+0x8e>
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	0a 94       	dec	r0
    20c2:	e2 f7       	brpl	.-8      	; 0x20bc <MDIO_VoidSetPinDirection+0x8a>
    20c4:	84 2b       	or	r24, r20
    20c6:	8c 93       	st	X, r24
    20c8:	b3 c0       	rjmp	.+358    	; 0x2230 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTB:SET_BIT(DDRB_REG, Copy_u8Pin); break;
    20ca:	a7 e3       	ldi	r26, 0x37	; 55
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e7 e3       	ldi	r30, 0x37	; 55
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	48 2f       	mov	r20, r24
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	02 2e       	mov	r0, r18
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <MDIO_VoidSetPinDirection+0xb6>
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	0a 94       	dec	r0
    20ea:	e2 f7       	brpl	.-8      	; 0x20e4 <MDIO_VoidSetPinDirection+0xb2>
    20ec:	84 2b       	or	r24, r20
    20ee:	8c 93       	st	X, r24
    20f0:	9f c0       	rjmp	.+318    	; 0x2230 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTC:SET_BIT(DDRC_REG, Copy_u8Pin); break;
    20f2:	a4 e3       	ldi	r26, 0x34	; 52
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e4 e3       	ldi	r30, 0x34	; 52
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	48 2f       	mov	r20, r24
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	02 2e       	mov	r0, r18
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <MDIO_VoidSetPinDirection+0xde>
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	0a 94       	dec	r0
    2112:	e2 f7       	brpl	.-8      	; 0x210c <MDIO_VoidSetPinDirection+0xda>
    2114:	84 2b       	or	r24, r20
    2116:	8c 93       	st	X, r24
    2118:	8b c0       	rjmp	.+278    	; 0x2230 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTD:SET_BIT(DDRD_REG, Copy_u8Pin); break;
    211a:	a1 e3       	ldi	r26, 0x31	; 49
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e1 e3       	ldi	r30, 0x31	; 49
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	48 2f       	mov	r20, r24
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	02 2e       	mov	r0, r18
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <MDIO_VoidSetPinDirection+0x106>
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	0a 94       	dec	r0
    213a:	e2 f7       	brpl	.-8      	; 0x2134 <MDIO_VoidSetPinDirection+0x102>
    213c:	84 2b       	or	r24, r20
    213e:	8c 93       	st	X, r24
    2140:	77 c0       	rjmp	.+238    	; 0x2230 <MDIO_VoidSetPinDirection+0x1fe>
				default: /*		Wrong POrt ID		*/	      break;
			}
		}
	/**/
		else if(DIO_PIN_LOW == Copy_u8Direc)
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	88 23       	and	r24, r24
    2146:	09 f0       	breq	.+2      	; 0x214a <MDIO_VoidSetPinDirection+0x118>
    2148:	73 c0       	rjmp	.+230    	; 0x2230 <MDIO_VoidSetPinDirection+0x1fe>
		{
			switch(Copy_u8Port)
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	3d 83       	std	Y+5, r19	; 0x05
    2152:	2c 83       	std	Y+4, r18	; 0x04
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	9d 81       	ldd	r25, Y+5	; 0x05
    2158:	81 30       	cpi	r24, 0x01	; 1
    215a:	91 05       	cpc	r25, r1
    215c:	59 f1       	breq	.+86     	; 0x21b4 <MDIO_VoidSetPinDirection+0x182>
    215e:	2c 81       	ldd	r18, Y+4	; 0x04
    2160:	3d 81       	ldd	r19, Y+5	; 0x05
    2162:	22 30       	cpi	r18, 0x02	; 2
    2164:	31 05       	cpc	r19, r1
    2166:	2c f4       	brge	.+10     	; 0x2172 <MDIO_VoidSetPinDirection+0x140>
    2168:	8c 81       	ldd	r24, Y+4	; 0x04
    216a:	9d 81       	ldd	r25, Y+5	; 0x05
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	69 f0       	breq	.+26     	; 0x218a <MDIO_VoidSetPinDirection+0x158>
    2170:	5f c0       	rjmp	.+190    	; 0x2230 <MDIO_VoidSetPinDirection+0x1fe>
    2172:	2c 81       	ldd	r18, Y+4	; 0x04
    2174:	3d 81       	ldd	r19, Y+5	; 0x05
    2176:	22 30       	cpi	r18, 0x02	; 2
    2178:	31 05       	cpc	r19, r1
    217a:	89 f1       	breq	.+98     	; 0x21de <MDIO_VoidSetPinDirection+0x1ac>
    217c:	8c 81       	ldd	r24, Y+4	; 0x04
    217e:	9d 81       	ldd	r25, Y+5	; 0x05
    2180:	83 30       	cpi	r24, 0x03	; 3
    2182:	91 05       	cpc	r25, r1
    2184:	09 f4       	brne	.+2      	; 0x2188 <MDIO_VoidSetPinDirection+0x156>
    2186:	40 c0       	rjmp	.+128    	; 0x2208 <MDIO_VoidSetPinDirection+0x1d6>
    2188:	53 c0       	rjmp	.+166    	; 0x2230 <MDIO_VoidSetPinDirection+0x1fe>
			{
				case DIO_PORTA:CLR_BIT(DDRA_REG, Copy_u8Pin); break;
    218a:	aa e3       	ldi	r26, 0x3A	; 58
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	ea e3       	ldi	r30, 0x3A	; 58
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	48 2f       	mov	r20, r24
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	02 2e       	mov	r0, r18
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <MDIO_VoidSetPinDirection+0x176>
    21a4:	88 0f       	add	r24, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	0a 94       	dec	r0
    21aa:	e2 f7       	brpl	.-8      	; 0x21a4 <MDIO_VoidSetPinDirection+0x172>
    21ac:	80 95       	com	r24
    21ae:	84 23       	and	r24, r20
    21b0:	8c 93       	st	X, r24
    21b2:	3e c0       	rjmp	.+124    	; 0x2230 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTB:CLR_BIT(DDRB_REG, Copy_u8Pin); break;
    21b4:	a7 e3       	ldi	r26, 0x37	; 55
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e7 e3       	ldi	r30, 0x37	; 55
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	48 2f       	mov	r20, r24
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	02 2e       	mov	r0, r18
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <MDIO_VoidSetPinDirection+0x1a0>
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	0a 94       	dec	r0
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <MDIO_VoidSetPinDirection+0x19c>
    21d6:	80 95       	com	r24
    21d8:	84 23       	and	r24, r20
    21da:	8c 93       	st	X, r24
    21dc:	29 c0       	rjmp	.+82     	; 0x2230 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTC:CLR_BIT(DDRC_REG, Copy_u8Pin); break;
    21de:	a4 e3       	ldi	r26, 0x34	; 52
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e4 e3       	ldi	r30, 0x34	; 52
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	48 2f       	mov	r20, r24
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	02 2e       	mov	r0, r18
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <MDIO_VoidSetPinDirection+0x1ca>
    21f8:	88 0f       	add	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	0a 94       	dec	r0
    21fe:	e2 f7       	brpl	.-8      	; 0x21f8 <MDIO_VoidSetPinDirection+0x1c6>
    2200:	80 95       	com	r24
    2202:	84 23       	and	r24, r20
    2204:	8c 93       	st	X, r24
    2206:	14 c0       	rjmp	.+40     	; 0x2230 <MDIO_VoidSetPinDirection+0x1fe>
				case DIO_PORTD:CLR_BIT(DDRD_REG, Copy_u8Pin); break;
    2208:	a1 e3       	ldi	r26, 0x31	; 49
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e1 e3       	ldi	r30, 0x31	; 49
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	48 2f       	mov	r20, r24
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	02 2e       	mov	r0, r18
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <MDIO_VoidSetPinDirection+0x1f4>
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	0a 94       	dec	r0
    2228:	e2 f7       	brpl	.-8      	; 0x2222 <MDIO_VoidSetPinDirection+0x1f0>
    222a:	80 95       	com	r24
    222c:	84 23       	and	r24, r20
    222e:	8c 93       	st	X, r24
	}
	else
	{
		/*					Wrong PIN ID or POrt ID						*/
	}
}
    2230:	27 96       	adiw	r28, 0x07	; 7
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <MDIO_VoidSetPinValue>:
 *
 * 			Here we Set the Pin value of the given port to 1 or 0
 *
 *************************************************************************/
void MDIO_VoidSetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin, u8 Copy_u8Value)
{
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	27 97       	sbiw	r28, 0x07	; 7
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	de bf       	out	0x3e, r29	; 62
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	cd bf       	out	0x3d, r28	; 61
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	6a 83       	std	Y+2, r22	; 0x02
    225a:	4b 83       	std	Y+3, r20	; 0x03
	/*					check for pins and ports					*/
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	84 30       	cpi	r24, 0x04	; 4
    2260:	08 f0       	brcs	.+2      	; 0x2264 <MDIO_VoidSetPinValue+0x22>
    2262:	ee c0       	rjmp	.+476    	; 0x2440 <MDIO_VoidSetPinValue+0x1fe>
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	88 30       	cpi	r24, 0x08	; 8
    2268:	08 f0       	brcs	.+2      	; 0x226c <MDIO_VoidSetPinValue+0x2a>
    226a:	ea c0       	rjmp	.+468    	; 0x2440 <MDIO_VoidSetPinValue+0x1fe>
	{
	/*check the direction*/
		if(DIO_PIN_HIGH == Copy_u8Value)
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	09 f0       	breq	.+2      	; 0x2274 <MDIO_VoidSetPinValue+0x32>
    2272:	6f c0       	rjmp	.+222    	; 0x2352 <MDIO_VoidSetPinValue+0x110>
		{
			switch(Copy_u8Port)
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	3f 83       	std	Y+7, r19	; 0x07
    227c:	2e 83       	std	Y+6, r18	; 0x06
    227e:	8e 81       	ldd	r24, Y+6	; 0x06
    2280:	9f 81       	ldd	r25, Y+7	; 0x07
    2282:	81 30       	cpi	r24, 0x01	; 1
    2284:	91 05       	cpc	r25, r1
    2286:	49 f1       	breq	.+82     	; 0x22da <MDIO_VoidSetPinValue+0x98>
    2288:	2e 81       	ldd	r18, Y+6	; 0x06
    228a:	3f 81       	ldd	r19, Y+7	; 0x07
    228c:	22 30       	cpi	r18, 0x02	; 2
    228e:	31 05       	cpc	r19, r1
    2290:	2c f4       	brge	.+10     	; 0x229c <MDIO_VoidSetPinValue+0x5a>
    2292:	8e 81       	ldd	r24, Y+6	; 0x06
    2294:	9f 81       	ldd	r25, Y+7	; 0x07
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	61 f0       	breq	.+24     	; 0x22b2 <MDIO_VoidSetPinValue+0x70>
    229a:	d2 c0       	rjmp	.+420    	; 0x2440 <MDIO_VoidSetPinValue+0x1fe>
    229c:	2e 81       	ldd	r18, Y+6	; 0x06
    229e:	3f 81       	ldd	r19, Y+7	; 0x07
    22a0:	22 30       	cpi	r18, 0x02	; 2
    22a2:	31 05       	cpc	r19, r1
    22a4:	71 f1       	breq	.+92     	; 0x2302 <MDIO_VoidSetPinValue+0xc0>
    22a6:	8e 81       	ldd	r24, Y+6	; 0x06
    22a8:	9f 81       	ldd	r25, Y+7	; 0x07
    22aa:	83 30       	cpi	r24, 0x03	; 3
    22ac:	91 05       	cpc	r25, r1
    22ae:	e9 f1       	breq	.+122    	; 0x232a <MDIO_VoidSetPinValue+0xe8>
    22b0:	c7 c0       	rjmp	.+398    	; 0x2440 <MDIO_VoidSetPinValue+0x1fe>
			{
				case DIO_PORTA:SET_BIT(PORTA_REG, Copy_u8Pin); break;
    22b2:	ab e3       	ldi	r26, 0x3B	; 59
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	eb e3       	ldi	r30, 0x3B	; 59
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	48 2f       	mov	r20, r24
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	02 2e       	mov	r0, r18
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <MDIO_VoidSetPinValue+0x8e>
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	0a 94       	dec	r0
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <MDIO_VoidSetPinValue+0x8a>
    22d4:	84 2b       	or	r24, r20
    22d6:	8c 93       	st	X, r24
    22d8:	b3 c0       	rjmp	.+358    	; 0x2440 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTB:SET_BIT(PORTB_REG, Copy_u8Pin); break;
    22da:	a8 e3       	ldi	r26, 0x38	; 56
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e8 e3       	ldi	r30, 0x38	; 56
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	48 2f       	mov	r20, r24
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	02 2e       	mov	r0, r18
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <MDIO_VoidSetPinValue+0xb6>
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	0a 94       	dec	r0
    22fa:	e2 f7       	brpl	.-8      	; 0x22f4 <MDIO_VoidSetPinValue+0xb2>
    22fc:	84 2b       	or	r24, r20
    22fe:	8c 93       	st	X, r24
    2300:	9f c0       	rjmp	.+318    	; 0x2440 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTC:SET_BIT(PORTC_REG, Copy_u8Pin); break;
    2302:	a5 e3       	ldi	r26, 0x35	; 53
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e5 e3       	ldi	r30, 0x35	; 53
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	48 2f       	mov	r20, r24
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	02 2e       	mov	r0, r18
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <MDIO_VoidSetPinValue+0xde>
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	0a 94       	dec	r0
    2322:	e2 f7       	brpl	.-8      	; 0x231c <MDIO_VoidSetPinValue+0xda>
    2324:	84 2b       	or	r24, r20
    2326:	8c 93       	st	X, r24
    2328:	8b c0       	rjmp	.+278    	; 0x2440 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTD:SET_BIT(PORTD_REG, Copy_u8Pin); break;
    232a:	a2 e3       	ldi	r26, 0x32	; 50
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e2 e3       	ldi	r30, 0x32	; 50
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	48 2f       	mov	r20, r24
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	02 2e       	mov	r0, r18
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <MDIO_VoidSetPinValue+0x106>
    2344:	88 0f       	add	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	0a 94       	dec	r0
    234a:	e2 f7       	brpl	.-8      	; 0x2344 <MDIO_VoidSetPinValue+0x102>
    234c:	84 2b       	or	r24, r20
    234e:	8c 93       	st	X, r24
    2350:	77 c0       	rjmp	.+238    	; 0x2440 <MDIO_VoidSetPinValue+0x1fe>
				default: /*		Wrong POrt ID		*/	   	   break;
			}
		}
	/**/
		else if(DIO_PIN_LOW == Copy_u8Value)
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	88 23       	and	r24, r24
    2356:	09 f0       	breq	.+2      	; 0x235a <MDIO_VoidSetPinValue+0x118>
    2358:	73 c0       	rjmp	.+230    	; 0x2440 <MDIO_VoidSetPinValue+0x1fe>
		{
			switch(Copy_u8Port)
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	3d 83       	std	Y+5, r19	; 0x05
    2362:	2c 83       	std	Y+4, r18	; 0x04
    2364:	8c 81       	ldd	r24, Y+4	; 0x04
    2366:	9d 81       	ldd	r25, Y+5	; 0x05
    2368:	81 30       	cpi	r24, 0x01	; 1
    236a:	91 05       	cpc	r25, r1
    236c:	59 f1       	breq	.+86     	; 0x23c4 <MDIO_VoidSetPinValue+0x182>
    236e:	2c 81       	ldd	r18, Y+4	; 0x04
    2370:	3d 81       	ldd	r19, Y+5	; 0x05
    2372:	22 30       	cpi	r18, 0x02	; 2
    2374:	31 05       	cpc	r19, r1
    2376:	2c f4       	brge	.+10     	; 0x2382 <MDIO_VoidSetPinValue+0x140>
    2378:	8c 81       	ldd	r24, Y+4	; 0x04
    237a:	9d 81       	ldd	r25, Y+5	; 0x05
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	69 f0       	breq	.+26     	; 0x239a <MDIO_VoidSetPinValue+0x158>
    2380:	5f c0       	rjmp	.+190    	; 0x2440 <MDIO_VoidSetPinValue+0x1fe>
    2382:	2c 81       	ldd	r18, Y+4	; 0x04
    2384:	3d 81       	ldd	r19, Y+5	; 0x05
    2386:	22 30       	cpi	r18, 0x02	; 2
    2388:	31 05       	cpc	r19, r1
    238a:	89 f1       	breq	.+98     	; 0x23ee <MDIO_VoidSetPinValue+0x1ac>
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
    238e:	9d 81       	ldd	r25, Y+5	; 0x05
    2390:	83 30       	cpi	r24, 0x03	; 3
    2392:	91 05       	cpc	r25, r1
    2394:	09 f4       	brne	.+2      	; 0x2398 <MDIO_VoidSetPinValue+0x156>
    2396:	40 c0       	rjmp	.+128    	; 0x2418 <MDIO_VoidSetPinValue+0x1d6>
    2398:	53 c0       	rjmp	.+166    	; 0x2440 <MDIO_VoidSetPinValue+0x1fe>
			{
				case DIO_PORTA:CLR_BIT(PORTA_REG, Copy_u8Pin); break;
    239a:	ab e3       	ldi	r26, 0x3B	; 59
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	eb e3       	ldi	r30, 0x3B	; 59
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	48 2f       	mov	r20, r24
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	02 2e       	mov	r0, r18
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <MDIO_VoidSetPinValue+0x176>
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	0a 94       	dec	r0
    23ba:	e2 f7       	brpl	.-8      	; 0x23b4 <MDIO_VoidSetPinValue+0x172>
    23bc:	80 95       	com	r24
    23be:	84 23       	and	r24, r20
    23c0:	8c 93       	st	X, r24
    23c2:	3e c0       	rjmp	.+124    	; 0x2440 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTB:CLR_BIT(PORTB_REG, Copy_u8Pin); break;
    23c4:	a8 e3       	ldi	r26, 0x38	; 56
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e8 e3       	ldi	r30, 0x38	; 56
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	48 2f       	mov	r20, r24
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	02 2e       	mov	r0, r18
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <MDIO_VoidSetPinValue+0x1a0>
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	0a 94       	dec	r0
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <MDIO_VoidSetPinValue+0x19c>
    23e6:	80 95       	com	r24
    23e8:	84 23       	and	r24, r20
    23ea:	8c 93       	st	X, r24
    23ec:	29 c0       	rjmp	.+82     	; 0x2440 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTC:CLR_BIT(PORTC_REG, Copy_u8Pin); break;
    23ee:	a5 e3       	ldi	r26, 0x35	; 53
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	e5 e3       	ldi	r30, 0x35	; 53
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	48 2f       	mov	r20, r24
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	28 2f       	mov	r18, r24
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	02 2e       	mov	r0, r18
    2406:	02 c0       	rjmp	.+4      	; 0x240c <MDIO_VoidSetPinValue+0x1ca>
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	0a 94       	dec	r0
    240e:	e2 f7       	brpl	.-8      	; 0x2408 <MDIO_VoidSetPinValue+0x1c6>
    2410:	80 95       	com	r24
    2412:	84 23       	and	r24, r20
    2414:	8c 93       	st	X, r24
    2416:	14 c0       	rjmp	.+40     	; 0x2440 <MDIO_VoidSetPinValue+0x1fe>
				case DIO_PORTD:CLR_BIT(PORTD_REG, Copy_u8Pin); break;
    2418:	a2 e3       	ldi	r26, 0x32	; 50
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e2 e3       	ldi	r30, 0x32	; 50
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	48 2f       	mov	r20, r24
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	28 2f       	mov	r18, r24
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	02 2e       	mov	r0, r18
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <MDIO_VoidSetPinValue+0x1f4>
    2432:	88 0f       	add	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	0a 94       	dec	r0
    2438:	e2 f7       	brpl	.-8      	; 0x2432 <MDIO_VoidSetPinValue+0x1f0>
    243a:	80 95       	com	r24
    243c:	84 23       	and	r24, r20
    243e:	8c 93       	st	X, r24
	else
	{
		/*Wrong PIN ID or POrt ID*/
	}

}
    2440:	27 96       	adiw	r28, 0x07	; 7
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <MDIO_u8GetPinValue>:
 *
 * 			Here we get the Pin value of the given port and pin
 *
 *************************************************************************/
u8 MDIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin)
{
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	00 d0       	rcall	.+0      	; 0x2458 <MDIO_u8GetPinValue+0x6>
    2458:	00 d0       	rcall	.+0      	; 0x245a <MDIO_u8GetPinValue+0x8>
    245a:	0f 92       	push	r0
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	8a 83       	std	Y+2, r24	; 0x02
    2462:	6b 83       	std	Y+3, r22	; 0x03
	/*					check for pins and ports					*/
	u8 LOC_u8RetValue_var1;
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	84 30       	cpi	r24, 0x04	; 4
    2468:	08 f0       	brcs	.+2      	; 0x246c <MDIO_u8GetPinValue+0x1a>
    246a:	6c c0       	rjmp	.+216    	; 0x2544 <MDIO_u8GetPinValue+0xf2>
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	88 30       	cpi	r24, 0x08	; 8
    2470:	08 f0       	brcs	.+2      	; 0x2474 <MDIO_u8GetPinValue+0x22>
    2472:	68 c0       	rjmp	.+208    	; 0x2544 <MDIO_u8GetPinValue+0xf2>
	{

		switch(Copy_u8Port)
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	3d 83       	std	Y+5, r19	; 0x05
    247c:	2c 83       	std	Y+4, r18	; 0x04
    247e:	4c 81       	ldd	r20, Y+4	; 0x04
    2480:	5d 81       	ldd	r21, Y+5	; 0x05
    2482:	41 30       	cpi	r20, 0x01	; 1
    2484:	51 05       	cpc	r21, r1
    2486:	41 f1       	breq	.+80     	; 0x24d8 <MDIO_u8GetPinValue+0x86>
    2488:	8c 81       	ldd	r24, Y+4	; 0x04
    248a:	9d 81       	ldd	r25, Y+5	; 0x05
    248c:	82 30       	cpi	r24, 0x02	; 2
    248e:	91 05       	cpc	r25, r1
    2490:	34 f4       	brge	.+12     	; 0x249e <MDIO_u8GetPinValue+0x4c>
    2492:	2c 81       	ldd	r18, Y+4	; 0x04
    2494:	3d 81       	ldd	r19, Y+5	; 0x05
    2496:	21 15       	cp	r18, r1
    2498:	31 05       	cpc	r19, r1
    249a:	61 f0       	breq	.+24     	; 0x24b4 <MDIO_u8GetPinValue+0x62>
    249c:	55 c0       	rjmp	.+170    	; 0x2548 <MDIO_u8GetPinValue+0xf6>
    249e:	4c 81       	ldd	r20, Y+4	; 0x04
    24a0:	5d 81       	ldd	r21, Y+5	; 0x05
    24a2:	42 30       	cpi	r20, 0x02	; 2
    24a4:	51 05       	cpc	r21, r1
    24a6:	51 f1       	breq	.+84     	; 0x24fc <MDIO_u8GetPinValue+0xaa>
    24a8:	8c 81       	ldd	r24, Y+4	; 0x04
    24aa:	9d 81       	ldd	r25, Y+5	; 0x05
    24ac:	83 30       	cpi	r24, 0x03	; 3
    24ae:	91 05       	cpc	r25, r1
    24b0:	b9 f1       	breq	.+110    	; 0x2520 <MDIO_u8GetPinValue+0xce>
    24b2:	4a c0       	rjmp	.+148    	; 0x2548 <MDIO_u8GetPinValue+0xf6>
		{
			case DIO_PORTA: LOC_u8RetValue_var1 = GET_BIT(PINA_REG, Copy_u8Pin);break;
    24b4:	e9 e3       	ldi	r30, 0x39	; 57
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	88 2f       	mov	r24, r24
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	a9 01       	movw	r20, r18
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <MDIO_u8GetPinValue+0x7a>
    24c8:	55 95       	asr	r21
    24ca:	47 95       	ror	r20
    24cc:	8a 95       	dec	r24
    24ce:	e2 f7       	brpl	.-8      	; 0x24c8 <MDIO_u8GetPinValue+0x76>
    24d0:	ca 01       	movw	r24, r20
    24d2:	81 70       	andi	r24, 0x01	; 1
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	38 c0       	rjmp	.+112    	; 0x2548 <MDIO_u8GetPinValue+0xf6>
			case DIO_PORTB: LOC_u8RetValue_var1 = GET_BIT(PINB_REG, Copy_u8Pin);break;
    24d8:	e6 e3       	ldi	r30, 0x36	; 54
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a9 01       	movw	r20, r18
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <MDIO_u8GetPinValue+0x9e>
    24ec:	55 95       	asr	r21
    24ee:	47 95       	ror	r20
    24f0:	8a 95       	dec	r24
    24f2:	e2 f7       	brpl	.-8      	; 0x24ec <MDIO_u8GetPinValue+0x9a>
    24f4:	ca 01       	movw	r24, r20
    24f6:	81 70       	andi	r24, 0x01	; 1
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	26 c0       	rjmp	.+76     	; 0x2548 <MDIO_u8GetPinValue+0xf6>
			case DIO_PORTC: LOC_u8RetValue_var1 = GET_BIT(PINC_REG, Copy_u8Pin);break;
    24fc:	e3 e3       	ldi	r30, 0x33	; 51
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	28 2f       	mov	r18, r24
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	88 2f       	mov	r24, r24
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	a9 01       	movw	r20, r18
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <MDIO_u8GetPinValue+0xc2>
    2510:	55 95       	asr	r21
    2512:	47 95       	ror	r20
    2514:	8a 95       	dec	r24
    2516:	e2 f7       	brpl	.-8      	; 0x2510 <MDIO_u8GetPinValue+0xbe>
    2518:	ca 01       	movw	r24, r20
    251a:	81 70       	andi	r24, 0x01	; 1
    251c:	89 83       	std	Y+1, r24	; 0x01
    251e:	14 c0       	rjmp	.+40     	; 0x2548 <MDIO_u8GetPinValue+0xf6>
			case DIO_PORTD: LOC_u8RetValue_var1 = GET_BIT(PIND_REG, Copy_u8Pin);break;
    2520:	e0 e3       	ldi	r30, 0x30	; 48
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	28 2f       	mov	r18, r24
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	88 2f       	mov	r24, r24
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	a9 01       	movw	r20, r18
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <MDIO_u8GetPinValue+0xe6>
    2534:	55 95       	asr	r21
    2536:	47 95       	ror	r20
    2538:	8a 95       	dec	r24
    253a:	e2 f7       	brpl	.-8      	; 0x2534 <MDIO_u8GetPinValue+0xe2>
    253c:	ca 01       	movw	r24, r20
    253e:	81 70       	andi	r24, 0x01	; 1
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <MDIO_u8GetPinValue+0xf6>
		}
	}
	else
	{
		/*Wrong PIN ID or POrt ID*/
		LOC_u8RetValue_var1 = DIO_UNDEFINED_VAL;
    2544:	8f ef       	ldi	r24, 0xFF	; 255
    2546:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_u8RetValue_var1;
    2548:	89 81       	ldd	r24, Y+1	; 0x01

}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <MDIO_VoidSetPortDirection>:
 *
 * 			Here we Set the port direction of the given port to 1 or 0
 *
 *************************************************************************/
void MDIO_VoidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direc)
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	00 d0       	rcall	.+0      	; 0x2560 <MDIO_VoidSetPortDirection+0x6>
    2560:	00 d0       	rcall	.+0      	; 0x2562 <MDIO_VoidSetPortDirection+0x8>
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	6a 83       	std	Y+2, r22	; 0x02
	/*							check for Port							*/
	switch(Copy_u8Port)
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	28 2f       	mov	r18, r24
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	3c 83       	std	Y+4, r19	; 0x04
    2572:	2b 83       	std	Y+3, r18	; 0x03
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	9c 81       	ldd	r25, Y+4	; 0x04
    2578:	81 30       	cpi	r24, 0x01	; 1
    257a:	91 05       	cpc	r25, r1
    257c:	d1 f0       	breq	.+52     	; 0x25b2 <MDIO_VoidSetPortDirection+0x58>
    257e:	2b 81       	ldd	r18, Y+3	; 0x03
    2580:	3c 81       	ldd	r19, Y+4	; 0x04
    2582:	22 30       	cpi	r18, 0x02	; 2
    2584:	31 05       	cpc	r19, r1
    2586:	2c f4       	brge	.+10     	; 0x2592 <MDIO_VoidSetPortDirection+0x38>
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	9c 81       	ldd	r25, Y+4	; 0x04
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	61 f0       	breq	.+24     	; 0x25a8 <MDIO_VoidSetPortDirection+0x4e>
    2590:	1e c0       	rjmp	.+60     	; 0x25ce <MDIO_VoidSetPortDirection+0x74>
    2592:	2b 81       	ldd	r18, Y+3	; 0x03
    2594:	3c 81       	ldd	r19, Y+4	; 0x04
    2596:	22 30       	cpi	r18, 0x02	; 2
    2598:	31 05       	cpc	r19, r1
    259a:	81 f0       	breq	.+32     	; 0x25bc <MDIO_VoidSetPortDirection+0x62>
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	9c 81       	ldd	r25, Y+4	; 0x04
    25a0:	83 30       	cpi	r24, 0x03	; 3
    25a2:	91 05       	cpc	r25, r1
    25a4:	81 f0       	breq	.+32     	; 0x25c6 <MDIO_VoidSetPortDirection+0x6c>
    25a6:	13 c0       	rjmp	.+38     	; 0x25ce <MDIO_VoidSetPortDirection+0x74>
	{
		case DIO_PORTA:  DDRA_REG =  Copy_u8Direc; break;
    25a8:	ea e3       	ldi	r30, 0x3A	; 58
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	80 83       	st	Z, r24
    25b0:	0e c0       	rjmp	.+28     	; 0x25ce <MDIO_VoidSetPortDirection+0x74>
		case DIO_PORTB:  DDRB_REG =  Copy_u8Direc; break;
    25b2:	e7 e3       	ldi	r30, 0x37	; 55
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	80 83       	st	Z, r24
    25ba:	09 c0       	rjmp	.+18     	; 0x25ce <MDIO_VoidSetPortDirection+0x74>
		case DIO_PORTC:  DDRC_REG =  Copy_u8Direc; break;
    25bc:	e4 e3       	ldi	r30, 0x34	; 52
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	80 83       	st	Z, r24
    25c4:	04 c0       	rjmp	.+8      	; 0x25ce <MDIO_VoidSetPortDirection+0x74>
		case DIO_PORTD:  DDRD_REG =  Copy_u8Direc; break;
    25c6:	e1 e3       	ldi	r30, 0x31	; 49
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	80 83       	st	Z, r24
		default: /*		Wrong POrt ID		*/	   break;
	}
}
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	08 95       	ret

000025dc <MDIO_VoidSetPortValue>:
 *
 * 			Here we Set the port value of the given port to 1 or 0
 *
 *************************************************************************/
void MDIO_VoidSetPortValue(u8 Copy_u8Port ,u8 Copy_u8Value)
{
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <MDIO_VoidSetPortValue+0x6>
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <MDIO_VoidSetPortValue+0x8>
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	6a 83       	std	Y+2, r22	; 0x02
	/*						check for Port								*/
	switch(Copy_u8Port)
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	3c 83       	std	Y+4, r19	; 0x04
    25f4:	2b 83       	std	Y+3, r18	; 0x03
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	9c 81       	ldd	r25, Y+4	; 0x04
    25fa:	81 30       	cpi	r24, 0x01	; 1
    25fc:	91 05       	cpc	r25, r1
    25fe:	d1 f0       	breq	.+52     	; 0x2634 <MDIO_VoidSetPortValue+0x58>
    2600:	2b 81       	ldd	r18, Y+3	; 0x03
    2602:	3c 81       	ldd	r19, Y+4	; 0x04
    2604:	22 30       	cpi	r18, 0x02	; 2
    2606:	31 05       	cpc	r19, r1
    2608:	2c f4       	brge	.+10     	; 0x2614 <MDIO_VoidSetPortValue+0x38>
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	9c 81       	ldd	r25, Y+4	; 0x04
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	61 f0       	breq	.+24     	; 0x262a <MDIO_VoidSetPortValue+0x4e>
    2612:	1e c0       	rjmp	.+60     	; 0x2650 <MDIO_VoidSetPortValue+0x74>
    2614:	2b 81       	ldd	r18, Y+3	; 0x03
    2616:	3c 81       	ldd	r19, Y+4	; 0x04
    2618:	22 30       	cpi	r18, 0x02	; 2
    261a:	31 05       	cpc	r19, r1
    261c:	81 f0       	breq	.+32     	; 0x263e <MDIO_VoidSetPortValue+0x62>
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	83 30       	cpi	r24, 0x03	; 3
    2624:	91 05       	cpc	r25, r1
    2626:	81 f0       	breq	.+32     	; 0x2648 <MDIO_VoidSetPortValue+0x6c>
    2628:	13 c0       	rjmp	.+38     	; 0x2650 <MDIO_VoidSetPortValue+0x74>
	{
		case DIO_PORTA:  PORTA_REG =  Copy_u8Value; break;
    262a:	eb e3       	ldi	r30, 0x3B	; 59
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	80 83       	st	Z, r24
    2632:	0e c0       	rjmp	.+28     	; 0x2650 <MDIO_VoidSetPortValue+0x74>
		case DIO_PORTB:  PORTB_REG =  Copy_u8Value; break;
    2634:	e8 e3       	ldi	r30, 0x38	; 56
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	80 83       	st	Z, r24
    263c:	09 c0       	rjmp	.+18     	; 0x2650 <MDIO_VoidSetPortValue+0x74>
		case DIO_PORTC:  PORTC_REG =  Copy_u8Value; break;
    263e:	e5 e3       	ldi	r30, 0x35	; 53
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	80 83       	st	Z, r24
    2646:	04 c0       	rjmp	.+8      	; 0x2650 <MDIO_VoidSetPortValue+0x74>
		case DIO_PORTD:  PORTD_REG =  Copy_u8Value; break;
    2648:	e2 e3       	ldi	r30, 0x32	; 50
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	80 83       	st	Z, r24
		default: /*		Wrong POrt ID		*/		break;
	}
}
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <MDIO_VoidTogglePin>:
 *
 * 			Here we toggle the Pin
 *
 *************************************************************************/
void MDIO_VoidTogglePin(u8 Copy_u8Port ,u8 Copy_u8Pin)
{
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	00 d0       	rcall	.+0      	; 0x2664 <MDIO_VoidTogglePin+0x6>
    2664:	00 d0       	rcall	.+0      	; 0x2666 <MDIO_VoidTogglePin+0x8>
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	6a 83       	std	Y+2, r22	; 0x02
	/*					check for pins and ports					*/
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	84 30       	cpi	r24, 0x04	; 4
    2672:	08 f0       	brcs	.+2      	; 0x2676 <MDIO_VoidTogglePin+0x18>
    2674:	72 c0       	rjmp	.+228    	; 0x275a <MDIO_VoidTogglePin+0xfc>
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	88 30       	cpi	r24, 0x08	; 8
    267a:	08 f0       	brcs	.+2      	; 0x267e <MDIO_VoidTogglePin+0x20>
    267c:	6e c0       	rjmp	.+220    	; 0x275a <MDIO_VoidTogglePin+0xfc>
	{
		switch(Copy_u8Port)
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	3c 83       	std	Y+4, r19	; 0x04
    2686:	2b 83       	std	Y+3, r18	; 0x03
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	81 30       	cpi	r24, 0x01	; 1
    268e:	91 05       	cpc	r25, r1
    2690:	49 f1       	breq	.+82     	; 0x26e4 <MDIO_VoidTogglePin+0x86>
    2692:	2b 81       	ldd	r18, Y+3	; 0x03
    2694:	3c 81       	ldd	r19, Y+4	; 0x04
    2696:	22 30       	cpi	r18, 0x02	; 2
    2698:	31 05       	cpc	r19, r1
    269a:	2c f4       	brge	.+10     	; 0x26a6 <MDIO_VoidTogglePin+0x48>
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	9c 81       	ldd	r25, Y+4	; 0x04
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	61 f0       	breq	.+24     	; 0x26bc <MDIO_VoidTogglePin+0x5e>
    26a4:	5a c0       	rjmp	.+180    	; 0x275a <MDIO_VoidTogglePin+0xfc>
    26a6:	2b 81       	ldd	r18, Y+3	; 0x03
    26a8:	3c 81       	ldd	r19, Y+4	; 0x04
    26aa:	22 30       	cpi	r18, 0x02	; 2
    26ac:	31 05       	cpc	r19, r1
    26ae:	71 f1       	breq	.+92     	; 0x270c <MDIO_VoidTogglePin+0xae>
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	9c 81       	ldd	r25, Y+4	; 0x04
    26b4:	83 30       	cpi	r24, 0x03	; 3
    26b6:	91 05       	cpc	r25, r1
    26b8:	e9 f1       	breq	.+122    	; 0x2734 <MDIO_VoidTogglePin+0xd6>
    26ba:	4f c0       	rjmp	.+158    	; 0x275a <MDIO_VoidTogglePin+0xfc>
		{
			case DIO_PORTA:TOGGLE_BIT(PORTA_REG, Copy_u8Pin); break;
    26bc:	ab e3       	ldi	r26, 0x3B	; 59
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	eb e3       	ldi	r30, 0x3B	; 59
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	48 2f       	mov	r20, r24
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	02 2e       	mov	r0, r18
    26d4:	02 c0       	rjmp	.+4      	; 0x26da <MDIO_VoidTogglePin+0x7c>
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	0a 94       	dec	r0
    26dc:	e2 f7       	brpl	.-8      	; 0x26d6 <MDIO_VoidTogglePin+0x78>
    26de:	84 27       	eor	r24, r20
    26e0:	8c 93       	st	X, r24
    26e2:	3b c0       	rjmp	.+118    	; 0x275a <MDIO_VoidTogglePin+0xfc>
			case DIO_PORTB:TOGGLE_BIT(PORTB_REG, Copy_u8Pin); break;
    26e4:	a8 e3       	ldi	r26, 0x38	; 56
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	e8 e3       	ldi	r30, 0x38	; 56
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	48 2f       	mov	r20, r24
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	28 2f       	mov	r18, r24
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	02 2e       	mov	r0, r18
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <MDIO_VoidTogglePin+0xa4>
    26fe:	88 0f       	add	r24, r24
    2700:	99 1f       	adc	r25, r25
    2702:	0a 94       	dec	r0
    2704:	e2 f7       	brpl	.-8      	; 0x26fe <MDIO_VoidTogglePin+0xa0>
    2706:	84 27       	eor	r24, r20
    2708:	8c 93       	st	X, r24
    270a:	27 c0       	rjmp	.+78     	; 0x275a <MDIO_VoidTogglePin+0xfc>
			case DIO_PORTC:TOGGLE_BIT(PORTC_REG, Copy_u8Pin); break;
    270c:	a5 e3       	ldi	r26, 0x35	; 53
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	e5 e3       	ldi	r30, 0x35	; 53
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	48 2f       	mov	r20, r24
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	02 2e       	mov	r0, r18
    2724:	02 c0       	rjmp	.+4      	; 0x272a <MDIO_VoidTogglePin+0xcc>
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	0a 94       	dec	r0
    272c:	e2 f7       	brpl	.-8      	; 0x2726 <MDIO_VoidTogglePin+0xc8>
    272e:	84 27       	eor	r24, r20
    2730:	8c 93       	st	X, r24
    2732:	13 c0       	rjmp	.+38     	; 0x275a <MDIO_VoidTogglePin+0xfc>
			case DIO_PORTD:TOGGLE_BIT(PORTD_REG, Copy_u8Pin); break;
    2734:	a2 e3       	ldi	r26, 0x32	; 50
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e2 e3       	ldi	r30, 0x32	; 50
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	48 2f       	mov	r20, r24
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	28 2f       	mov	r18, r24
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	02 2e       	mov	r0, r18
    274c:	02 c0       	rjmp	.+4      	; 0x2752 <MDIO_VoidTogglePin+0xf4>
    274e:	88 0f       	add	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	0a 94       	dec	r0
    2754:	e2 f7       	brpl	.-8      	; 0x274e <MDIO_VoidTogglePin+0xf0>
    2756:	84 27       	eor	r24, r20
    2758:	8c 93       	st	X, r24
	}
	else
	{
		/*Wrong PIN ID or POrt ID*/
	}
}
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <MDIO_VoidEnablePullUpResistor>:
 *
 * 			Here we Enable the pull up resistor
 *
 *************************************************************************/
void MDIO_VoidEnablePullUpResistor(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	00 d0       	rcall	.+0      	; 0x276e <MDIO_VoidEnablePullUpResistor+0x6>
    276e:	00 d0       	rcall	.+0      	; 0x2770 <MDIO_VoidEnablePullUpResistor+0x8>
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	6a 83       	std	Y+2, r22	; 0x02
	/*					check for pins and ports					*/
	if(Copy_u8Port <= DIO_PORTD  && Copy_u8Pin <= DIO_PIN7)
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	84 30       	cpi	r24, 0x04	; 4
    277c:	08 f0       	brcs	.+2      	; 0x2780 <MDIO_VoidEnablePullUpResistor+0x18>
    277e:	72 c0       	rjmp	.+228    	; 0x2864 <MDIO_VoidEnablePullUpResistor+0xfc>
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	88 30       	cpi	r24, 0x08	; 8
    2784:	08 f0       	brcs	.+2      	; 0x2788 <MDIO_VoidEnablePullUpResistor+0x20>
    2786:	6e c0       	rjmp	.+220    	; 0x2864 <MDIO_VoidEnablePullUpResistor+0xfc>
	{
		switch(Copy_u8Port)
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	3c 83       	std	Y+4, r19	; 0x04
    2790:	2b 83       	std	Y+3, r18	; 0x03
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	81 30       	cpi	r24, 0x01	; 1
    2798:	91 05       	cpc	r25, r1
    279a:	49 f1       	breq	.+82     	; 0x27ee <MDIO_VoidEnablePullUpResistor+0x86>
    279c:	2b 81       	ldd	r18, Y+3	; 0x03
    279e:	3c 81       	ldd	r19, Y+4	; 0x04
    27a0:	22 30       	cpi	r18, 0x02	; 2
    27a2:	31 05       	cpc	r19, r1
    27a4:	2c f4       	brge	.+10     	; 0x27b0 <MDIO_VoidEnablePullUpResistor+0x48>
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	61 f0       	breq	.+24     	; 0x27c6 <MDIO_VoidEnablePullUpResistor+0x5e>
    27ae:	5a c0       	rjmp	.+180    	; 0x2864 <MDIO_VoidEnablePullUpResistor+0xfc>
    27b0:	2b 81       	ldd	r18, Y+3	; 0x03
    27b2:	3c 81       	ldd	r19, Y+4	; 0x04
    27b4:	22 30       	cpi	r18, 0x02	; 2
    27b6:	31 05       	cpc	r19, r1
    27b8:	71 f1       	breq	.+92     	; 0x2816 <MDIO_VoidEnablePullUpResistor+0xae>
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	9c 81       	ldd	r25, Y+4	; 0x04
    27be:	83 30       	cpi	r24, 0x03	; 3
    27c0:	91 05       	cpc	r25, r1
    27c2:	e9 f1       	breq	.+122    	; 0x283e <MDIO_VoidEnablePullUpResistor+0xd6>
    27c4:	4f c0       	rjmp	.+158    	; 0x2864 <MDIO_VoidEnablePullUpResistor+0xfc>
		{
			case DIO_PORTA:SET_BIT(PORTA_REG, Copy_u8Pin); break;
    27c6:	ab e3       	ldi	r26, 0x3B	; 59
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	eb e3       	ldi	r30, 0x3B	; 59
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	48 2f       	mov	r20, r24
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	02 2e       	mov	r0, r18
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <MDIO_VoidEnablePullUpResistor+0x7c>
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	0a 94       	dec	r0
    27e6:	e2 f7       	brpl	.-8      	; 0x27e0 <MDIO_VoidEnablePullUpResistor+0x78>
    27e8:	84 2b       	or	r24, r20
    27ea:	8c 93       	st	X, r24
    27ec:	3b c0       	rjmp	.+118    	; 0x2864 <MDIO_VoidEnablePullUpResistor+0xfc>
			case DIO_PORTB:SET_BIT(PORTB_REG, Copy_u8Pin); break;
    27ee:	a8 e3       	ldi	r26, 0x38	; 56
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e8 e3       	ldi	r30, 0x38	; 56
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	48 2f       	mov	r20, r24
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	28 2f       	mov	r18, r24
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	02 2e       	mov	r0, r18
    2806:	02 c0       	rjmp	.+4      	; 0x280c <MDIO_VoidEnablePullUpResistor+0xa4>
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	0a 94       	dec	r0
    280e:	e2 f7       	brpl	.-8      	; 0x2808 <MDIO_VoidEnablePullUpResistor+0xa0>
    2810:	84 2b       	or	r24, r20
    2812:	8c 93       	st	X, r24
    2814:	27 c0       	rjmp	.+78     	; 0x2864 <MDIO_VoidEnablePullUpResistor+0xfc>
			case DIO_PORTC:SET_BIT(PORTC_REG, Copy_u8Pin); break;
    2816:	a5 e3       	ldi	r26, 0x35	; 53
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e5 e3       	ldi	r30, 0x35	; 53
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	48 2f       	mov	r20, r24
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	28 2f       	mov	r18, r24
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	02 2e       	mov	r0, r18
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <MDIO_VoidEnablePullUpResistor+0xcc>
    2830:	88 0f       	add	r24, r24
    2832:	99 1f       	adc	r25, r25
    2834:	0a 94       	dec	r0
    2836:	e2 f7       	brpl	.-8      	; 0x2830 <MDIO_VoidEnablePullUpResistor+0xc8>
    2838:	84 2b       	or	r24, r20
    283a:	8c 93       	st	X, r24
    283c:	13 c0       	rjmp	.+38     	; 0x2864 <MDIO_VoidEnablePullUpResistor+0xfc>
			case DIO_PORTD:SET_BIT(PORTD_REG, Copy_u8Pin); break;
    283e:	a2 e3       	ldi	r26, 0x32	; 50
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	e2 e3       	ldi	r30, 0x32	; 50
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	48 2f       	mov	r20, r24
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	28 2f       	mov	r18, r24
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	02 2e       	mov	r0, r18
    2856:	02 c0       	rjmp	.+4      	; 0x285c <MDIO_VoidEnablePullUpResistor+0xf4>
    2858:	88 0f       	add	r24, r24
    285a:	99 1f       	adc	r25, r25
    285c:	0a 94       	dec	r0
    285e:	e2 f7       	brpl	.-8      	; 0x2858 <MDIO_VoidEnablePullUpResistor+0xf0>
    2860:	84 2b       	or	r24, r20
    2862:	8c 93       	st	X, r24
	}
	else
	{
		/*Wrong PIN ID or POrt ID*/
	}
}
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	0f 90       	pop	r0
    286c:	cf 91       	pop	r28
    286e:	df 91       	pop	r29
    2870:	08 95       	ret

00002872 <UART_VoidInit>:
 *
 * 							Function to initialize the UART
 *
*****************************************************************************************************************************/
void UART_VoidInit(void)
{
    2872:	df 93       	push	r29
    2874:	cf 93       	push	r28
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
	/*						NORMAL SPEED													*/
	CLR_BIT(UCSRA,U2X);
    287a:	ab e2       	ldi	r26, 0x2B	; 43
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	eb e2       	ldi	r30, 0x2B	; 43
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	8d 7f       	andi	r24, 0xFD	; 253
    2886:	8c 93       	st	X, r24
	/**/
	UBRRL = 51;
    2888:	e9 e2       	ldi	r30, 0x29	; 41
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	83 e3       	ldi	r24, 0x33	; 51
    288e:	80 83       	st	Z, r24
	/**/
	SET_BIT(UCSRB,RXEN);
    2890:	aa e2       	ldi	r26, 0x2A	; 42
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	ea e2       	ldi	r30, 0x2A	; 42
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	80 61       	ori	r24, 0x10	; 16
    289c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    289e:	aa e2       	ldi	r26, 0x2A	; 42
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	ea e2       	ldi	r30, 0x2A	; 42
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	88 60       	ori	r24, 0x08	; 8
    28aa:	8c 93       	st	X, r24

	/*						No parity BITS*/
	SET_BIT(UCSRC_HELP,7);
    28ac:	80 91 82 01 	lds	r24, 0x0182
    28b0:	80 68       	ori	r24, 0x80	; 128
    28b2:	80 93 82 01 	sts	0x0182, r24
	CLR_BIT(UCSRC_HELP,6);
    28b6:	80 91 82 01 	lds	r24, 0x0182
    28ba:	8f 7b       	andi	r24, 0xBF	; 191
    28bc:	80 93 82 01 	sts	0x0182, r24
	CLR_BIT(UCSRC_HELP,5);
    28c0:	80 91 82 01 	lds	r24, 0x0182
    28c4:	8f 7d       	andi	r24, 0xDF	; 223
    28c6:	80 93 82 01 	sts	0x0182, r24
	CLR_BIT(UCSRC_HELP,4);
    28ca:	80 91 82 01 	lds	r24, 0x0182
    28ce:	8f 7e       	andi	r24, 0xEF	; 239
    28d0:	80 93 82 01 	sts	0x0182, r24
	CLR_BIT(UCSRC_HELP,3);
    28d4:	80 91 82 01 	lds	r24, 0x0182
    28d8:	87 7f       	andi	r24, 0xF7	; 247
    28da:	80 93 82 01 	sts	0x0182, r24
	SET_BIT(UCSRC_HELP,1);
    28de:	80 91 82 01 	lds	r24, 0x0182
    28e2:	82 60       	ori	r24, 0x02	; 2
    28e4:	80 93 82 01 	sts	0x0182, r24
	SET_BIT(UCSRC_HELP,2);
    28e8:	80 91 82 01 	lds	r24, 0x0182
    28ec:	84 60       	ori	r24, 0x04	; 4
    28ee:	80 93 82 01 	sts	0x0182, r24
	/*						Assign the HELP variable to the register						*/
	UCSRC = UCSRC_HELP;
    28f2:	e0 e4       	ldi	r30, 0x40	; 64
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 91 82 01 	lds	r24, 0x0182
    28fa:	80 83       	st	Z, r24

}
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <UART_VoidTransmitter>:
 *
 * 							Function to transmit Data from the UART
 *
*****************************************************************************************************************************/
void UART_VoidTransmitter(u8 Copy_u8DataByte)
{
    2902:	df 93       	push	r29
    2904:	cf 93       	push	r28
    2906:	0f 92       	push	r0
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	89 83       	std	Y+1, r24	; 0x01
#if UART_MODE == EIGHT_BIT_MODE
	/*
	 * 						WE NEED TO WAIT FOR THE DATA TO BE
	 * 						TRANSMITTED AND BUFFER IS EMPTY
	 * 																						*/
	UDR = Copy_u8DataByte;
    290e:	ec e2       	ldi	r30, 0x2C	; 44
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	80 83       	st	Z, r24
	while(!GET_BIT(UCSRA,UDRE));
    2916:	eb e2       	ldi	r30, 0x2B	; 43
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	82 95       	swap	r24
    291e:	86 95       	lsr	r24
    2920:	87 70       	andi	r24, 0x07	; 7
    2922:	88 23       	and	r24, r24
    2924:	c1 f3       	breq	.-16     	; 0x2916 <UART_VoidTransmitter+0x14>
	if ( Copy_u8DataByte & 0x0100 )
		SET_BIT(UCSRB,TXB8);
	/* 						Put data into buffer, sends the data							 */
	UDR = Copy_u8DataByte;
#endif
}
    2926:	0f 90       	pop	r0
    2928:	cf 91       	pop	r28
    292a:	df 91       	pop	r29
    292c:	08 95       	ret

0000292e <UART_VoidReceiver>:
 *
 * 							Function to Receive Data from the UART
 *
*****************************************************************************************************************************/
u8 UART_VoidReceiver(void)
{
    292e:	df 93       	push	r29
    2930:	cf 93       	push	r28
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
	/*
	 * 						WE NEED TO WAIT FOR THE DATA TO BE
	 * 						TRANSMITTED AND BUFFER IS EMPTY
	 * 																						*/
	while(!GET_BIT(UCSRA,RXC));
    2936:	eb e2       	ldi	r30, 0x2B	; 43
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	88 23       	and	r24, r24
    293e:	dc f7       	brge	.-10     	; 0x2936 <UART_VoidReceiver+0x8>
	/*						return THE SEND DATA THE UDR DATA REGISTER					*/
	return UDR ;
    2940:	ec e2       	ldi	r30, 0x2C	; 44
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
}
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <UART_u8Receive_PeriodicChecking>:
 *
 * 							Function to Receive PeriodicChecking the UART
 *
*****************************************************************************************************************************/
u8 UART_u8Receive_PeriodicChecking(u8 * Copy_u8ptrData)
{
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	00 d0       	rcall	.+0      	; 0x2952 <UART_u8Receive_PeriodicChecking+0x6>
    2952:	0f 92       	push	r0
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
    2958:	9a 83       	std	Y+2, r25	; 0x02
    295a:	89 83       	std	Y+1, r24	; 0x01
	/*						Checking if the data received or not 							*/
	if(GET_BIT(UCSRA,RXC))
    295c:	eb e2       	ldi	r30, 0x2B	; 43
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	88 23       	and	r24, r24
    2964:	4c f4       	brge	.+18     	; 0x2978 <UART_u8Receive_PeriodicChecking+0x2c>
	{
		/*					Put the Data inside the pointer									*/
		*Copy_u8ptrData = UDR;
    2966:	ec e2       	ldi	r30, 0x2C	; 44
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	e9 81       	ldd	r30, Y+1	; 0x01
    296e:	fa 81       	ldd	r31, Y+2	; 0x02
    2970:	80 83       	st	Z, r24
		return 1;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	8b 83       	std	Y+3, r24	; 0x03
    2976:	01 c0       	rjmp	.+2      	; 0x297a <UART_u8Receive_PeriodicChecking+0x2e>
	}
	else
	{
		/*					Return 0 if the data didn't receive								*/
		return 0;
    2978:	1b 82       	std	Y+3, r1	; 0x03
    297a:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <UART_RX_InterruptEnable>:
 *
 * 							Function to enable interrupt for the receiver of the UART
 *
 *****************************************************************************************************************************/
void UART_RX_InterruptEnable(void)
{
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
	/*						Set the bit to 1 RXCIE: RX Complete Interrupt Enable			*/
	SET_BIT(UCSRB,RXCIE);
    2990:	aa e2       	ldi	r26, 0x2A	; 42
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	ea e2       	ldi	r30, 0x2A	; 42
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	80 68       	ori	r24, 0x80	; 128
    299c:	8c 93       	st	X, r24
}
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	08 95       	ret

000029a4 <UART_RX_InterruptDisable>:
 *
 * 							Function to disable interrupt for the receiver of the UART
 *
*****************************************************************************************************************************/
void UART_RX_InterruptDisable(void)
{
    29a4:	df 93       	push	r29
    29a6:	cf 93       	push	r28
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
	/*						Clear the bit to 1 RXCIE: RX Complete Interrupt Disable			*/
	CLR_BIT(UCSRB,RXCIE);
    29ac:	aa e2       	ldi	r26, 0x2A	; 42
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	ea e2       	ldi	r30, 0x2A	; 42
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	8f 77       	andi	r24, 0x7F	; 127
    29b8:	8c 93       	st	X, r24
}
    29ba:	cf 91       	pop	r28
    29bc:	df 91       	pop	r29
    29be:	08 95       	ret

000029c0 <UART_TX_InterruptEnable>:
 *
 * 							Function to enable interrupt for the transmitter of the UART
 *
*****************************************************************************************************************************/
void UART_TX_InterruptEnable(void)
{
    29c0:	df 93       	push	r29
    29c2:	cf 93       	push	r28
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
	/*						Set the bit number 6 to 1 TXCIE: TX Complete Interrupt Enable		*/
	SET_BIT(UCSRB,TXCIE);
    29c8:	aa e2       	ldi	r26, 0x2A	; 42
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	ea e2       	ldi	r30, 0x2A	; 42
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	80 64       	ori	r24, 0x40	; 64
    29d4:	8c 93       	st	X, r24
}
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <UART_TX_InterruptDisable>:
 *
 * 							Function to disable interrupt for the transmitter of the UART
 *
 *****************************************************************************************************************************/
void UART_TX_InterruptDisable(void)
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
	/*						Clear the bit number 6 to 1 TXCIE: TX Complete Interrupt Disable	*/
	CLR_BIT(UCSRB,TXCIE);
    29e4:	aa e2       	ldi	r26, 0x2A	; 42
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	ea e2       	ldi	r30, 0x2A	; 42
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	8f 7b       	andi	r24, 0xBF	; 191
    29f0:	8c 93       	st	X, r24
}
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <UART_RX_SetCallBack>:
 *
 * 							Function for setting the callback receiver
 *
*****************************************************************************************************************************/
void UART_RX_SetCallBack(void (*LocalEptr)(void))
{
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	00 d0       	rcall	.+0      	; 0x29fe <UART_RX_SetCallBack+0x6>
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	9a 83       	std	Y+2, r25	; 0x02
    2a04:	89 83       	std	Y+1, r24	; 0x01
	/**/
}
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <UART_TX_SetCallBack>:
 *
 * 							Function for setting the callback transmitter
 *
 ******************************************************************************************************************************/
void UART_TX_SetCallBack(void (*LocalEptr)(void))
{
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	00 d0       	rcall	.+0      	; 0x2a16 <UART_TX_SetCallBack+0x6>
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	9a 83       	std	Y+2, r25	; 0x02
    2a1c:	89 83       	std	Y+1, r24	; 0x01

}
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <UART_SendNumberOfBlock>:
 *
 * 							Function for sending the number of block in UART
 *
 ******************************************************************************************************************************/
void UART_SendNumberOfBlock(u8 Copy_u8Data)
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	0f 92       	push	r0
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	89 83       	std	Y+1, r24	; 0x01
	UDR = Copy_u8Data;
    2a34:	ec e2       	ldi	r30, 0x2C	; 44
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	80 83       	st	Z, r24
}
    2a3c:	0f 90       	pop	r0
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <UART_u8ReceiveNumberOfBlock>:
 *
 * 							Function for receive the number of block in UART
 *
 *****************************************************************************************************************************/
u8 UART_u8ReceiveNumberOfBlock(void)
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    2a4c:	ec e2       	ldi	r30, 0x2C	; 44
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
}
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <UART_VoidSendString>:
 *
 * 							Function for sending a string in UART
 *
 *****************************************************************************************************************************/
void UART_VoidSendString(u8 * Copy_u8String)
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <UART_VoidSendString+0x6>
    2a5e:	0f 92       	push	r0
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	9b 83       	std	Y+3, r25	; 0x03
    2a66:	8a 83       	std	Y+2, r24	; 0x02
	/**/
	u8 Local_u8Counter;
	for(Local_u8Counter = 0; Copy_u8String[Local_u8Counter] ; Local_u8Counter++)
    2a68:	19 82       	std	Y+1, r1	; 0x01
    2a6a:	0e c0       	rjmp	.+28     	; 0x2a88 <UART_VoidSendString+0x30>
	{
		/*					Sending each byte using the transmit function								*/
		UART_VoidTransmitter(Copy_u8String[Local_u8Counter]);
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	28 2f       	mov	r18, r24
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	9b 81       	ldd	r25, Y+3	; 0x03
    2a76:	fc 01       	movw	r30, r24
    2a78:	e2 0f       	add	r30, r18
    2a7a:	f3 1f       	adc	r31, r19
    2a7c:	80 81       	ld	r24, Z
    2a7e:	0e 94 81 14 	call	0x2902	; 0x2902 <UART_VoidTransmitter>
 *****************************************************************************************************************************/
void UART_VoidSendString(u8 * Copy_u8String)
{
	/**/
	u8 Local_u8Counter;
	for(Local_u8Counter = 0; Copy_u8String[Local_u8Counter] ; Local_u8Counter++)
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	8f 5f       	subi	r24, 0xFF	; 255
    2a86:	89 83       	std	Y+1, r24	; 0x01
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	28 2f       	mov	r18, r24
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	9b 81       	ldd	r25, Y+3	; 0x03
    2a92:	fc 01       	movw	r30, r24
    2a94:	e2 0f       	add	r30, r18
    2a96:	f3 1f       	adc	r31, r19
    2a98:	80 81       	ld	r24, Z
    2a9a:	88 23       	and	r24, r24
    2a9c:	39 f7       	brne	.-50     	; 0x2a6c <UART_VoidSendString+0x14>
	{
		/*					Sending each byte using the transmit function								*/
		UART_VoidTransmitter(Copy_u8String[Local_u8Counter]);
	}
	UART_VoidTransmitter("#");
    2a9e:	80 e6       	ldi	r24, 0x60	; 96
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	0e 94 81 14 	call	0x2902	; 0x2902 <UART_VoidTransmitter>
}
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	cf 91       	pop	r28
    2aae:	df 91       	pop	r29
    2ab0:	08 95       	ret

00002ab2 <UART_VoidReceiveString>:
 *
 * 							Function for receiving a string in UART
 *
 *****************************************************************************************************************************/
void UART_VoidReceiveString(u8 * Copy_u8String)
{
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	00 d0       	rcall	.+0      	; 0x2abc <UART_VoidReceiveString+0xa>
    2abc:	0f 92       	push	r0
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
    2ac2:	9b 83       	std	Y+3, r25	; 0x03
    2ac4:	8a 83       	std	Y+2, r24	; 0x02
	/*						initialize a counter and polling on the string 								*/
	u8 Local_u8Counter = 0;
    2ac6:	19 82       	std	Y+1, r1	; 0x01
	Copy_u8String[Local_u8Counter] = UART_VoidReceiver();
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad2:	8c 01       	movw	r16, r24
    2ad4:	02 0f       	add	r16, r18
    2ad6:	13 1f       	adc	r17, r19
    2ad8:	0e 94 97 14 	call	0x292e	; 0x292e <UART_VoidReceiver>
    2adc:	f8 01       	movw	r30, r16
    2ade:	80 83       	st	Z, r24
    2ae0:	0f c0       	rjmp	.+30     	; 0x2b00 <UART_VoidReceiveString+0x4e>
	for(; Copy_u8String[Local_u8Counter] != 'A'; )
	{
		Local_u8Counter++;
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	8f 5f       	subi	r24, 0xFF	; 255
    2ae6:	89 83       	std	Y+1, r24	; 0x01
		/*					Receiving each byte using the receive function								*/
		Copy_u8String[Local_u8Counter] = UART_VoidReceiver();
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	28 2f       	mov	r18, r24
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	9b 81       	ldd	r25, Y+3	; 0x03
    2af2:	8c 01       	movw	r16, r24
    2af4:	02 0f       	add	r16, r18
    2af6:	13 1f       	adc	r17, r19
    2af8:	0e 94 97 14 	call	0x292e	; 0x292e <UART_VoidReceiver>
    2afc:	f8 01       	movw	r30, r16
    2afe:	80 83       	st	Z, r24
void UART_VoidReceiveString(u8 * Copy_u8String)
{
	/*						initialize a counter and polling on the string 								*/
	u8 Local_u8Counter = 0;
	Copy_u8String[Local_u8Counter] = UART_VoidReceiver();
	for(; Copy_u8String[Local_u8Counter] != 'A'; )
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	e2 0f       	add	r30, r18
    2b0e:	f3 1f       	adc	r31, r19
    2b10:	80 81       	ld	r24, Z
    2b12:	81 34       	cpi	r24, 0x41	; 65
    2b14:	31 f7       	brne	.-52     	; 0x2ae2 <UART_VoidReceiveString+0x30>
	{
		Local_u8Counter++;
		/*					Receiving each byte using the receive function								*/
		Copy_u8String[Local_u8Counter] = UART_VoidReceiver();
	}
	Copy_u8String[Local_u8Counter] = 0;
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	28 2f       	mov	r18, r24
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b20:	fc 01       	movw	r30, r24
    2b22:	e2 0f       	add	r30, r18
    2b24:	f3 1f       	adc	r31, r19
    2b26:	10 82       	st	Z, r1
}
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	08 95       	ret

00002b38 <main>:
#include"MDIO_interface.h"
#include"MDIO_Private.h"
#include"avr/delay.h"

int main(void)
{
    2b38:	df 93       	push	r29
    2b3a:	cf 93       	push	r28
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
    2b40:	e9 97       	sbiw	r28, 0x39	; 57
    2b42:	0f b6       	in	r0, 0x3f	; 63
    2b44:	f8 94       	cli
    2b46:	de bf       	out	0x3e, r29	; 62
    2b48:	0f be       	out	0x3f, r0	; 63
    2b4a:	cd bf       	out	0x3d, r28	; 61
	HLCD_enuInit();
    2b4c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <HLCD_enuInit>
	HLCD_ClearDisplay();
    2b50:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <HLCD_ClearDisplay>
	MDIO_VoidSetPinDirection(DIO_PORTA,DIO_PIN0,1);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	41 e0       	ldi	r20, 0x01	; 1
    2b5a:	0e 94 19 10 	call	0x2032	; 0x2032 <MDIO_VoidSetPinDirection>
	UART_VoidInit();
    2b5e:	0e 94 39 14 	call	0x2872	; 0x2872 <UART_VoidInit>

	while(1)
	{
		u8 Local_Variable = UART_VoidReceiver();
    2b62:	0e 94 97 14 	call	0x292e	; 0x292e <UART_VoidReceiver>
    2b66:	89 af       	std	Y+57, r24	; 0x39
		if(Local_Variable == 'a')
    2b68:	89 ad       	ldd	r24, Y+57	; 0x39
    2b6a:	81 36       	cpi	r24, 0x61	; 97
    2b6c:	09 f0       	breq	.+2      	; 0x2b70 <main+0x38>
    2b6e:	f9 c0       	rjmp	.+498    	; 0x2d62 <main+0x22a>
		{

			MDIO_VoidSetPinValue(DIO_PORTA,DIO_PIN0,DIO_PIN_HIGH);
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	60 e0       	ldi	r22, 0x00	; 0
    2b74:	41 e0       	ldi	r20, 0x01	; 1
    2b76:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_VoidSetPinValue>
			/**/
			UART_VoidTransmitter(Local_Variable);
    2b7a:	89 ad       	ldd	r24, Y+57	; 0x39
    2b7c:	0e 94 81 14 	call	0x2902	; 0x2902 <UART_VoidTransmitter>
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	a8 e4       	ldi	r26, 0x48	; 72
    2b86:	b3 e4       	ldi	r27, 0x43	; 67
    2b88:	8d ab       	std	Y+53, r24	; 0x35
    2b8a:	9e ab       	std	Y+54, r25	; 0x36
    2b8c:	af ab       	std	Y+55, r26	; 0x37
    2b8e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b90:	6d a9       	ldd	r22, Y+53	; 0x35
    2b92:	7e a9       	ldd	r23, Y+54	; 0x36
    2b94:	8f a9       	ldd	r24, Y+55	; 0x37
    2b96:	98 ad       	ldd	r25, Y+56	; 0x38
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	4a ef       	ldi	r20, 0xFA	; 250
    2b9e:	54 e4       	ldi	r21, 0x44	; 68
    2ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	89 ab       	std	Y+49, r24	; 0x31
    2baa:	9a ab       	std	Y+50, r25	; 0x32
    2bac:	ab ab       	std	Y+51, r26	; 0x33
    2bae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bb0:	69 a9       	ldd	r22, Y+49	; 0x31
    2bb2:	7a a9       	ldd	r23, Y+50	; 0x32
    2bb4:	8b a9       	ldd	r24, Y+51	; 0x33
    2bb6:	9c a9       	ldd	r25, Y+52	; 0x34
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e8       	ldi	r20, 0x80	; 128
    2bbe:	5f e3       	ldi	r21, 0x3F	; 63
    2bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc4:	88 23       	and	r24, r24
    2bc6:	2c f4       	brge	.+10     	; 0x2bd2 <main+0x9a>
		__ticks = 1;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	98 ab       	std	Y+48, r25	; 0x30
    2bce:	8f a7       	std	Y+47, r24	; 0x2f
    2bd0:	3f c0       	rjmp	.+126    	; 0x2c50 <main+0x118>
	else if (__tmp > 65535)
    2bd2:	69 a9       	ldd	r22, Y+49	; 0x31
    2bd4:	7a a9       	ldd	r23, Y+50	; 0x32
    2bd6:	8b a9       	ldd	r24, Y+51	; 0x33
    2bd8:	9c a9       	ldd	r25, Y+52	; 0x34
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	3f ef       	ldi	r19, 0xFF	; 255
    2bde:	4f e7       	ldi	r20, 0x7F	; 127
    2be0:	57 e4       	ldi	r21, 0x47	; 71
    2be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be6:	18 16       	cp	r1, r24
    2be8:	4c f5       	brge	.+82     	; 0x2c3c <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bea:	6d a9       	ldd	r22, Y+53	; 0x35
    2bec:	7e a9       	ldd	r23, Y+54	; 0x36
    2bee:	8f a9       	ldd	r24, Y+55	; 0x37
    2bf0:	98 ad       	ldd	r25, Y+56	; 0x38
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e2       	ldi	r20, 0x20	; 32
    2bf8:	51 e4       	ldi	r21, 0x41	; 65
    2bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	98 ab       	std	Y+48, r25	; 0x30
    2c10:	8f a7       	std	Y+47, r24	; 0x2f
    2c12:	0f c0       	rjmp	.+30     	; 0x2c32 <main+0xfa>
    2c14:	88 ec       	ldi	r24, 0xC8	; 200
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	9e a7       	std	Y+46, r25	; 0x2e
    2c1a:	8d a7       	std	Y+45, r24	; 0x2d
    2c1c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c1e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <main+0xe8>
    2c24:	9e a7       	std	Y+46, r25	; 0x2e
    2c26:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c28:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c2a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	98 ab       	std	Y+48, r25	; 0x30
    2c30:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c32:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c34:	98 a9       	ldd	r25, Y+48	; 0x30
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	69 f7       	brne	.-38     	; 0x2c14 <main+0xdc>
    2c3a:	14 c0       	rjmp	.+40     	; 0x2c64 <main+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c3e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c40:	8b a9       	ldd	r24, Y+51	; 0x33
    2c42:	9c a9       	ldd	r25, Y+52	; 0x34
    2c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	98 ab       	std	Y+48, r25	; 0x30
    2c4e:	8f a7       	std	Y+47, r24	; 0x2f
    2c50:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c52:	98 a9       	ldd	r25, Y+48	; 0x30
    2c54:	9c a7       	std	Y+44, r25	; 0x2c
    2c56:	8b a7       	std	Y+43, r24	; 0x2b
    2c58:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <main+0x124>
    2c60:	9c a7       	std	Y+44, r25	; 0x2c
    2c62:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(200);
			HLCD_GoToXY(1,1);
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	61 e0       	ldi	r22, 0x01	; 1
    2c68:	0e 94 90 0a 	call	0x1520	; 0x1520 <HLCD_GoToXY>
			HLCD_VoidWriteStr("LED IS ON");
    2c6c:	82 e6       	ldi	r24, 0x62	; 98
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	0e 94 67 0a 	call	0x14ce	; 0x14ce <HLCD_VoidWriteStr>
			UART_VoidSendString("LEDON");
    2c74:	8c e6       	ldi	r24, 0x6C	; 108
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <UART_VoidSendString>
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	a8 e4       	ldi	r26, 0x48	; 72
    2c82:	b3 e4       	ldi	r27, 0x43	; 67
    2c84:	8f a3       	std	Y+39, r24	; 0x27
    2c86:	98 a7       	std	Y+40, r25	; 0x28
    2c88:	a9 a7       	std	Y+41, r26	; 0x29
    2c8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8c:	6f a1       	ldd	r22, Y+39	; 0x27
    2c8e:	78 a5       	ldd	r23, Y+40	; 0x28
    2c90:	89 a5       	ldd	r24, Y+41	; 0x29
    2c92:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	4a ef       	ldi	r20, 0xFA	; 250
    2c9a:	54 e4       	ldi	r21, 0x44	; 68
    2c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	8b a3       	std	Y+35, r24	; 0x23
    2ca6:	9c a3       	std	Y+36, r25	; 0x24
    2ca8:	ad a3       	std	Y+37, r26	; 0x25
    2caa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cac:	6b a1       	ldd	r22, Y+35	; 0x23
    2cae:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e8       	ldi	r20, 0x80	; 128
    2cba:	5f e3       	ldi	r21, 0x3F	; 63
    2cbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cc0:	88 23       	and	r24, r24
    2cc2:	2c f4       	brge	.+10     	; 0x2cce <main+0x196>
		__ticks = 1;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	9a a3       	std	Y+34, r25	; 0x22
    2cca:	89 a3       	std	Y+33, r24	; 0x21
    2ccc:	3f c0       	rjmp	.+126    	; 0x2d4c <main+0x214>
	else if (__tmp > 65535)
    2cce:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd0:	7c a1       	ldd	r23, Y+36	; 0x24
    2cd2:	8d a1       	ldd	r24, Y+37	; 0x25
    2cd4:	9e a1       	ldd	r25, Y+38	; 0x26
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	3f ef       	ldi	r19, 0xFF	; 255
    2cda:	4f e7       	ldi	r20, 0x7F	; 127
    2cdc:	57 e4       	ldi	r21, 0x47	; 71
    2cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ce2:	18 16       	cp	r1, r24
    2ce4:	4c f5       	brge	.+82     	; 0x2d38 <main+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ce8:	78 a5       	ldd	r23, Y+40	; 0x28
    2cea:	89 a5       	ldd	r24, Y+41	; 0x29
    2cec:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e2       	ldi	r20, 0x20	; 32
    2cf4:	51 e4       	ldi	r21, 0x41	; 65
    2cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	bc 01       	movw	r22, r24
    2d00:	cd 01       	movw	r24, r26
    2d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	9a a3       	std	Y+34, r25	; 0x22
    2d0c:	89 a3       	std	Y+33, r24	; 0x21
    2d0e:	0f c0       	rjmp	.+30     	; 0x2d2e <main+0x1f6>
    2d10:	88 ec       	ldi	r24, 0xC8	; 200
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	98 a3       	std	Y+32, r25	; 0x20
    2d16:	8f 8f       	std	Y+31, r24	; 0x1f
    2d18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d1a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <main+0x1e4>
    2d20:	98 a3       	std	Y+32, r25	; 0x20
    2d22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d24:	89 a1       	ldd	r24, Y+33	; 0x21
    2d26:	9a a1       	ldd	r25, Y+34	; 0x22
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	9a a3       	std	Y+34, r25	; 0x22
    2d2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d30:	9a a1       	ldd	r25, Y+34	; 0x22
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	69 f7       	brne	.-38     	; 0x2d10 <main+0x1d8>
    2d36:	15 cf       	rjmp	.-470    	; 0x2b62 <main+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d38:	6b a1       	ldd	r22, Y+35	; 0x23
    2d3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	9a a3       	std	Y+34, r25	; 0x22
    2d4a:	89 a3       	std	Y+33, r24	; 0x21
    2d4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d4e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d50:	9e 8f       	std	Y+30, r25	; 0x1e
    2d52:	8d 8f       	std	Y+29, r24	; 0x1d
    2d54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <main+0x220>
    2d5c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d5e:	8d 8f       	std	Y+29, r24	; 0x1d
    2d60:	00 cf       	rjmp	.-512    	; 0x2b62 <main+0x2a>
			_delay_ms(200);

		}
		else if (Local_Variable == 'b')
    2d62:	89 ad       	ldd	r24, Y+57	; 0x39
    2d64:	82 36       	cpi	r24, 0x62	; 98
    2d66:	09 f0       	breq	.+2      	; 0x2d6a <main+0x232>
    2d68:	fc ce       	rjmp	.-520    	; 0x2b62 <main+0x2a>
		{
			/**/
			MDIO_VoidSetPinValue(DIO_PORTA,DIO_PIN0,DIO_PIN_LOW);
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	60 e0       	ldi	r22, 0x00	; 0
    2d6e:	40 e0       	ldi	r20, 0x00	; 0
    2d70:	0e 94 21 11 	call	0x2242	; 0x2242 <MDIO_VoidSetPinValue>
			UART_VoidTransmitter(Local_Variable);
    2d74:	89 ad       	ldd	r24, Y+57	; 0x39
    2d76:	0e 94 81 14 	call	0x2902	; 0x2902 <UART_VoidTransmitter>
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	a8 e4       	ldi	r26, 0x48	; 72
    2d80:	b3 e4       	ldi	r27, 0x43	; 67
    2d82:	89 8f       	std	Y+25, r24	; 0x19
    2d84:	9a 8f       	std	Y+26, r25	; 0x1a
    2d86:	ab 8f       	std	Y+27, r26	; 0x1b
    2d88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	4a ef       	ldi	r20, 0xFA	; 250
    2d98:	54 e4       	ldi	r21, 0x44	; 68
    2d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	8d 8b       	std	Y+21, r24	; 0x15
    2da4:	9e 8b       	std	Y+22, r25	; 0x16
    2da6:	af 8b       	std	Y+23, r26	; 0x17
    2da8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2daa:	6d 89       	ldd	r22, Y+21	; 0x15
    2dac:	7e 89       	ldd	r23, Y+22	; 0x16
    2dae:	8f 89       	ldd	r24, Y+23	; 0x17
    2db0:	98 8d       	ldd	r25, Y+24	; 0x18
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e8       	ldi	r20, 0x80	; 128
    2db8:	5f e3       	ldi	r21, 0x3F	; 63
    2dba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dbe:	88 23       	and	r24, r24
    2dc0:	2c f4       	brge	.+10     	; 0x2dcc <main+0x294>
		__ticks = 1;
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	9c 8b       	std	Y+20, r25	; 0x14
    2dc8:	8b 8b       	std	Y+19, r24	; 0x13
    2dca:	3f c0       	rjmp	.+126    	; 0x2e4a <main+0x312>
	else if (__tmp > 65535)
    2dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dce:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	3f ef       	ldi	r19, 0xFF	; 255
    2dd8:	4f e7       	ldi	r20, 0x7F	; 127
    2dda:	57 e4       	ldi	r21, 0x47	; 71
    2ddc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2de0:	18 16       	cp	r1, r24
    2de2:	4c f5       	brge	.+82     	; 0x2e36 <main+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de4:	69 8d       	ldd	r22, Y+25	; 0x19
    2de6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2de8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e2       	ldi	r20, 0x20	; 32
    2df2:	51 e4       	ldi	r21, 0x41	; 65
    2df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	9c 8b       	std	Y+20, r25	; 0x14
    2e0a:	8b 8b       	std	Y+19, r24	; 0x13
    2e0c:	0f c0       	rjmp	.+30     	; 0x2e2c <main+0x2f4>
    2e0e:	88 ec       	ldi	r24, 0xC8	; 200
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	9a 8b       	std	Y+18, r25	; 0x12
    2e14:	89 8b       	std	Y+17, r24	; 0x11
    2e16:	89 89       	ldd	r24, Y+17	; 0x11
    2e18:	9a 89       	ldd	r25, Y+18	; 0x12
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	f1 f7       	brne	.-4      	; 0x2e1a <main+0x2e2>
    2e1e:	9a 8b       	std	Y+18, r25	; 0x12
    2e20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e22:	8b 89       	ldd	r24, Y+19	; 0x13
    2e24:	9c 89       	ldd	r25, Y+20	; 0x14
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	9c 8b       	std	Y+20, r25	; 0x14
    2e2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e30:	00 97       	sbiw	r24, 0x00	; 0
    2e32:	69 f7       	brne	.-38     	; 0x2e0e <main+0x2d6>
    2e34:	14 c0       	rjmp	.+40     	; 0x2e5e <main+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e36:	6d 89       	ldd	r22, Y+21	; 0x15
    2e38:	7e 89       	ldd	r23, Y+22	; 0x16
    2e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	9c 8b       	std	Y+20, r25	; 0x14
    2e48:	8b 8b       	std	Y+19, r24	; 0x13
    2e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e4e:	98 8b       	std	Y+16, r25	; 0x10
    2e50:	8f 87       	std	Y+15, r24	; 0x0f
    2e52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e54:	98 89       	ldd	r25, Y+16	; 0x10
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <main+0x31e>
    2e5a:	98 8b       	std	Y+16, r25	; 0x10
    2e5c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			HLCD_ClearDisplay();
    2e5e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <HLCD_ClearDisplay>
			HLCD_GoToXY(1,1);
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	61 e0       	ldi	r22, 0x01	; 1
    2e66:	0e 94 90 0a 	call	0x1520	; 0x1520 <HLCD_GoToXY>
			HLCD_VoidWriteStr("LED IS ON");
    2e6a:	82 e6       	ldi	r24, 0x62	; 98
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <HLCD_VoidWriteStr>
			UART_VoidSendString("LEDOFF");
    2e72:	82 e7       	ldi	r24, 0x72	; 114
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <UART_VoidSendString>
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	a8 e4       	ldi	r26, 0x48	; 72
    2e80:	b3 e4       	ldi	r27, 0x43	; 67
    2e82:	8b 87       	std	Y+11, r24	; 0x0b
    2e84:	9c 87       	std	Y+12, r25	; 0x0c
    2e86:	ad 87       	std	Y+13, r26	; 0x0d
    2e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	4a ef       	ldi	r20, 0xFA	; 250
    2e98:	54 e4       	ldi	r21, 0x44	; 68
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	8f 83       	std	Y+7, r24	; 0x07
    2ea4:	98 87       	std	Y+8, r25	; 0x08
    2ea6:	a9 87       	std	Y+9, r26	; 0x09
    2ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2eac:	78 85       	ldd	r23, Y+8	; 0x08
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e8       	ldi	r20, 0x80	; 128
    2eb8:	5f e3       	ldi	r21, 0x3F	; 63
    2eba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ebe:	88 23       	and	r24, r24
    2ec0:	2c f4       	brge	.+10     	; 0x2ecc <main+0x394>
		__ticks = 1;
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	9e 83       	std	Y+6, r25	; 0x06
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
    2eca:	3f c0       	rjmp	.+126    	; 0x2f4a <main+0x412>
	else if (__tmp > 65535)
    2ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ece:	78 85       	ldd	r23, Y+8	; 0x08
    2ed0:	89 85       	ldd	r24, Y+9	; 0x09
    2ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	3f ef       	ldi	r19, 0xFF	; 255
    2ed8:	4f e7       	ldi	r20, 0x7F	; 127
    2eda:	57 e4       	ldi	r21, 0x47	; 71
    2edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee0:	18 16       	cp	r1, r24
    2ee2:	4c f5       	brge	.+82     	; 0x2f36 <main+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e2       	ldi	r20, 0x20	; 32
    2ef2:	51 e4       	ldi	r21, 0x41	; 65
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9e 83       	std	Y+6, r25	; 0x06
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
    2f0c:	0f c0       	rjmp	.+30     	; 0x2f2c <main+0x3f4>
    2f0e:	88 ec       	ldi	r24, 0xC8	; 200
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	9c 83       	std	Y+4, r25	; 0x04
    2f14:	8b 83       	std	Y+3, r24	; 0x03
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	f1 f7       	brne	.-4      	; 0x2f1a <main+0x3e2>
    2f1e:	9c 83       	std	Y+4, r25	; 0x04
    2f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f22:	8d 81       	ldd	r24, Y+5	; 0x05
    2f24:	9e 81       	ldd	r25, Y+6	; 0x06
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	69 f7       	brne	.-38     	; 0x2f0e <main+0x3d6>
    2f34:	16 ce       	rjmp	.-980    	; 0x2b62 <main+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f36:	6f 81       	ldd	r22, Y+7	; 0x07
    2f38:	78 85       	ldd	r23, Y+8	; 0x08
    2f3a:	89 85       	ldd	r24, Y+9	; 0x09
    2f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	8d 83       	std	Y+5, r24	; 0x05
    2f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4e:	9a 83       	std	Y+2, r25	; 0x02
    2f50:	89 83       	std	Y+1, r24	; 0x01
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	9a 81       	ldd	r25, Y+2	; 0x02
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <main+0x41e>
    2f5a:	9a 83       	std	Y+2, r25	; 0x02
    2f5c:	89 83       	std	Y+1, r24	; 0x01
    2f5e:	01 ce       	rjmp	.-1022   	; 0x2b62 <main+0x2a>

00002f60 <__mulsi3>:
    2f60:	62 9f       	mul	r22, r18
    2f62:	d0 01       	movw	r26, r0
    2f64:	73 9f       	mul	r23, r19
    2f66:	f0 01       	movw	r30, r0
    2f68:	82 9f       	mul	r24, r18
    2f6a:	e0 0d       	add	r30, r0
    2f6c:	f1 1d       	adc	r31, r1
    2f6e:	64 9f       	mul	r22, r20
    2f70:	e0 0d       	add	r30, r0
    2f72:	f1 1d       	adc	r31, r1
    2f74:	92 9f       	mul	r25, r18
    2f76:	f0 0d       	add	r31, r0
    2f78:	83 9f       	mul	r24, r19
    2f7a:	f0 0d       	add	r31, r0
    2f7c:	74 9f       	mul	r23, r20
    2f7e:	f0 0d       	add	r31, r0
    2f80:	65 9f       	mul	r22, r21
    2f82:	f0 0d       	add	r31, r0
    2f84:	99 27       	eor	r25, r25
    2f86:	72 9f       	mul	r23, r18
    2f88:	b0 0d       	add	r27, r0
    2f8a:	e1 1d       	adc	r30, r1
    2f8c:	f9 1f       	adc	r31, r25
    2f8e:	63 9f       	mul	r22, r19
    2f90:	b0 0d       	add	r27, r0
    2f92:	e1 1d       	adc	r30, r1
    2f94:	f9 1f       	adc	r31, r25
    2f96:	bd 01       	movw	r22, r26
    2f98:	cf 01       	movw	r24, r30
    2f9a:	11 24       	eor	r1, r1
    2f9c:	08 95       	ret

00002f9e <__udivmodsi4>:
    2f9e:	a1 e2       	ldi	r26, 0x21	; 33
    2fa0:	1a 2e       	mov	r1, r26
    2fa2:	aa 1b       	sub	r26, r26
    2fa4:	bb 1b       	sub	r27, r27
    2fa6:	fd 01       	movw	r30, r26
    2fa8:	0d c0       	rjmp	.+26     	; 0x2fc4 <__udivmodsi4_ep>

00002faa <__udivmodsi4_loop>:
    2faa:	aa 1f       	adc	r26, r26
    2fac:	bb 1f       	adc	r27, r27
    2fae:	ee 1f       	adc	r30, r30
    2fb0:	ff 1f       	adc	r31, r31
    2fb2:	a2 17       	cp	r26, r18
    2fb4:	b3 07       	cpc	r27, r19
    2fb6:	e4 07       	cpc	r30, r20
    2fb8:	f5 07       	cpc	r31, r21
    2fba:	20 f0       	brcs	.+8      	; 0x2fc4 <__udivmodsi4_ep>
    2fbc:	a2 1b       	sub	r26, r18
    2fbe:	b3 0b       	sbc	r27, r19
    2fc0:	e4 0b       	sbc	r30, r20
    2fc2:	f5 0b       	sbc	r31, r21

00002fc4 <__udivmodsi4_ep>:
    2fc4:	66 1f       	adc	r22, r22
    2fc6:	77 1f       	adc	r23, r23
    2fc8:	88 1f       	adc	r24, r24
    2fca:	99 1f       	adc	r25, r25
    2fcc:	1a 94       	dec	r1
    2fce:	69 f7       	brne	.-38     	; 0x2faa <__udivmodsi4_loop>
    2fd0:	60 95       	com	r22
    2fd2:	70 95       	com	r23
    2fd4:	80 95       	com	r24
    2fd6:	90 95       	com	r25
    2fd8:	9b 01       	movw	r18, r22
    2fda:	ac 01       	movw	r20, r24
    2fdc:	bd 01       	movw	r22, r26
    2fde:	cf 01       	movw	r24, r30
    2fe0:	08 95       	ret

00002fe2 <__prologue_saves__>:
    2fe2:	2f 92       	push	r2
    2fe4:	3f 92       	push	r3
    2fe6:	4f 92       	push	r4
    2fe8:	5f 92       	push	r5
    2fea:	6f 92       	push	r6
    2fec:	7f 92       	push	r7
    2fee:	8f 92       	push	r8
    2ff0:	9f 92       	push	r9
    2ff2:	af 92       	push	r10
    2ff4:	bf 92       	push	r11
    2ff6:	cf 92       	push	r12
    2ff8:	df 92       	push	r13
    2ffa:	ef 92       	push	r14
    2ffc:	ff 92       	push	r15
    2ffe:	0f 93       	push	r16
    3000:	1f 93       	push	r17
    3002:	cf 93       	push	r28
    3004:	df 93       	push	r29
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
    300a:	ca 1b       	sub	r28, r26
    300c:	db 0b       	sbc	r29, r27
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	09 94       	ijmp

0000301a <__epilogue_restores__>:
    301a:	2a 88       	ldd	r2, Y+18	; 0x12
    301c:	39 88       	ldd	r3, Y+17	; 0x11
    301e:	48 88       	ldd	r4, Y+16	; 0x10
    3020:	5f 84       	ldd	r5, Y+15	; 0x0f
    3022:	6e 84       	ldd	r6, Y+14	; 0x0e
    3024:	7d 84       	ldd	r7, Y+13	; 0x0d
    3026:	8c 84       	ldd	r8, Y+12	; 0x0c
    3028:	9b 84       	ldd	r9, Y+11	; 0x0b
    302a:	aa 84       	ldd	r10, Y+10	; 0x0a
    302c:	b9 84       	ldd	r11, Y+9	; 0x09
    302e:	c8 84       	ldd	r12, Y+8	; 0x08
    3030:	df 80       	ldd	r13, Y+7	; 0x07
    3032:	ee 80       	ldd	r14, Y+6	; 0x06
    3034:	fd 80       	ldd	r15, Y+5	; 0x05
    3036:	0c 81       	ldd	r16, Y+4	; 0x04
    3038:	1b 81       	ldd	r17, Y+3	; 0x03
    303a:	aa 81       	ldd	r26, Y+2	; 0x02
    303c:	b9 81       	ldd	r27, Y+1	; 0x01
    303e:	ce 0f       	add	r28, r30
    3040:	d1 1d       	adc	r29, r1
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	f8 94       	cli
    3046:	de bf       	out	0x3e, r29	; 62
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	cd bf       	out	0x3d, r28	; 61
    304c:	ed 01       	movw	r28, r26
    304e:	08 95       	ret

00003050 <_exit>:
    3050:	f8 94       	cli

00003052 <__stop_program>:
    3052:	ff cf       	rjmp	.-2      	; 0x3052 <__stop_program>
